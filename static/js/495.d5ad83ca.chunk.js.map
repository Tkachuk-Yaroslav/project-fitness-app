{"version":3,"file":"static/js/495.d5ad83ca.chunk.js","mappings":"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","sources":["../node_modules/src/support/cache.ts","../node_modules/src/support/compatibility/isBrowser.ts","../node_modules/src/support/utils/types.ts","../node_modules/src/support/utils/array.ts","../node_modules/src/support/utils/object.ts","../node_modules/src/support/dom/attribute.ts","../node_modules/src/support/dom/traversal.ts","../node_modules/src/support/utils/noop.ts","../node_modules/src/support/dom/manipulation.ts","../node_modules/src/support/dom/create.ts","../node_modules/src/support/utils/alias.ts","../node_modules/src/support/compatibility/vendors.ts","../node_modules/src/support/compatibility/apis.ts","../node_modules/src/support/utils/function.ts","../node_modules/src/support/dom/class.ts","../node_modules/src/support/dom/style.ts","../node_modules/src/support/utils/strings.ts","../node_modules/src/support/dom/dimensions.ts","../node_modules/src/support/utils/equal.ts","../node_modules/src/support/dom/events.ts","../node_modules/src/support/dom/offset.ts","../node_modules/src/support/dom/scroll.ts","../node_modules/src/support/eventListeners.ts","../node_modules/src/options.ts","../node_modules/src/classnames.ts","../node_modules/src/plugins/plugins.ts","../node_modules/src/plugins/sizeObserverPlugin/sizeObserverPlugin.ts","../node_modules/src/plugins/scrollbarsHidingPlugin/scrollbarsHidingPlugin.ts","../node_modules/src/plugins/clickScrollPlugin/clickScrollPlugin.ts","../node_modules/src/environment.ts","../node_modules/src/initialization.ts","../node_modules/src/instances.ts","../node_modules/src/observers/domObserver.ts","../node_modules/src/observers/sizeObserver.ts","../node_modules/src/observers/trinsicObserver.ts","../node_modules/src/setups/observersSetup/observersSetup.ts","../node_modules/src/setups/scrollbarsSetup/scrollbarsSetup.calculations.ts","../node_modules/src/setups/scrollbarsSetup/scrollbarsSetup.elements.ts","../node_modules/src/setups/scrollbarsSetup/scrollbarsSetup.events.ts","../node_modules/src/setups/structureSetup/structureSetup.elements.ts","../node_modules/src/setups/structureSetup/updateSegments/trinsicUpdateSegment.ts","../node_modules/src/setups/structureSetup/updateSegments/paddingUpdateSegment.ts","../node_modules/src/setups/structureSetup/updateSegments/overflowUpdateSegment.ts","../node_modules/src/setups/setups.ts","../node_modules/src/setups/structureSetup/structureSetup.ts","../node_modules/src/setups/scrollbarsSetup/scrollbarsSetup.ts","../node_modules/src/overlayscrollbars.ts","../node_modules/src/plugins/optionsValidationPlugin/optionsValidationPlugin.ts","../node_modules/src/useOverlayScrollbars.ts","../node_modules/src/OverlayScrollbarsComponent.tsx"],"sourcesContent":["export interface CacheOptions<Value> {\n  // initial value of _value.\n  _initialValue: Value;\n  // Custom comparison function if shallow compare isn't enough. Returns true if nothing changed.\n  _equal?: EqualCachePropFunction<Value>;\n  // If true always updates _value and _previous, otherwise they update only when they changed.\n  _alwaysUpdateValues?: boolean;\n}\n\nexport type CacheValues<T> = [value: T, changed: boolean, previous?: T];\n\nexport type EqualCachePropFunction<Value> = (currentVal: Value, newVal: Value) => boolean;\n\nexport type CacheUpdater<Value> = (current: Value, previous?: Value) => Value;\n\nexport type UpdateCacheContextual<Value> = (newValue: Value, force?: boolean) => CacheValues<Value>;\n\nexport type UpdateCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type GetCurrentCache<Value> = (force?: boolean) => CacheValues<Value>;\n\nexport type Cache<Value> = [UpdateCache<Value>, GetCurrentCache<Value>];\n\nexport type CacheContextual<Value> = [UpdateCacheContextual<Value>, GetCurrentCache<Value>];\n\ntype CreateCache = {\n  <Value>(options: CacheOptions<Value>): CacheContextual<Value>;\n  <Value>(options: CacheOptions<Value>, update: CacheUpdater<Value>): Cache<Value>;\n  <Value>(options: CacheOptions<Value>, update?: CacheUpdater<Value>):\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n\nexport const createCache: CreateCache = <Value>(\n  options: CacheOptions<Value>,\n  update?: CacheUpdater<Value>\n): CacheContextual<Value> | Cache<Value> => {\n  const { _initialValue, _equal, _alwaysUpdateValues } = options;\n  let _value: Value = _initialValue;\n  let _previous: Value | undefined;\n\n  const cacheUpdateContextual: UpdateCacheContextual<Value> = (newValue, force?) => {\n    const curr = _value;\n\n    const newVal = newValue;\n    const changed = force || (_equal ? !_equal(curr, newVal) : curr !== newVal);\n\n    if (changed || _alwaysUpdateValues) {\n      _value = newVal;\n      _previous = curr;\n    }\n\n    return [_value, changed, _previous];\n  };\n  const cacheUpdateIsolated: UpdateCache<Value> = (force?) =>\n    cacheUpdateContextual(update!(_value, _previous), force);\n\n  const getCurrentCache: GetCurrentCache<Value> = (force?: boolean) => [\n    _value,\n    !!force, // changed\n    _previous,\n  ];\n\n  return [update ? cacheUpdateIsolated : cacheUpdateContextual, getCurrentCache] as\n    | CacheContextual<Value>\n    | Cache<Value>;\n};\n","export const isBrowser = typeof window !== 'undefined';\r\n","import type { PlainObject } from '~/typings';\r\nimport { isBrowser } from '../compatibility/isBrowser';\r\n\r\nconst ElementNodeType = isBrowser && Node.ELEMENT_NODE;\r\nconst { toString, hasOwnProperty } = Object.prototype;\r\nconst typeRgx = /^\\[object (.+)\\]$/;\r\n\r\nexport const isUndefined = (obj: any): obj is undefined => obj === undefined;\r\n\r\nexport const isNull = (obj: any): obj is null => obj === null;\r\n\r\nexport const type = (obj: any): string =>\r\n  isUndefined(obj) || isNull(obj)\r\n    ? `${obj}`\r\n    : toString.call(obj).replace(typeRgx, '$1').toLowerCase();\r\n\r\nexport const isNumber = (obj: any): obj is number => typeof obj === 'number';\r\n\r\nexport const isString = (obj: any): obj is string => typeof obj === 'string';\r\n\r\nexport const isBoolean = (obj: any): obj is boolean => typeof obj === 'boolean';\r\n\r\nexport const isFunction = (obj: any): obj is (...args: any[]) => any => typeof obj === 'function';\r\n\r\nexport const isArray = <T = any>(obj: any): obj is Array<T> => Array.isArray(obj);\r\n\r\nexport const isObject = (obj: any): obj is object =>\r\n  typeof obj === 'object' && !isArray(obj) && !isNull(obj);\r\n\r\n/**\r\n * Returns true if the given object is array like, false otherwise.\r\n * @param obj The Object\r\n */\r\nexport const isArrayLike = <T extends PlainObject = any>(obj: any): obj is ArrayLike<T> => {\r\n  const length = !!obj && obj.length;\r\n  const lengthCorrectFormat = isNumber(length) && length > -1 && length % 1 == 0; // eslint-disable-line eqeqeq\r\n\r\n  return isArray(obj) || (!isFunction(obj) && lengthCorrectFormat)\r\n    ? length > 0 && isObject(obj)\r\n      ? length - 1 in obj\r\n      : true\r\n    : false;\r\n};\r\n\r\n/**\r\n * Returns true if the given object is a \"plain\" (e.g. { key: value }) object, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isPlainObject = <T = any>(obj: any): obj is PlainObject<T> => {\r\n  if (!obj || !isObject(obj) || type(obj) !== 'object') return false;\r\n\r\n  let key;\r\n  const cstr = 'constructor';\r\n  const ctor = obj[cstr];\r\n  const ctorProto = ctor && ctor.prototype;\r\n  const hasOwnConstructor = hasOwnProperty.call(obj, cstr);\r\n  const hasIsPrototypeOf = ctorProto && hasOwnProperty.call(ctorProto, 'isPrototypeOf');\r\n\r\n  if (ctor && !hasOwnConstructor && !hasIsPrototypeOf) {\r\n    return false;\r\n  }\r\n\r\n  /* eslint-disable no-restricted-syntax */\r\n  for (key in obj) {\r\n    /**/\r\n  }\r\n  /* eslint-enable */\r\n\r\n  return isUndefined(key) || hasOwnProperty.call(obj, key);\r\n};\r\n\r\n/**\r\n * Checks whether the given object is a HTMLElement.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isHTMLElement = (obj: any): obj is HTMLElement => {\r\n  const instanceofObj = HTMLElement;\r\n  return obj\r\n    ? instanceofObj\r\n      ? obj instanceof instanceofObj\r\n      : obj.nodeType === ElementNodeType\r\n    : false;\r\n};\r\n\r\n/**\r\n * Checks whether the given object is a Element.\r\n * @param obj The object which shall be checked.\r\n */\r\nexport const isElement = (obj: any): obj is Element => {\r\n  const instanceofObj = Element;\r\n  return obj\r\n    ? instanceofObj\r\n      ? obj instanceof instanceofObj\r\n      : obj.nodeType === ElementNodeType\r\n    : false;\r\n};\r\n","import type { PlainObject } from '~/typings';\r\nimport { isArray, isArrayLike, isString } from './types';\r\n\r\ntype RunEachItem = ((...args: any) => any | any[]) | null | undefined;\r\n\r\n/**\r\n * Iterates through a array or object\r\n * @param arrayLikeOrObject The array or object through which shall be iterated.\r\n * @param callback The function which is responsible for the iteration.\r\n * If the function returns true its treated like a \"continue\" statement.\r\n * If the function returns false its treated like a \"break\" statement.\r\n */\r\nexport function each<T>(\r\n  array: Array<T> | ReadonlyArray<T>,\r\n  callback: (value: T, indexOrKey: number, source: Array<T>) => boolean | unknown\r\n): Array<T> | ReadonlyArray<T>;\r\nexport function each<T>(\r\n  array: Array<T> | ReadonlyArray<T> | false | null | undefined,\r\n  callback: (value: T, indexOrKey: number, source: Array<T>) => boolean | unknown\r\n): Array<T> | ReadonlyArray<T> | false | null | undefined;\r\nexport function each<T>(\r\n  arrayLikeObject: ArrayLike<T>,\r\n  callback: (value: T, indexOrKey: number, source: ArrayLike<T>) => boolean | unknown\r\n): ArrayLike<T>;\r\nexport function each<T>(\r\n  arrayLikeObject: ArrayLike<T> | false | null | undefined,\r\n  callback: (value: T, indexOrKey: number, source: ArrayLike<T>) => boolean | unknown\r\n): ArrayLike<T> | false | null | undefined;\r\nexport function each<T extends PlainObject>(\r\n  obj: T,\r\n  callback: (value: any, indexOrKey: string, source: T) => boolean | unknown\r\n): T;\r\nexport function each<T extends PlainObject>(\r\n  obj: T | false | null | undefined,\r\n  callback: (value: any, indexOrKey: string, source: T) => boolean | unknown\r\n): T | false | null | undefined;\r\nexport function each(\r\n  source: Array<any> | ArrayLike<any> | ReadonlyArray<any> | PlainObject | false | null | undefined,\r\n  callback: (value: any, indexOrKey: any, source: any) => boolean | unknown\r\n): Array<any> | ArrayLike<any> | ReadonlyArray<any> | PlainObject | false | null | undefined {\r\n  if (isArrayLike(source)) {\r\n    for (let i = 0; i < source.length; i++) {\r\n      if (callback(source[i], i, source) === false) {\r\n        break;\r\n      }\r\n    }\r\n  } else if (source) {\r\n    // cant use support func keys here due to circular dep\r\n    each(Object.keys(source), (key) => callback(source[key], key, source));\r\n  }\r\n  return source;\r\n}\r\n\r\n/**\r\n * Returns true when the passed item is in the passed array and false otherwise.\r\n * @param arr The array.\r\n * @param item The item.\r\n * @returns Whether the item is in the array.\r\n */\r\nexport const inArray = <T = any>(arr: T[], item: T): boolean => arr.indexOf(item) >= 0;\r\n\r\n/**\r\n * Concats two arrays and returns an new array without modifying any of the passed arrays.\r\n * @param a Array A.\r\n * @param b Array B.\r\n * @returns A new array which has the entries of both arrays.\r\n */\r\nexport const concat = <T>(a: T[] | ReadonlyArray<T>, b: T[] | ReadonlyArray<T>): T[] => a.concat(b);\r\n\r\n/**\r\n * Pushesh all given items into the given array and returns it.\r\n * @param array The array the items shall be pushed into.\r\n * @param items The items which shall be pushed into the array.\r\n */\r\nexport const push = <T>(array: T[], items: T | ArrayLike<T>, arrayIsSingleItem?: boolean): T[] => {\r\n  !arrayIsSingleItem && !isString(items) && isArrayLike(items)\r\n    ? Array.prototype.push.apply(array, items as T[])\r\n    : array.push(items as T);\r\n  return array;\r\n};\r\n\r\n/**\r\n * Creates a shallow-copied Array instance from an array-like or iterable object.\r\n * @param arr The object from which the array instance shall be created.\r\n */\r\nexport const from = <T = any>(arr?: ArrayLike<T> | Set<T>) => {\r\n  // IE11 doesnt have support for Array.from\r\n  const original = Array.from;\r\n  const result: T[] = [];\r\n\r\n  if (original && arr) {\r\n    return original(arr);\r\n  }\r\n\r\n  if (arr instanceof Set) {\r\n    arr.forEach((value) => {\r\n      push(result, value);\r\n    });\r\n  } else {\r\n    each(arr, (elm) => {\r\n      push(result, elm);\r\n    });\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Creates an array if the passed value is not an array, or returns the value if it is.\r\n * @param value The value.\r\n * @returns An array which represents the passed value(s).\r\n */\r\nexport const createOrKeepArray = <T>(value: T | T[]): T[] => (isArray(value) ? value : [value]);\r\n\r\n/**\r\n * Check whether the passed array is empty.\r\n * @param array The array which shall be checked.\r\n */\r\nexport const isEmptyArray = (array: any[] | null | undefined): boolean => !!array && !array.length;\r\n\r\n/**\r\n * Deduplicates all items of the array.\r\n * @param array The array to be deduplicated.\r\n * @returns The deduplicated array.\r\n */\r\nexport const deduplicateArray = <T extends any[]>(array: T): T => from(new Set(array)) as T;\r\n\r\n/**\r\n * Calls all functions in the passed array/set of functions.\r\n * @param arr The array filled with function which shall be called.\r\n * @param args The args with which each function is called.\r\n * @param keep True when the Set / array should not be cleared afterwards, false otherwise.\r\n */\r\nexport const runEachAndClear = (arr: RunEachItem[], args?: any[], keep?: boolean): void => {\r\n  // eslint-disable-next-line prefer-spread\r\n  const runFn = (fn: RunEachItem) => fn && fn.apply(undefined, args || []);\r\n  each(arr, runFn);\r\n  !keep && ((arr as any[]).length = 0);\r\n};\r\n","import type { PlainObject } from '~/typings';\r\nimport { isArray, isFunction, isPlainObject, isNull } from './types';\r\nimport { each } from './array';\r\n\r\n/**\r\n * Determines whether the passed object has a property with the passed name.\r\n * @param obj The object.\r\n * @param prop The name of the property.\r\n */\r\nexport const hasOwnProperty = (obj: any, prop: string | number | symbol): boolean =>\r\n  Object.prototype.hasOwnProperty.call(obj, prop);\r\n\r\n/**\r\n * Returns the names of the enumerable string properties and methods of an object.\r\n * @param obj The object of which the properties shall be returned.\r\n */\r\nexport const keys = (obj: any): Array<string> => (obj ? Object.keys(obj) : []);\r\n\r\ntype AssignDeep = {\r\n  <T, U>(target: T, object1: U): T & U;\r\n  <T, U, V>(target: T, object1: U, object2: V): T & U & V;\r\n  <T, U, V, W>(target: T, object1: U, object2: V, object3: W): T & U & V & W;\r\n  <T, U, V, W, X>(target: T, object1: U, object2: V, object3: W, object4: X): T & U & V & W & X;\r\n  <T, U, V, W, X, Y>(target: T, object1: U, object2: V, object3: W, object4: X, object5: Y): T &\r\n    U &\r\n    V &\r\n    W &\r\n    X &\r\n    Y;\r\n  <T, U, V, W, X, Y, Z>(\r\n    target: T,\r\n    object1?: U,\r\n    object2?: V,\r\n    object3?: W,\r\n    object4?: X,\r\n    object5?: Y,\r\n    object6?: Z\r\n  ): T & U & V & W & X & Y & Z;\r\n};\r\n\r\n// https://github.com/jquery/jquery/blob/master/src/core.js#L116\r\nexport const assignDeep: AssignDeep = <T, U, V, W, X, Y, Z>(\r\n  target: T,\r\n  object1?: U,\r\n  object2?: V,\r\n  object3?: W,\r\n  object4?: X,\r\n  object5?: Y,\r\n  object6?: Z\r\n): T & U & V & W & X & Y & Z => {\r\n  const sources: Array<any> = [object1, object2, object3, object4, object5, object6];\r\n\r\n  // Handle case when target is a string or something (possible in deep copy)\r\n  if ((typeof target !== 'object' || isNull(target)) && !isFunction(target)) {\r\n    target = {} as T;\r\n  }\r\n\r\n  each(sources, (source) => {\r\n    // Extend the base object\r\n    each(source, (_, key) => {\r\n      const copy: any = source[key];\r\n\r\n      // Prevent Object.prototype pollution\r\n      // Prevent never-ending loop\r\n      if (target === copy) {\r\n        return true;\r\n      }\r\n\r\n      const copyIsArray = isArray(copy);\r\n\r\n      // Recurse if we're merging plain objects or arrays\r\n      if (copy && isPlainObject(copy)) {\r\n        const src = target[key as keyof T];\r\n        let clone: any = src;\r\n\r\n        // Ensure proper type for the source value\r\n        if (copyIsArray && !isArray(src)) {\r\n          clone = [];\r\n        } else if (!copyIsArray && !isPlainObject(src)) {\r\n          clone = {};\r\n        }\r\n\r\n        // Never move original objects, clone them\r\n        target[key as keyof T] = assignDeep(clone, copy) as any;\r\n      } else {\r\n        target[key as keyof T] = copyIsArray ? copy.slice() : copy;\r\n      }\r\n    });\r\n  });\r\n\r\n  // Return the modified object\r\n  return target as any;\r\n};\r\n\r\nexport const removeUndefinedProperties = <T extends PlainObject>(target: T, deep?: boolean): T =>\r\n  each(assignDeep({}, target), (value, key, copy) => {\r\n    if (value === undefined) {\r\n      delete copy[key];\r\n    } else if (deep && value && isPlainObject(value)) {\r\n      copy[key as keyof typeof copy] = removeUndefinedProperties(value, deep) as any;\r\n    }\r\n  });\r\n\r\n/**\r\n * Returns true if the given object is empty, false otherwise.\r\n * @param obj The Object.\r\n */\r\nexport const isEmptyObject = (obj: any): boolean => {\r\n  // eslint-disable-next-line no-restricted-syntax, no-unreachable-loop, guard-for-in\r\n  for (const name in obj) return false;\r\n  return true;\r\n  /* eslint-enable */\r\n};\r\n","import { from } from '../utils/array';\r\nimport { isUndefined } from '../utils/types';\r\n\r\ntype Attr = {\r\n  (elm: HTMLElement | false | null | undefined, attrName: string): string | null;\r\n  (elm: HTMLElement | false | null | undefined, attrName: string, value: string): void;\r\n  (elm: HTMLElement | false | null | undefined, attrName: string, value?: string):\r\n    | string\r\n    | null\r\n    | void;\r\n};\r\n\r\n/**\r\n * Gets or sets a attribute with the given attribute of the given element depending whether the value attribute is given.\r\n * Returns null if the element has no attribute with the given name.\r\n * @param elm The element of which the attribute shall be get or set.\r\n * @param attrName The attribute name which shall be get or set.\r\n * @param value The value of the attribute which shall be set.\r\n */\r\nexport const attr = ((\r\n  elm: HTMLElement | false | null | undefined,\r\n  attrName: string,\r\n  value?: string\r\n): string | null | void => {\r\n  if (isUndefined(value)) {\r\n    return elm ? elm.getAttribute(attrName) : null;\r\n  }\r\n  elm && elm.setAttribute(attrName, value);\r\n}) as Attr;\r\n\r\nconst getValueSet = (elm: HTMLElement | false | null | undefined, attrName: string) =>\r\n  new Set((attr(elm, attrName) || '').split(' '));\r\n\r\n/**\r\n * Removes the given attribute from the given element.\r\n * @param elm The element of which the attribute shall be removed.\r\n * @param attrName The attribute name.\r\n */\r\nexport const removeAttr = (elm: Element | false | null | undefined, attrName: string): void => {\r\n  elm && elm.removeAttribute(attrName);\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and adds or removes the given value from it.\r\n * @param elm The element.\r\n * @param attrName The attributeName to which the value shall be added or removed.\r\n * @param value The value which shall be added or removed.\r\n * @param add True if the value shall be added, false otherwise.\r\n */\r\nexport const attrClass = (\r\n  elm: HTMLElement | false | null | undefined,\r\n  attrName: string,\r\n  value: string,\r\n  add?: boolean\r\n) => {\r\n  if (value) {\r\n    const currValuesSet = getValueSet(elm, attrName);\r\n    currValuesSet[add ? 'add' : 'delete'](value);\r\n    const newTokens = from(currValuesSet).join(' ').trim();\r\n    attr(elm, attrName, newTokens);\r\n  }\r\n};\r\n\r\n/**\r\n * Treats the given attribute like the \"class\" attribute and checks if the given value is in it.\r\n * @param elm The element.\r\n * @param attrName The attributeName from which the content shall be checked.\r\n * @param value The value.\r\n * @returns True if the given attribute has the value in it, false otherwise.\r\n */\r\nexport const hasAttrClass = (\r\n  elm: HTMLElement | false | null | undefined,\r\n  attrName: string,\r\n  value: string\r\n) => getValueSet(elm, attrName).has(value);\r\n","import { isBrowser } from '../compatibility/isBrowser';\r\nimport { isElement } from '../utils/types';\r\nimport { push, from } from '../utils/array';\r\n\r\ntype InputElementType = Node | Element | Node | false | null | undefined;\r\ntype OutputElementType = Node | Element | false | null | undefined;\r\n\r\nconst getElmPrototype = (isBrowser && Element.prototype) as Element; // only Element.prototype wont work on server\r\n\r\n/**\r\n * Find all elements with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nconst find = (selector: string, elm?: InputElementType): Element[] => {\r\n  const arr: Array<Element> = [];\r\n  const rootElm = elm ? isElement(elm) && elm : document;\r\n\r\n  return rootElm ? push(arr, rootElm.querySelectorAll(selector)) : arr;\r\n};\r\n\r\n/**\r\n * Find the first element with the passed selector, outgoing (and including) the passed element or the document if no element was provided.\r\n * @param selector The selector which has to be searched by.\r\n * @param elm The element from which the search shall be outgoing.\r\n */\r\nconst findFirst = (selector: string, elm?: InputElementType): OutputElementType => {\r\n  const rootElm = elm ? isElement(elm) && elm : document;\r\n\r\n  return rootElm ? rootElm.querySelector(selector) : null;\r\n};\r\n\r\n/**\r\n * Determines whether the passed element is matching with the passed selector.\r\n * @param elm The element which has to be compared with the passed selector.\r\n * @param selector The selector which has to be compared with the passed element. Additional selectors: ':visible' and ':hidden'.\r\n */\r\nconst is = (elm: InputElementType, selector: string): boolean => {\r\n  if (isElement(elm)) {\r\n    /* istanbul ignore next */\r\n    // eslint-disable-next-line\r\n    const fn: (...args: any) => boolean =\r\n      // @ts-ignore\r\n      getElmPrototype.matches || getElmPrototype.msMatchesSelector;\r\n    return fn.call(elm, selector);\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Returns the children (no text-nodes or comments) of the passed element which are matching the passed selector. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the children shall be returned.\r\n * @param selector The selector which must match with the children elements.\r\n */\r\nconst children = (elm: InputElementType, selector?: string): ReadonlyArray<Element> => {\r\n  const childs: Array<Element> = [];\r\n\r\n  return isElement(elm)\r\n    ? push(\r\n        childs,\r\n        from(elm.children).filter((child) => (selector ? is(child, selector) : child))\r\n      )\r\n    : childs;\r\n};\r\n\r\n/**\r\n * Returns the childNodes (incl. text-nodes or comments etc.) of the passed element. An empty array is returned if the passed element is null.\r\n * @param elm The element of which the childNodes shall be returned.\r\n */\r\nconst contents = (elm: InputElementType): ReadonlyArray<ChildNode> =>\r\n  elm ? from(elm.childNodes) : [];\r\n\r\n/**\r\n * Returns the parent element of the passed element, or null if the passed element is null.\r\n * @param elm The element of which the parent element shall be returned.\r\n */\r\nconst parent = (elm: InputElementType): OutputElementType => elm && elm.parentElement;\r\n\r\nconst closest = (elm: InputElementType, selector: string): OutputElementType => {\r\n  if (isElement(elm)) {\r\n    // IE11 doesnt support closest\r\n    const closestFn = getElmPrototype.closest;\r\n    if (closestFn) {\r\n      return closestFn.call(elm, selector);\r\n    }\r\n\r\n    do {\r\n      if (is(elm, selector)) {\r\n        return elm as Element;\r\n      }\r\n      elm = parent(elm);\r\n    } while (elm);\r\n  }\r\n};\r\n\r\n/**\r\n * Determines whether the given element lies between two selectors in the DOM.\r\n * @param elm The element.\r\n * @param highBoundarySelector The high boundary selector.\r\n * @param deepBoundarySelector The deep boundary selector.\r\n */\r\nconst liesBetween = (\r\n  elm: InputElementType,\r\n  highBoundarySelector: string,\r\n  deepBoundarySelector: string\r\n): boolean => {\r\n  const closestHighBoundaryElm = closest(elm, highBoundarySelector);\r\n  const closestDeepBoundaryElm = elm && findFirst(deepBoundarySelector, closestHighBoundaryElm);\r\n  const deepBoundaryIsValid =\r\n    closest(closestDeepBoundaryElm, highBoundarySelector) === closestHighBoundaryElm;\r\n\r\n  return closestHighBoundaryElm && closestDeepBoundaryElm\r\n    ? closestHighBoundaryElm === elm ||\r\n        closestDeepBoundaryElm === elm ||\r\n        (deepBoundaryIsValid &&\r\n          closest(closest(elm, deepBoundarySelector), highBoundarySelector) !==\r\n            closestHighBoundaryElm)\r\n    : false;\r\n};\r\n\r\nexport { find, findFirst, is, children, contents, parent, liesBetween, closest };\r\n","export const noop = () => {}; // eslint-disable-line\r\n","import { isArrayLike } from '../utils/types';\r\nimport { each, from } from '../utils/array';\r\nimport { noop } from '../utils/noop';\r\nimport { parent } from './traversal';\r\n\r\ntype NodeCollection = ArrayLike<Node> | Node | false | null | undefined;\r\n\r\n/**\r\n * Removes the given Nodes from their parent.\r\n * @param nodes The Nodes which shall be removed.\r\n */\r\nexport const removeElements = (nodes: NodeCollection): void => {\r\n  if (isArrayLike(nodes)) {\r\n    each(from(nodes), (e) => removeElements(e));\r\n  } else if (nodes) {\r\n    // element.remove() not supported in IE11\r\n    const parentElm = parent(nodes);\r\n    parentElm && parentElm.removeChild(nodes);\r\n  }\r\n};\r\n\r\n/**\r\n * Inserts Nodes before the given preferredAnchor element.\r\n * @param parentElm The parent of the preferredAnchor element or the element which shall be the parent of the inserted Nodes.\r\n * @param preferredAnchor The element before which the Nodes shall be inserted or null if the elements shall be appended at the end.\r\n * @param insertedElms The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nconst before = (\r\n  parentElm: Node | false | null | undefined,\r\n  preferredAnchor: Node | false | null | undefined,\r\n  insertedElms: NodeCollection\r\n): (() => void) => {\r\n  if (insertedElms && parentElm) {\r\n    let anchor: Node | false | null | undefined = preferredAnchor;\r\n    let fragment: DocumentFragment | Node | null | undefined;\r\n\r\n    if (isArrayLike(insertedElms)) {\r\n      fragment = document.createDocumentFragment();\r\n\r\n      // append all insertedElms to the fragment and if one of these is the anchor, change the anchor\r\n      each(insertedElms, (insertedElm) => {\r\n        if (insertedElm === anchor) {\r\n          anchor = insertedElm.previousSibling;\r\n        }\r\n        fragment!.appendChild(insertedElm);\r\n      });\r\n    } else {\r\n      fragment = insertedElms;\r\n    }\r\n\r\n    // if the preferred anchor isn't null set it to a valid anchor\r\n    if (preferredAnchor) {\r\n      if (!anchor) {\r\n        anchor = parentElm.firstChild;\r\n      } else if (anchor !== preferredAnchor) {\r\n        anchor = anchor.nextSibling;\r\n      }\r\n    }\r\n\r\n    parentElm.insertBefore(fragment, anchor || null);\r\n    return () => removeElements(insertedElms);\r\n  }\r\n  return noop;\r\n};\r\n\r\n/**\r\n * Appends the given children at the end of the given Node.\r\n * @param node The Node to which the children shall be appended.\r\n * @param children The Nodes which shall be appended.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const appendChildren = (node: Node | false | null | undefined, children: NodeCollection) =>\r\n  before(node, null, children);\r\n\r\n/**\r\n * Prepends the given children at the start of the given Node.\r\n * @param node The Node to which the children shall be prepended.\r\n * @param children The Nodes which shall be prepended.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const prependChildren = (node: Node | false | null | undefined, children: NodeCollection) =>\r\n  before(node, node && node.firstChild, children);\r\n\r\n/**\r\n * Inserts the given Nodes before the given Node.\r\n * @param node The Node before which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const insertBefore = (\r\n  node: Node | false | null | undefined,\r\n  insertedNodes: NodeCollection\r\n) => before(parent(node), node, insertedNodes);\r\n\r\n/**\r\n * Inserts the given Nodes after the given Node.\r\n * @param node The Node after which the given Nodes shall be inserted.\r\n * @param insertedNodes The Nodes which shall be inserted.\r\n * @returns A function which removes the inserted nodes.\r\n */\r\nexport const insertAfter = (node: Node | false | null | undefined, insertedNodes: NodeCollection) =>\r\n  before(parent(node), node && node.nextSibling, insertedNodes);\r\n","import { each } from '../utils/array';\r\nimport { attr } from './attribute';\r\nimport { contents } from './traversal';\r\nimport { removeElements } from './manipulation';\r\n\r\n/**\r\n * Creates a div DOM node.\r\n */\r\nexport const createDiv = (classNames?: string): HTMLDivElement => {\r\n  const div = document.createElement('div');\r\n  attr(div, 'class', classNames);\r\n  return div;\r\n};\r\n\r\n/**\r\n * Creates DOM nodes modeled after the passed html string and returns the root dom nodes as a array.\r\n * @param html The html string after which the DOM nodes shall be created.\r\n */\r\nexport const createDOM = (html: string): ReadonlyArray<Node> => {\r\n  const createdDiv = createDiv();\r\n  createdDiv.innerHTML = html.trim();\r\n\r\n  return each(contents(createdDiv), (elm) => removeElements(elm));\r\n};\r\n","import { isBrowser } from '../compatibility/isBrowser';\r\n\r\nexport const wnd = (isBrowser ? window : {}) as typeof window;\r\nexport const mathMax = Math.max;\r\nexport const mathMin = Math.min;\r\nexport const mathRound = Math.round;\r\nexport const mathFloor = Math.floor;\r\nexport const mathCeil = Math.ceil;\r\nexport const mathAbs = Math.abs;\r\nexport const cAF = wnd.cancelAnimationFrame;\r\nexport const rAF = wnd.requestAnimationFrame;\r\nexport const setT = wnd.setTimeout;\r\nexport const clearT = wnd.clearTimeout;\r\n","import { concat, each } from '../utils/array';\r\nimport { hasOwnProperty } from '../utils/object';\r\nimport { createDiv } from '../dom/create';\r\nimport { wnd } from '../utils/alias';\r\n\r\nconst firstLetterToUpper = (str: string): string => str.charAt(0).toUpperCase() + str.slice(1);\r\nconst getDummyStyle = (): CSSStyleDeclaration => createDiv().style;\r\n\r\nexport type JsApiName = Extract<keyof typeof window, string>;\r\n\r\n// https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix\r\n\r\nexport const cssPrefixes: ReadonlyArray<string> = ['-webkit-', '-moz-', '-o-', '-ms-'];\r\nexport const jsPrefixes: ReadonlyArray<string> = [\r\n  'WebKit',\r\n  'Moz',\r\n  'O',\r\n  'MS',\r\n  'webkit',\r\n  'moz',\r\n  'o',\r\n  'ms',\r\n];\r\n\r\nexport const jsCache: { [key: string]: any } = {};\r\nexport const cssCache: { [key: string]: any } = {};\r\n\r\n/**\r\n * Gets the name of the given CSS property with vendor prefix if it isn't supported without it, or and empty string if unsupported.\r\n * @param name The name of the CSS property which shall be get.\r\n */\r\nexport const cssProperty = (name: string): string | undefined => {\r\n  let result: string | undefined = cssCache[name];\r\n\r\n  if (hasOwnProperty(cssCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  const uppercasedName: string = firstLetterToUpper(name);\r\n  const elmStyle: CSSStyleDeclaration = getDummyStyle();\r\n\r\n  each(cssPrefixes, (prefix: string) => {\r\n    const prefixWithoutDashes: string = prefix.replace(/-/g, '');\r\n    const resultPossibilities: Array<string> = [\r\n      name, // transition\r\n      prefix + name, // -webkit-transition\r\n      prefixWithoutDashes + uppercasedName, // webkitTransition\r\n      firstLetterToUpper(prefixWithoutDashes) + uppercasedName, // WebkitTransition\r\n    ];\r\n\r\n    // eslint-disable-next-line no-return-assign\r\n    return !(result = resultPossibilities.find(\r\n      (resultPossibility: string) =>\r\n        elmStyle[resultPossibility as keyof CSSStyleDeclaration] !== undefined\r\n    ));\r\n  });\r\n\r\n  // eslint-disable-next-line no-return-assign\r\n  return (cssCache[name] = result || '');\r\n};\r\n\r\n/**\r\n * Get the name of the given CSS property value(s), with vendor prefix if it isn't supported without it, or an empty string if no value is supported.\r\n * @param property The CSS property to which the CSS property value(s) belong.\r\n * @param values The value(s) separated by spaces which shall be get.\r\n * @param suffix A suffix which is added to each value in case the value is a function or something else more advanced.\r\n */\r\nexport const cssPropertyValue = (\r\n  property: string,\r\n  values: string,\r\n  suffix?: string\r\n): string | undefined => {\r\n  const name = `${property} ${values}`;\r\n  let result: string | undefined = cssCache[name];\r\n\r\n  if (hasOwnProperty(cssCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  const dummyStyle: CSSStyleDeclaration = getDummyStyle();\r\n  const possbleValues: Array<string> = values.split(' ');\r\n  const preparedSuffix: string = suffix || '';\r\n  const cssPrefixesWithFirstEmpty = concat([''], cssPrefixes);\r\n\r\n  each(possbleValues, (possibleValue: string) => {\r\n    each(cssPrefixesWithFirstEmpty, (prefix: string) => {\r\n      const prop = prefix + possibleValue;\r\n      dummyStyle.cssText = `${property}:${prop}${preparedSuffix}`;\r\n      if (dummyStyle.length) {\r\n        result = prop;\r\n        return false;\r\n      }\r\n    });\r\n    return !result;\r\n  });\r\n\r\n  // eslint-disable-next-line no-return-assign\r\n  return (cssCache[name] = result || '');\r\n};\r\n\r\n/**\r\n * Get the requested JS function, object or constructor with vendor prefix if it isn't supported without or undefined if unsupported.\r\n * @param name The name of the JS function, object or constructor.\r\n */\r\nexport const jsAPI = <T = any>(name: JsApiName): T | undefined => {\r\n  let result: any = jsCache[name] || wnd[name];\r\n\r\n  if (hasOwnProperty(jsCache, name)) {\r\n    return result;\r\n  }\r\n\r\n  each(jsPrefixes, (prefix: string) => {\r\n    result = result || wnd[(prefix + firstLetterToUpper(name)) as JsApiName];\r\n    return !result;\r\n  });\r\n\r\n  jsCache[name] = result;\r\n  return result;\r\n};\r\n","import { jsAPI } from './vendors';\r\n\r\nexport const MutationObserverConstructor = jsAPI<typeof MutationObserver>('MutationObserver');\r\nexport const IntersectionObserverConstructor =\r\n  jsAPI<typeof IntersectionObserver>('IntersectionObserver');\r\nexport const ResizeObserverConstructor = jsAPI<typeof ResizeObserver>('ResizeObserver');\r\nexport const scrollT = jsAPI<new (constructor: unknown) => AnimationTimeline>(\r\n  // @ts-ignore\r\n  'ScrollTimeline'\r\n);\r\n","import { isNumber, isFunction } from './types';\r\nimport { from } from './array';\r\nimport { rAF, cAF, setT, clearT } from './alias';\r\nimport { noop } from './noop';\r\n\r\ntype DebounceTiming = number | false | null | undefined;\r\n\r\nexport interface DebounceOptions<FunctionToDebounce extends (...args: any) => any> {\r\n  /**\r\n   * The timeout for debouncing. If null, no debounce is applied.\r\n   */\r\n  _timeout?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * A maximum amount of ms. before the function will be called even with debounce.\r\n   */\r\n  _maxDelay?: DebounceTiming | (() => DebounceTiming);\r\n  /**\r\n   * Function which merges parameters for each canceled debounce.\r\n   * If parameters can't be merged the function will return null, otherwise it returns the merged parameters.\r\n   */\r\n  _mergeParams?: (\r\n    prev: Parameters<FunctionToDebounce>,\r\n    curr: Parameters<FunctionToDebounce>\r\n  ) => Parameters<FunctionToDebounce> | false | null | undefined;\r\n}\r\n\r\nexport interface Debounced<FunctionToDebounce extends (...args: any) => any> {\r\n  (...args: Parameters<FunctionToDebounce>): ReturnType<FunctionToDebounce>;\r\n  _flush(): void;\r\n}\r\n\r\nexport const bind = <A extends any[], B extends any[], R>(\r\n  fn: (...args: [...A, ...B]) => R,\r\n  ...args: A\r\n): ((...args: B) => R) => fn.bind(0, ...args);\r\n\r\n/**\r\n * Creates a timeout and cleartimeout tuple. The timeout function always clears the previously created timeout before it runs.\r\n * @param timeout The timeout in ms. If no timeout (or 0) is passed requestAnimationFrame is used instead of setTimeout.\r\n * @returns A tuple with the timeout function as the first value and the clearTimeout function as the second value.\r\n */\r\nexport const selfClearTimeout = (timeout?: number | (() => number)) => {\r\n  let id: number;\r\n  const setTFn = timeout ? setT : rAF!;\r\n  const clearTFn = timeout ? clearT : cAF!;\r\n  return [\r\n    (callback: () => any) => {\r\n      clearTFn(id);\r\n      // @ts-ignore\r\n      id = setTFn(callback, isFunction(timeout) ? timeout() : timeout);\r\n    },\r\n    () => clearTFn(id),\r\n  ] as [timeout: (callback: () => any) => void, clear: () => void];\r\n};\r\n\r\n/**\r\n * Debounces the given function either with a timeout or a animation frame.\r\n * @param functionToDebounce The function which shall be debounced.\r\n * @param options Options for debouncing.\r\n */\r\nexport const debounce = <FunctionToDebounce extends (...args: any) => any>(\r\n  functionToDebounce: FunctionToDebounce,\r\n  options?: DebounceOptions<FunctionToDebounce>\r\n): Debounced<FunctionToDebounce> => {\r\n  let maxTimeoutId: number | undefined;\r\n  let prevArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let latestArguments: Parameters<FunctionToDebounce> | null | undefined;\r\n  let clear = noop;\r\n  const { _timeout, _maxDelay, _mergeParams } = options || {};\r\n\r\n  const invokeFunctionToDebounce = function (args: IArguments) {\r\n    clear();\r\n    clearT(maxTimeoutId);\r\n    maxTimeoutId = prevArguments = undefined;\r\n    clear = noop;\r\n    // eslint-disable-next-line\r\n    // @ts-ignore\r\n    functionToDebounce.apply(this, args);\r\n  };\r\n\r\n  const mergeParms = (\r\n    curr: Parameters<FunctionToDebounce>\r\n  ): Parameters<FunctionToDebounce> | false | null | undefined =>\r\n    _mergeParams && prevArguments ? _mergeParams(prevArguments, curr) : curr;\r\n\r\n  const flush = () => {\r\n    /* istanbul ignore next */\r\n    if (clear !== noop) {\r\n      invokeFunctionToDebounce(mergeParms(latestArguments!) || latestArguments!);\r\n    }\r\n  };\r\n\r\n  const debouncedFn = function () {\r\n    // eslint-disable-next-line prefer-rest-params\r\n    const args: Parameters<FunctionToDebounce> = from(arguments) as Parameters<FunctionToDebounce>;\r\n    const finalTimeout = isFunction(_timeout) ? _timeout() : _timeout;\r\n    const hasTimeout = isNumber(finalTimeout) && finalTimeout >= 0;\r\n\r\n    if (hasTimeout) {\r\n      const finalMaxWait = isFunction(_maxDelay) ? _maxDelay() : _maxDelay;\r\n      const hasMaxWait = isNumber(finalMaxWait) && finalMaxWait >= 0;\r\n      const setTimeoutFn = finalTimeout > 0 ? setT : rAF!;\r\n      const clearTimeoutFn = finalTimeout > 0 ? clearT : cAF!;\r\n      const mergeParamsResult = mergeParms(args);\r\n      const invokedArgs = mergeParamsResult || args;\r\n      const boundInvoke = invokeFunctionToDebounce.bind(0, invokedArgs);\r\n\r\n      // if (!mergeParamsResult) {\r\n      //   invokeFunctionToDebounce(prevArguments || args);\r\n      // }\r\n\r\n      clear();\r\n      // @ts-ignore\r\n      const timeoutId = setTimeoutFn(boundInvoke, finalTimeout);\r\n      clear = () => clearTimeoutFn(timeoutId);\r\n\r\n      if (hasMaxWait && !maxTimeoutId) {\r\n        maxTimeoutId = setT(flush, finalMaxWait as number);\r\n      }\r\n\r\n      prevArguments = latestArguments = invokedArgs;\r\n    } else {\r\n      invokeFunctionToDebounce(args);\r\n    }\r\n  };\r\n  debouncedFn._flush = flush;\r\n\r\n  return debouncedFn as Debounced<FunctionToDebounce>;\r\n};\r\n","import { isString } from '../utils/types';\r\nimport { each, from } from '../utils/array';\r\nimport { bind } from '../utils/function';\r\n\r\ntype ClassContainingElement = Node | Element | false | null | undefined;\r\ntype ClassName = string | false | null | undefined;\r\n\r\nconst rnothtmlwhite = /[^\\x20\\t\\r\\n\\f]+/g;\r\nconst classListAction = (\r\n  elm: ClassContainingElement,\r\n  className: ClassName,\r\n  action: (elmClassList: DOMTokenList, clazz: string) => boolean | void\r\n): boolean => {\r\n  const classList = elm && (elm as Element).classList;\r\n  let clazz: string;\r\n  let i = 0;\r\n  let result = false;\r\n\r\n  if (classList && className && isString(className)) {\r\n    const classes: Array<string> = className.match(rnothtmlwhite) || [];\r\n    result = classes.length > 0;\r\n    while ((clazz = classes[i++])) {\r\n      result = !!action(classList, clazz) && result;\r\n    }\r\n  }\r\n  return result;\r\n};\r\n\r\n/**\r\n * Check whether the given element has the given class name(s).\r\n * @param elm The element.\r\n * @param className The class name(s).\r\n */\r\nexport const hasClass = (elm: ClassContainingElement, className: ClassName): boolean =>\r\n  classListAction(elm, className, (classList, clazz) => classList.contains(clazz));\r\n\r\n/**\r\n * Removes the given class name(s) from the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be removed. (separated by spaces)\r\n */\r\nexport const removeClass = (elm: ClassContainingElement, className: ClassName): void => {\r\n  classListAction(elm, className, (classList, clazz) => classList.remove(clazz));\r\n};\r\n\r\n/**\r\n * Adds the given class name(s) to the given element.\r\n * @param elm The element.\r\n * @param className The class name(s) which shall be added. (separated by spaces)\r\n * @returns A function which removes the added class name(s).\r\n */\r\nexport const addClass = (elm: ClassContainingElement, className: ClassName): (() => void) => {\r\n  classListAction(elm, className, (classList, clazz) => classList.add(clazz));\r\n  return bind(removeClass, elm, className);\r\n};\r\n\r\n/**\r\n * Takes two className strings, compares them and returns the difference as array.\r\n * @param classNameA ClassName A.\r\n * @param classNameB ClassName B.\r\n */\r\nexport const diffClass = (classNameA: ClassName, classNameB: ClassName) => {\r\n  const set = new Set<string>(classNameA ? classNameA.split(' ') : []);\r\n\r\n  each(classNameB ? classNameB.split(' ') : [], (className) => {\r\n    set.has(className) ? set.delete(className) : set.add(className);\r\n  });\r\n\r\n  return from(set);\r\n};\r\n","import type { PlainObject, StyleObject, StyleObjectKey, StyleObjectValue } from '~/typings';\r\nimport type { XY } from './offset';\r\nimport { wnd } from '../utils/alias';\r\nimport { each } from '../utils/array';\r\nimport { isString, isNumber, isObject } from '../utils/types';\r\n\r\nexport interface TRBL {\r\n  t: number;\r\n  r: number;\r\n  b: number;\r\n  l: number;\r\n}\r\n\r\nconst customCssPropRegex = /^--/;\r\n\r\nconst getCSSVal = (computedStyle: CSSStyleDeclaration, prop: StyleObjectKey): string =>\r\n  computedStyle.getPropertyValue(prop) || computedStyle[prop as any] || '';\r\n\r\nconst validFiniteNumber = (number: number) => {\r\n  const notNaN = number || 0;\r\n  return isFinite(notNaN) ? notNaN : 0;\r\n};\r\n\r\nconst parseToZeroOrNumber = (value?: string): number => validFiniteNumber(parseFloat(value || ''));\r\n\r\nexport const ratioToCssPercent = (ratio: number) =>\r\n  `${(validFiniteNumber(ratio) * 100).toFixed(3)}%`;\r\n\r\nexport const numberToCssPx = (number: number) => `${validFiniteNumber(number)}px`;\r\n\r\nexport function setStyles(elm: HTMLElement | false | null | undefined, styles: StyleObject): void {\r\n  elm &&\r\n    each(styles, (rawValue: StyleObjectValue, name) => {\r\n      try {\r\n        const elmStyle = elm.style;\r\n        const value = isNumber(rawValue) ? numberToCssPx(rawValue) : rawValue + '';\r\n\r\n        if (customCssPropRegex.test(name)) {\r\n          elmStyle.setProperty(name, value);\r\n        } else {\r\n          elmStyle[name as any] = value;\r\n        }\r\n      } catch {}\r\n    });\r\n}\r\n\r\nexport function getStyles(\r\n  elm: HTMLElement | false | null | undefined,\r\n  styles: Array<StyleObjectKey>,\r\n  pseudoElm?: string | null | undefined\r\n): Partial<Record<StyleObjectKey, string>>;\r\nexport function getStyles(\r\n  elm: HTMLElement | false | null | undefined,\r\n  styles: StyleObjectKey,\r\n  pseudoElm?: string | null | undefined\r\n): string;\r\nexport function getStyles(\r\n  elm: HTMLElement | false | null | undefined,\r\n  styles: Array<StyleObjectKey> | StyleObjectKey,\r\n  pseudoElm?: string | null | undefined\r\n): Partial<Record<StyleObjectKey, string>> | string {\r\n  const getSingleStyle = isString(styles);\r\n  let getStylesResult: string | PlainObject = getSingleStyle ? '' : {};\r\n\r\n  if (elm) {\r\n    const computedStyle = wnd.getComputedStyle(elm, pseudoElm) || elm.style;\r\n    getStylesResult = getSingleStyle\r\n      ? getCSSVal(computedStyle, styles)\r\n      : styles.reduce((result, key) => {\r\n          result[key] = getCSSVal(computedStyle, key);\r\n          return result;\r\n        }, getStylesResult as PlainObject);\r\n  }\r\n  return getStylesResult;\r\n}\r\n\r\nexport const getDirectionIsRTL = (elm: HTMLElement | false | null | undefined): boolean =>\r\n  getStyles(elm, 'direction') === 'rtl';\r\n\r\n/**\r\n * Returns the top right bottom left values of the passed css property.\r\n * @param elm The element of which the values shall be returned.\r\n * @param propertyPrefix The css property prefix. (e.g. \"border\")\r\n * @param propertySuffix The css property suffix. (e.g. \"width\")\r\n */\r\nexport const topRightBottomLeft = (\r\n  elm?: HTMLElement | false | null | undefined,\r\n  propertyPrefix?: string,\r\n  propertySuffix?: string\r\n): TRBL => {\r\n  const finalPrefix = propertyPrefix ? `${propertyPrefix}-` : '';\r\n  const finalSuffix = propertySuffix ? `-${propertySuffix}` : '';\r\n  const top = `${finalPrefix}top${finalSuffix}` as StyleObjectKey;\r\n  const right = `${finalPrefix}right${finalSuffix}` as StyleObjectKey;\r\n  const bottom = `${finalPrefix}bottom${finalSuffix}` as StyleObjectKey;\r\n  const left = `${finalPrefix}left${finalSuffix}` as StyleObjectKey;\r\n  const result = getStyles(elm, [top, right, bottom, left]);\r\n  return {\r\n    t: parseToZeroOrNumber(result[top]),\r\n    r: parseToZeroOrNumber(result[right]),\r\n    b: parseToZeroOrNumber(result[bottom]),\r\n    l: parseToZeroOrNumber(result[left]),\r\n  };\r\n};\r\n\r\nexport const getTrasformTranslateValue = (\r\n  value: string | number | XY<string | number>,\r\n  isHorizontal?: boolean\r\n) =>\r\n  `translate${\r\n    isObject(value) ? `(${value.x},${value.y})` : `${isHorizontal ? 'X' : 'Y'}(${value})`\r\n  }`;\r\n","export const strPaddingTop = 'paddingTop';\r\nexport const strPaddingRight = 'paddingRight';\r\nexport const strPaddingLeft = 'paddingLeft';\r\nexport const strPaddingBottom = 'paddingBottom';\r\nexport const strMarginLeft = 'marginLeft';\r\nexport const strMarginRight = 'marginRight';\r\nexport const strMarginBottom = 'marginBottom';\r\nexport const strOverflowX = 'overflowX';\r\nexport const strOverflowY = 'overflowY';\r\nexport const strWidth = 'width';\r\nexport const strHeight = 'height';\r\nexport const strHidden = 'hidden';\r\n","import { getStyles } from './style';\r\nimport { mathRound, wnd } from '../utils/alias';\r\nimport { bind } from '../utils/function';\r\nimport { strHeight, strWidth } from '../utils/strings';\r\n\r\nexport interface WH<T = number> {\r\n  w: T;\r\n  h: T;\r\n}\r\n\r\nconst elementHasDimensions = (elm: HTMLElement): boolean =>\r\n  !!(elm.offsetWidth || elm.offsetHeight || elm.getClientRects().length);\r\nconst zeroObj: WH = {\r\n  w: 0,\r\n  h: 0,\r\n};\r\n\r\nconst getElmWidthHeightProperty = <E extends HTMLElement | Window>(\r\n  property: E extends HTMLElement ? 'client' | 'offset' | 'scroll' : 'inner',\r\n  elm: E | false | null | undefined\r\n): Readonly<WH> =>\r\n  elm\r\n    ? {\r\n        w: (elm as any)[`${property}Width`],\r\n        h: (elm as any)[`${property}Height`],\r\n      }\r\n    : zeroObj;\r\n\r\n/**\r\n * Returns the window inner- width and height.\r\n */\r\nexport const windowSize = (customWnd?: Window): Readonly<WH> =>\r\n  getElmWidthHeightProperty('inner', customWnd || wnd);\r\n\r\n/**\r\n * Returns the scroll- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the scroll- width and height shall be returned.\r\n */\r\nexport const offsetSize = bind(getElmWidthHeightProperty<HTMLElement>, 'offset') satisfies (\r\n  elm: HTMLElement | false | null | undefined\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const clientSize = bind(getElmWidthHeightProperty<HTMLElement>, 'client') satisfies (\r\n  elm: HTMLElement | false | null | undefined\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the client- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the client- width and height shall be returned.\r\n */\r\nexport const scrollSize = bind(getElmWidthHeightProperty<HTMLElement>, 'scroll') satisfies (\r\n  elm: HTMLElement | false | null | undefined\r\n) => Readonly<WH>;\r\n\r\n/**\r\n * Returns the fractional- width and height of the passed element. If the element is null the width and height values are 0.\r\n * @param elm The element of which the fractional- width and height shall be returned.\r\n */\r\nexport const fractionalSize = (elm: HTMLElement | false | null | undefined): Readonly<WH> => {\r\n  const cssWidth = parseFloat(getStyles(elm, strWidth)) || 0;\r\n  const cssHeight = parseFloat(getStyles(elm, strHeight)) || 0;\r\n  return {\r\n    w: cssWidth - mathRound(cssWidth),\r\n    h: cssHeight - mathRound(cssHeight),\r\n  };\r\n};\r\n\r\n/**\r\n * Returns the BoundingClientRect of the passed element.\r\n * @param elm The element of which the BoundingClientRect shall be returned.\r\n */\r\nexport const getBoundingClientRect = (elm: HTMLElement): DOMRect => elm.getBoundingClientRect();\r\n\r\n/**\r\n * Determines whether the passed element has any dimensions.\r\n * @param elm The element.\r\n */\r\nexport const hasDimensions = (elm: HTMLElement | false | null | undefined): boolean =>\r\n  !!elm && elementHasDimensions(elm);\r\n\r\n/**\r\n * Determines whether the passed DOM Rect has any dimensions.\r\n */\r\nexport const domRectHasDimensions = (rect?: DOMRectReadOnly | false | null) =>\r\n  !!(rect && (rect[strHeight] || rect[strWidth]));\r\n\r\n/**\r\n * Determines whether current DOM Rect has appeared according the the previous dom rect..\r\n * @param currContentRect The current DOM Rect.\r\n * @param prevContentRect The previous DOM Rect.\r\n * @returns Whether the dom rect appeared.\r\n */\r\nexport const domRectAppeared = (\r\n  currContentRect: DOMRectReadOnly | false | null | undefined,\r\n  prevContentRect: DOMRectReadOnly | false | null | undefined\r\n) => {\r\n  const rectHasDimensions = domRectHasDimensions(currContentRect);\r\n  const rectHadDimensions = domRectHasDimensions(prevContentRect);\r\n  return !rectHadDimensions && rectHasDimensions;\r\n};\r\n","import type { WH } from '../dom/dimensions';\r\nimport type { XY } from '../dom/offset';\r\nimport type { TRBL } from '../dom/style';\r\nimport type { PlainObject } from '~/typings';\r\nimport { each } from './array';\r\nimport { mathRound } from './alias';\r\nimport { strHeight, strWidth } from './strings';\r\n\r\n/**\r\n * Compares two objects and returns true if all values of the passed prop names are identical, false otherwise or if one of the two object is falsy.\r\n * @param a Object a.\r\n * @param b Object b.\r\n * @param props The props which shall be compared.\r\n */\r\nexport const equal = <T extends PlainObject>(\r\n  a: T | undefined,\r\n  b: T | undefined,\r\n  props: Array<keyof T>,\r\n  propMutation?: ((value: any) => any) | null | false\r\n): boolean => {\r\n  if (a && b) {\r\n    let result = true;\r\n    each(props, (prop) => {\r\n      const compareA = propMutation ? propMutation(a[prop]) : a[prop];\r\n      const compareB = propMutation ? propMutation(b[prop]) : b[prop];\r\n      if (compareA !== compareB) {\r\n        result = false;\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalWH = <T>(a?: WH<T>, b?: WH<T>) => equal<WH<T>>(a, b, ['w', 'h']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalXY = <T>(a?: XY<T>, b?: XY<T>) => equal<XY<T>>(a, b, ['x', 'y']);\r\n\r\n/**\r\n * Compares object a with object b and returns true if both have the same property values, false otherwise.\r\n * Also returns false if one of the objects is undefined or null.\r\n * @param a Object a.\r\n * @param b Object b.\r\n */\r\nexport const equalTRBL = (a?: TRBL, b?: TRBL) => equal<TRBL>(a, b, ['t', 'r', 'b', 'l']);\r\n\r\n/**\r\n * Compares two DOM Rects for their equality of their width and height properties\r\n * Also returns false if one of the DOM Rects is undefined or null.\r\n * @param a DOM Rect a.\r\n * @param b DOM Rect b.\r\n * @param round Whether the values should be rounded.\r\n */\r\nexport const equalBCRWH = (a?: DOMRect, b?: DOMRect, round?: boolean) =>\r\n  equal<DOMRect>(a, b, [strWidth, strHeight], round && ((value) => mathRound(value)));\r\n","import { isUndefined } from '../utils/types';\r\nimport { each, runEachAndClear } from '../utils/array';\r\nimport { bind } from '../utils/function';\r\nimport { wnd } from '../utils/alias';\r\nimport { noop } from '../utils/noop';\r\nimport { keys } from '../utils';\r\n\r\nlet passiveEventsSupport: boolean | undefined;\r\nconst passiveStr = 'passive';\r\nconst supportPassiveEvents = (): boolean => {\r\n  // IE11 doesn't support passive events\r\n  if (isUndefined(passiveEventsSupport)) {\r\n    passiveEventsSupport = false;\r\n    try {\r\n      /* eslint-disable */\r\n      // @ts-ignore\r\n      wnd.addEventListener(\r\n        passiveStr,\r\n        noop,\r\n        Object.defineProperty({}, passiveStr, {\r\n          get() {\r\n            passiveEventsSupport = true;\r\n          },\r\n        })\r\n      );\r\n      /* eslint-enable */\r\n    } catch {}\r\n  }\r\n  return passiveEventsSupport;\r\n};\r\nconst splitEventNames = (eventNames: string) => eventNames.split(' ');\r\n\r\nexport interface EventListenerOptions {\r\n  _capture?: boolean;\r\n  _passive?: boolean;\r\n  _once?: boolean;\r\n}\r\n\r\nexport type EventListenerMap = {\r\n  [eventNames: string]: (event: Event) => any;\r\n};\r\n\r\n/**\r\n * Removes the passed event listener for the passed event names with the passed options.\r\n * @param target The element from which the listener shall be removed.\r\n * @param eventNames The eventsnames for which the listener shall be removed.\r\n * @param listener The listener which shall be removed.\r\n * @param capture The options of the removed listener.\r\n */\r\nexport const removeEventListener = <T extends Event = Event>(\r\n  target: EventTarget,\r\n  eventNames: string,\r\n  listener: (event: T) => any,\r\n  capture?: boolean\r\n): void => {\r\n  each(splitEventNames(eventNames), (eventName) => {\r\n    target.removeEventListener(eventName, listener as EventListener, capture);\r\n  });\r\n};\r\n\r\n/**\r\n * Adds the passed event listener for the passed event names with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventNames The eventsnames for which the listener shall be called.\r\n * @param listener The listener which is called on the eventnames.\r\n * @param options The options of the added listener.\r\n */\r\nexport const addEventListener = <T extends Event = Event>(\r\n  target: EventTarget,\r\n  eventNames: string,\r\n  listener: (event: T) => any,\r\n  options?: EventListenerOptions\r\n): (() => void) => {\r\n  const doSupportPassiveEvents = supportPassiveEvents();\r\n  const passive = (doSupportPassiveEvents && options && options._passive) ?? doSupportPassiveEvents;\r\n  const capture = (options && options._capture) || false;\r\n  const once = (options && options._once) || false;\r\n  const nativeOptions: AddEventListenerOptions | boolean = doSupportPassiveEvents\r\n    ? {\r\n        passive,\r\n        capture,\r\n      }\r\n    : capture;\r\n\r\n  return bind(\r\n    runEachAndClear,\r\n    splitEventNames(eventNames).map((eventName) => {\r\n      const finalListener = (\r\n        once\r\n          ? (evt: T) => {\r\n              removeEventListener(target, eventName, finalListener, capture);\r\n              listener(evt);\r\n            }\r\n          : listener\r\n      ) as EventListener;\r\n\r\n      target.addEventListener(eventName, finalListener, nativeOptions);\r\n      return bind(removeEventListener, target, eventName, finalListener, capture);\r\n    })\r\n  );\r\n};\r\n\r\n/**\r\n * Adds the passed event listeners for the passed event names with the passed options.\r\n * @param target The element to which the listener shall be added.\r\n * @param eventListenerMap A map which descirbes the event names and event listeners to be added.\r\n * @param options The options of the added listeners.\r\n */\r\nexport const addEventListeners = (\r\n  target: EventTarget,\r\n  eventListenerMap: EventListenerMap,\r\n  options?: EventListenerOptions\r\n): (() => void) =>\r\n  bind(\r\n    runEachAndClear,\r\n    keys(eventListenerMap).map((eventNames) =>\r\n      addEventListener(target, eventNames, eventListenerMap[eventNames], options)\r\n    )\r\n  );\r\n\r\n/**\r\n * Shorthand for the stopPropagation event Method.\r\n * @param evt The event of which the stopPropagation method shall be called.\r\n */\r\nexport const stopPropagation = (evt: Event): void => evt.stopPropagation();\r\n\r\n/**\r\n * Shorthand for the preventDefault event Method.\r\n * @param evt The event of which the preventDefault method shall be called.\r\n */\r\nexport const preventDefault = (evt: Event): void => evt.preventDefault();\r\n\r\n/**\r\n * Shorthand for the stopPropagation and preventDefault event Method.\r\n * @param evt The event of which the stopPropagation and preventDefault methods shall be called.\r\n */\r\nexport const stopAndPrevent = (evt: Event): void =>\r\n  (stopPropagation(evt) as undefined) || (preventDefault(evt) as undefined);\r\n","import { getBoundingClientRect } from './dimensions';\r\nimport { wnd } from '../utils/alias';\r\n\r\nexport interface XY<T = number> {\r\n  x: T;\r\n  y: T;\r\n}\r\n\r\nconst zeroObj: XY = {\r\n  x: 0,\r\n  y: 0,\r\n};\r\n\r\n/**\r\n * Returns the offset- left and top coordinates of the passed element relative to the document. If the element is null the top and left values are 0.\r\n * @param elm The element of which the offset- top and left coordinates shall be returned.\r\n */\r\nexport const absoluteCoordinates = (elm: HTMLElement | null | undefined): Readonly<XY> => {\r\n  const rect = elm && getBoundingClientRect(elm);\r\n  return rect\r\n    ? {\r\n        x: rect.left + wnd.pageYOffset, //IE11 compat\r\n        y: rect.top + wnd.pageXOffset, //IE11 compat\r\n      }\r\n    : zeroObj;\r\n};\r\n\r\n/**\r\n * Returns the offset- left and top coordinates of the passed element. If the element is null the top and left values are 0.\r\n * @param elm The element of which the offset- top and left coordinates shall be returned.\r\n */\r\nexport const offsetCoordinates = (elm: HTMLElement | null | undefined): Readonly<XY> =>\r\n  elm\r\n    ? {\r\n        x: elm.offsetLeft,\r\n        y: elm.offsetTop,\r\n      }\r\n    : zeroObj;\r\n","import type { Environment } from '~/environment';\r\nimport type { XY } from './offset';\r\nimport { isNumber } from '../utils';\r\n\r\n/**\r\n * Transforms a normalized (>= 0) scroll position to a RTL compatilbe scroll position value.\r\n * @param normalizedScrollPosition The normalized scroll position value.\r\n * @param rtlScrollBehavior The RTL scroll behavior or `false` / `undefined` if the rtl scroll behavior doesn't apply.\r\n * @returns The input scroll position but transformed to a RTL compatible format.\r\n */\r\nexport const getRTLCompatibleScrollPosition = (\r\n  normalizedScrollPosition: number,\r\n  normalizedScrollPositionMax: number,\r\n  rtlScrollBehavior?: Environment['rtlScrollBehavior'] | false\r\n) =>\r\n  rtlScrollBehavior\r\n    ? rtlScrollBehavior.n\r\n      ? -normalizedScrollPosition\r\n      : rtlScrollBehavior.i\r\n      ? normalizedScrollPositionMax - normalizedScrollPosition\r\n      : normalizedScrollPosition\r\n    : normalizedScrollPosition;\r\n\r\n/**\r\n * Gets the RTL compatilbe scroll boundaries from the normalized (>= 0) max scroll position.\r\n * @param normalizedScrollPositionMax The normalzed max scroll position value.\r\n * @param rtlScrollBehavior The RTL scroll behavior or `false` / `undefined` if the rtl scroll behavior doesn't apply.\r\n * @returns RTL compatible scroll boundaries. (min will scroll to start and max will scroll to end)\r\n */\r\nexport const getRTLCompatibleScrollBounds = (\r\n  normalizedScrollPositionMax: number,\r\n  rtlScrollBehavior?: Environment['rtlScrollBehavior'] | false\r\n): [min: number, max: number] => [\r\n  rtlScrollBehavior ? (rtlScrollBehavior.i ? normalizedScrollPositionMax : 0) : 0,\r\n  getRTLCompatibleScrollPosition(\r\n    normalizedScrollPositionMax,\r\n    normalizedScrollPositionMax,\r\n    rtlScrollBehavior\r\n  ),\r\n];\r\n\r\n/**\r\n * Scroll the passed element to the passed position.\r\n * @param elm The element to be scrolled.\r\n * @param position The scroll position.\r\n */\r\nexport const scrollElementTo = (\r\n  elm: HTMLElement,\r\n  position: Partial<XY> | number | false | null | undefined\r\n): void => {\r\n  const { x, y } = isNumber(position) ? { x: position, y: position } : position || {};\r\n  isNumber(x) && (elm.scrollLeft = x);\r\n  isNumber(y) && (elm.scrollTop = y);\r\n};\r\n\r\n/**\r\n * Scroll the passed element to the passed position.\r\n * @param elm The element to be scrolled.\r\n * @param position The scroll position.\r\n */\r\nexport const getElmentScroll = (elm: HTMLElement): Readonly<XY> => ({\r\n  x: elm.scrollLeft,\r\n  y: elm.scrollTop,\r\n});\r\n","import { isBoolean, isFunction, isString } from './utils/types';\r\nimport { keys } from './utils/object';\r\nimport { each, push, from, isEmptyArray, runEachAndClear, createOrKeepArray } from './utils/array';\r\nimport { bind } from './utils/function';\r\n\r\nexport type EventListener<EventArgs extends Record<string, any[]>, N extends keyof EventArgs> = (\r\n  ...args: EventArgs[N]\r\n) => void;\r\n\r\nexport type EventListeners<EventArgs extends Record<string, any[]>> = {\r\n  [K in keyof EventArgs]?: EventListener<EventArgs, K> | EventListener<EventArgs, K>[] | null;\r\n};\r\n\r\nexport type RemoveEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>): void;\r\n  <N extends keyof EventArgs>(name?: N, listener?: EventListener<EventArgs, N>[]): void;\r\n  <N extends keyof EventArgs>(\r\n    name?: N,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n  ): void;\r\n};\r\n\r\nexport type AddEvent<EventArgs extends Record<string, any[]>> = {\r\n  (eventListeners: EventListeners<EventArgs>, pure?: boolean): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>): () => void;\r\n  <N extends keyof EventArgs>(name: N, listener: EventListener<EventArgs, N>[]): () => void;\r\n  <N extends keyof EventArgs>(\r\n    nameOrEventListeners: N | EventListeners<EventArgs>,\r\n    listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[] | boolean\r\n  ): () => void;\r\n};\r\n\r\nexport type TriggerEvent<EventArgs extends Record<string, any[]>> = {\r\n  <N extends keyof EventArgs>(name: N, args: EventArgs[N]): void;\r\n};\r\n\r\nexport type EventListenerHub<EventArgs extends Record<string, any[]>> = [\r\n  AddEvent<EventArgs>,\r\n  RemoveEvent<EventArgs>,\r\n  TriggerEvent<EventArgs>\r\n];\r\n\r\nconst manageListener = <EventArgs extends Record<string, any[]>, N extends keyof EventArgs>(\r\n  callback: (listener?: EventListener<EventArgs, N>) => void,\r\n  listener?: EventListener<EventArgs, N> | EventListener<EventArgs, N>[]\r\n) => {\r\n  each(createOrKeepArray(listener), callback);\r\n};\r\n\r\nexport const createEventListenerHub = <EventArgs extends Record<string, any[]>>(\r\n  initialEventListeners?: EventListeners<EventArgs>\r\n): EventListenerHub<EventArgs> => {\r\n  const events = new Map<keyof EventArgs, Set<EventListener<EventArgs, keyof EventArgs>>>();\r\n\r\n  const removeEvent: RemoveEvent<EventArgs> = (name, listener) => {\r\n    if (name) {\r\n      const eventSet = events.get(name);\r\n      manageListener((currListener) => {\r\n        if (eventSet) {\r\n          eventSet[currListener ? 'delete' : 'clear'](currListener! as any);\r\n        }\r\n      }, listener);\r\n    } else {\r\n      events.forEach((eventSet) => {\r\n        eventSet.clear();\r\n      });\r\n      events.clear();\r\n    }\r\n  };\r\n\r\n  const addEvent: AddEvent<EventArgs> = (\r\n    nameOrEventListeners: keyof EventArgs | EventListeners<EventArgs>,\r\n    listenerOrPure?:\r\n      | EventListener<EventArgs, keyof EventArgs>\r\n      | EventListener<EventArgs, keyof EventArgs>[]\r\n      | boolean\r\n  ) => {\r\n    if (isString(nameOrEventListeners)) {\r\n      const eventSet = events.get(nameOrEventListeners) || new Set();\r\n      events.set(nameOrEventListeners, eventSet);\r\n\r\n      manageListener((currListener) => {\r\n        isFunction(currListener) && eventSet.add(currListener);\r\n      }, listenerOrPure as Exclude<typeof listenerOrPure, boolean>);\r\n\r\n      return bind(\r\n        removeEvent,\r\n        nameOrEventListeners,\r\n        listenerOrPure as Exclude<typeof listenerOrPure, boolean>\r\n      );\r\n    }\r\n    if (isBoolean(listenerOrPure) && listenerOrPure) {\r\n      removeEvent();\r\n    }\r\n\r\n    const eventListenerKeys = keys(nameOrEventListeners) as (keyof EventListeners<EventArgs>)[];\r\n    const offFns: (() => void)[] = [];\r\n    each(eventListenerKeys, (key) => {\r\n      const eventListener = (nameOrEventListeners as EventListeners<EventArgs>)[key];\r\n      eventListener && push(offFns, addEvent(key, eventListener));\r\n    });\r\n\r\n    return bind(runEachAndClear, offFns);\r\n  };\r\n\r\n  const triggerEvent: TriggerEvent<EventArgs> = (name, args) => {\r\n    each(from(events.get(name)), (event) => {\r\n      if (args && !isEmptyArray(args)) {\r\n        (event as (...eventArgs: EventArgs[keyof EventArgs]) => void).apply(0, args);\r\n      } else {\r\n        (event as () => void)();\r\n      }\r\n    });\r\n  };\r\n\r\n  addEvent(initialEventListeners || {});\r\n\r\n  return [addEvent, removeEvent, triggerEvent];\r\n};\r\n","import {\r\n  assignDeep,\r\n  each,\r\n  isObject,\r\n  keys,\r\n  isArray,\r\n  hasOwnProperty,\r\n  isFunction,\r\n  isEmptyObject,\r\n  concat,\r\n} from '~/support';\r\nimport type { DeepPartial, DeepReadonly } from '~/typings';\r\n\r\nexport type OptionsField = string;\r\n\r\nexport type OptionsPrimitiveValue =\r\n  | boolean\r\n  | number\r\n  | string\r\n  | Array<any>\r\n  | ReadonlyArray<any>\r\n  | [any]\r\n  | [any, ...any[]]\r\n  | ((this: any, ...args: any[]) => any)\r\n  | null;\r\n\r\nexport type OptionsObject = {\r\n  [field: OptionsField]: OptionsPrimitiveValue | OptionsObject;\r\n};\r\n\r\ntype OptionsObjectFieldNameTuples<T> = T extends OptionsPrimitiveValue\r\n  ? []\r\n  : {\r\n      [K in Extract<keyof T, OptionsField>]: [K, ...OptionsObjectFieldNameTuples<T[K]>];\r\n    }[Extract<keyof T, OptionsField>];\r\n\r\ntype JoinOptionsObjectFieldTuples<\r\n  T extends OptionsField[],\r\n  IncompletePath extends boolean = false\r\n> = T extends [infer F]\r\n  ? F\r\n  : T extends [infer F, ...infer R]\r\n  ? F extends OptionsField\r\n    ?\r\n        | (IncompletePath extends true ? F : never)\r\n        | `${F}.${JoinOptionsObjectFieldTuples<Extract<R, OptionsField[]>>}`\r\n    : never\r\n  : OptionsField;\r\n\r\ntype SplitJoinedOptionsObjectFieldTuples<S extends string> = string extends S\r\n  ? OptionsField[]\r\n  : S extends ''\r\n  ? []\r\n  : S extends `${infer T}.${infer U}`\r\n  ? [T, ...SplitJoinedOptionsObjectFieldTuples<U>]\r\n  : [S];\r\n\r\ntype OptionsObjectFieldTuplesType<O, T extends OptionsField[]> = T extends [infer F]\r\n  ? F extends keyof O\r\n    ? O[F]\r\n    : never\r\n  : T extends [infer F, ...infer R]\r\n  ? F extends keyof O\r\n    ? O[F] extends OptionsPrimitiveValue\r\n      ? O[F]\r\n      : OptionsObjectFieldTuplesType<O[F], Extract<R, OptionsField[]>>\r\n    : never\r\n  : never;\r\n\r\ntype OptionsObjectFieldPath<O extends OptionsObject> = JoinOptionsObjectFieldTuples<\r\n  OptionsObjectFieldNameTuples<O>,\r\n  true\r\n>;\r\n\r\ntype OptionsObjectFieldPathType<\r\n  O extends OptionsObject,\r\n  P extends string\r\n> = OptionsObjectFieldTuplesType<O, SplitJoinedOptionsObjectFieldTuples<P>>;\r\n\r\nconst opsStringify = (value: any) =>\r\n  JSON.stringify(value, (_, val) => {\r\n    if (isFunction(val)) {\r\n      throw 0;\r\n    }\r\n    return val;\r\n  });\r\n\r\nconst getPropByPath = <T>(obj: any, path: string): T =>\r\n  obj\r\n    ? `${path}`\r\n        .split('.')\r\n        .reduce((o, prop) => (o && hasOwnProperty(o, prop) ? o[prop] : undefined), obj)\r\n    : undefined;\r\n\r\n/**\r\n * The overflow behavior of an axis.\r\n */\r\nexport type OverflowBehavior =\r\n  /** No scrolling is possible and the content is clipped. */\r\n  | 'hidden'\r\n  /** No scrolling is possible and the content isn't clipped. */\r\n  | 'visible'\r\n  /** Scrolling is possible if there is an overflow. */\r\n  | 'scroll'\r\n  /**\r\n   * If the other axis has no overflow the behavior is similar to `visible`.\r\n   * If the other axis has overflow the behavior is similar to `hidden`.\r\n   */\r\n  | 'visible-hidden'\r\n  /**\r\n   * If the other axis has no overflow the behavior is similar to `visible`.\r\n   * If the other axis has overflow the behavior is similar to `scroll`.\r\n   */\r\n  | 'visible-scroll';\r\n\r\n/**\r\n * The scrollbars visibility behavior.\r\n */\r\nexport type ScrollbarsVisibilityBehavior =\r\n  /** The scrollbars are always visible. */\r\n  | 'visible'\r\n  /** The scrollbars are always hidden. */\r\n  | 'hidden'\r\n  /** The scrollbars are only visibile if there is overflow. */\r\n  | 'auto';\r\n\r\n/**\r\n * The scrollbars auto hide behavior\r\n */\r\nexport type ScrollbarsAutoHideBehavior =\r\n  /** The scrollbars are never hidden automatically. */\r\n  | 'never'\r\n  /** The scrollbars are hidden unless the user scrolls. */\r\n  | 'scroll'\r\n  /** The scrollbars are hidden unless the pointer moves in the host element or the user scrolls. */\r\n  | 'move'\r\n  /** The scrollbars are hidden if the pointer leaves the host element or unless the user scrolls. */\r\n  | 'leave';\r\n\r\n/**\r\n * The options of a OverlayScrollbars instance.\r\n */\r\nexport type Options = {\r\n  /** Whether the padding shall be absolute. */\r\n  paddingAbsolute: boolean;\r\n  /** Whether to show the native scrollbars. Has only an effect it the native scrollbars are overlaid. */\r\n  showNativeOverlaidScrollbars: boolean;\r\n  /** Customizes the automatic update behavior. */\r\n  update: {\r\n    /**\r\n     * The given Event(s) from the elements with the given selector(s) will trigger an update.\r\n     * Useful for everything the MutationObserver and ResizeObserver can't detect\r\n     * e.g.: and Images `load` event or the `transitionend` / `animationend` events.\r\n     */\r\n    elementEvents: Array<[elementSelector: string, eventNames: string]> | null;\r\n    /**\r\n     * The debounce which is used to detect content changes.\r\n     * If a tuple is provided you can customize the `timeout` and the `maxWait` in milliseconds.\r\n     * If a single number customizes only the `timeout`.\r\n     *\r\n     * If the `timeout` is `0`, a debounce still exists. (its executed via `requestAnimationFrame`).\r\n     */\r\n    debounce: [timeout: number, maxWait: number] | number | null;\r\n    /**\r\n     * HTML attributes which will trigger an update if they're changed.\r\n     * Basic attributes like `id`, `class`, `style` etc. are always observed and doesn't have to be added explicitly.\r\n     */\r\n    attributes: string[] | null;\r\n    /**\r\n     * A function which makes it possible to ignore a content mutation or null if nothing shall be ignored.\r\n     * @param mutation The MutationRecord from the MutationObserver.\r\n     * @returns A Truthy value if the mutation shall be ignored, a falsy value otherwise.\r\n     */\r\n    ignoreMutation: ((mutation: MutationRecord) => any) | null;\r\n  };\r\n  /** Customizes the overflow behavior per axis. */\r\n  overflow: {\r\n    /** The overflow behavior of the horizontal (x) axis. */\r\n    x: OverflowBehavior;\r\n    /** The overflow behavior of the vertical (y) axis. */\r\n    y: OverflowBehavior;\r\n  };\r\n  /** Customizes appearance of the scrollbars. */\r\n  scrollbars: {\r\n    /**\r\n     * The scrollbars theme.\r\n     * The theme value will be added as `class` to all `scrollbar` elements of the instance.\r\n     */\r\n    theme: string | null;\r\n    /** The scrollbars visibility behavior. */\r\n    visibility: ScrollbarsVisibilityBehavior;\r\n    /** The scrollbars auto hide behavior. */\r\n    autoHide: ScrollbarsAutoHideBehavior;\r\n    /** The scrollbars auto hide delay in milliseconds. */\r\n    autoHideDelay: number;\r\n    /** Whether the scrollbars auto hide behavior is suspended until a scroll happened. */\r\n    autoHideSuspend: boolean;\r\n    /** Whether its possible to drag the handle of a scrollbar to scroll the viewport. */\r\n    dragScroll: boolean;\r\n    /** Whether its possible to click the track of a scrollbar to scroll the viewport. */\r\n    clickScroll: boolean;\r\n    /**\r\n     * An array of pointer types which shall be supported.\r\n     * Common pointer types are: `mouse`, `pen` and `touch`.\r\n     * https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType\r\n     */\r\n    pointers: string[] | null;\r\n  };\r\n};\r\n\r\nexport type ReadonlyOptions = DeepReadonly<Options>;\r\n\r\nexport type PartialOptions = DeepPartial<Options>;\r\n\r\nexport type OptionsCheckFn<O extends OptionsObject> = <P extends OptionsObjectFieldPath<O>>(\r\n  path: P\r\n) => [value: OptionsObjectFieldPathType<O, P>, changed: boolean];\r\n\r\nexport const defaultOptions: ReadonlyOptions = {\r\n  paddingAbsolute: false,\r\n  showNativeOverlaidScrollbars: false,\r\n  update: {\r\n    elementEvents: [['img', 'load']],\r\n    debounce: [0, 33],\r\n    attributes: null,\r\n    ignoreMutation: null,\r\n  },\r\n  overflow: {\r\n    x: 'scroll',\r\n    y: 'scroll',\r\n  },\r\n  scrollbars: {\r\n    theme: 'os-theme-dark',\r\n    visibility: 'auto',\r\n    autoHide: 'never',\r\n    autoHideDelay: 1300,\r\n    autoHideSuspend: false,\r\n    dragScroll: true,\r\n    clickScroll: false,\r\n    pointers: ['mouse', 'touch', 'pen'],\r\n  },\r\n} satisfies OptionsObject & Options;\r\n\r\nexport const getOptionsDiff = <T>(currOptions: T, newOptions: DeepPartial<T>): DeepPartial<T> => {\r\n  const diff: DeepPartial<T> = {};\r\n  const optionsKeys = concat(keys(newOptions), keys(currOptions)) as Array<\r\n    keyof T & keyof DeepPartial<T>\r\n  >;\r\n\r\n  each(optionsKeys, (optionKey) => {\r\n    const currOptionValue = currOptions[optionKey];\r\n    const newOptionValue = newOptions[optionKey];\r\n\r\n    if (isObject(currOptionValue) && isObject(newOptionValue)) {\r\n      assignDeep((diff[optionKey] = {} as any), getOptionsDiff(currOptionValue, newOptionValue));\r\n      // delete empty nested objects\r\n      if (isEmptyObject(diff[optionKey])) {\r\n        delete diff[optionKey];\r\n      }\r\n    } else if (hasOwnProperty(newOptions, optionKey) && newOptionValue !== currOptionValue) {\r\n      let isDiff = true;\r\n\r\n      if (isArray(currOptionValue) || isArray(newOptionValue)) {\r\n        try {\r\n          if (opsStringify(currOptionValue) === opsStringify(newOptionValue)) {\r\n            isDiff = false;\r\n          }\r\n        } catch {}\r\n      }\r\n\r\n      if (isDiff) {\r\n        diff[optionKey] = newOptionValue;\r\n      }\r\n    }\r\n  });\r\n\r\n  return diff;\r\n};\r\n\r\nexport const createOptionCheck =\r\n  <T extends OptionsObject>(\r\n    options: T,\r\n    changedOptions: DeepPartial<T>,\r\n    force?: boolean\r\n  ): OptionsCheckFn<T> =>\r\n  (path) =>\r\n    [getPropByPath(options, path), force || getPropByPath(changedOptions, path) !== undefined];\r\n","const dataAttributePrefix = `data-overlayscrollbars`;\r\n\r\n// environment\r\nexport const classNameEnvironment = 'os-environment';\r\nexport const classNameEnvironmentFlexboxGlue = `${classNameEnvironment}-flexbox-glue`;\r\nexport const classNameEnvironmentFlexboxGlueMax = `${classNameEnvironmentFlexboxGlue}-max`;\r\n\r\n// misc\r\nexport const classNameScrollbarHidden = `os-scrollbar-hidden`;\r\n\r\n// initialize\r\nexport const dataAttributeInitialize = `${dataAttributePrefix}-initialize`;\r\n\r\n// host\r\nexport const dataAttributeHost = dataAttributePrefix;\r\nexport const dataAttributeHostOverflowX = `${dataAttributeHost}-overflow-x`;\r\nexport const dataAttributeHostOverflowY = `${dataAttributeHost}-overflow-y`;\r\nexport const dataValueHostOverflowVisible = 'overflowVisible';\r\nexport const dataValueHostScrollbarHidden = 'scrollbarHidden';\r\nexport const dataValueHostScrollbarPressed = 'scrollbarPressed';\r\nexport const dataValueHostUpdating = 'updating';\r\n\r\n// viewport\r\nexport const dataAttributeViewport = `${dataAttributePrefix}-viewport`;\r\nexport const dataValueViewportArrange = 'arrange';\r\nexport const dataValueViewportScrollbarHidden = 'scrollbarHidden';\r\nexport const dataValueViewportOverflowVisible = dataValueHostOverflowVisible;\r\n\r\n// padding\r\nexport const dataAttributePadding = `${dataAttributePrefix}-padding`;\r\nexport const dataValuePaddingOverflowVisible = dataValueViewportOverflowVisible;\r\n\r\n// content\r\nexport const dataAttributeContent = `${dataAttributePrefix}-content`;\r\n\r\n// size observer\r\nexport const classNameSizeObserver = 'os-size-observer';\r\nexport const classNameSizeObserverAppear = `${classNameSizeObserver}-appear`;\r\nexport const classNameSizeObserverListener = `${classNameSizeObserver}-listener`;\r\nexport const classNameSizeObserverListenerScroll = `${classNameSizeObserverListener}-scroll`;\r\nexport const classNameSizeObserverListenerItem = `${classNameSizeObserverListener}-item`;\r\nexport const classNameSizeObserverListenerItemFinal = `${classNameSizeObserverListenerItem}-final`;\r\n\r\n// trinsic observer\r\nexport const classNameTrinsicObserver = 'os-trinsic-observer';\r\n\r\n// scrollbars\r\nexport const classNameScrollbarNoCssCustomProps = 'os-no-css-vars';\r\nexport const classNameScrollbarThemeNone = 'os-theme-none';\r\nexport const classNameScrollbar = 'os-scrollbar';\r\nexport const classNameScrollbarRtl = `${classNameScrollbar}-rtl`;\r\nexport const classNameScrollbarHorizontal = `${classNameScrollbar}-horizontal`;\r\nexport const classNameScrollbarVertical = `${classNameScrollbar}-vertical`;\r\nexport const classNameScrollbarTrack = `${classNameScrollbar}-track`;\r\nexport const classNameScrollbarHandle = `${classNameScrollbar}-handle`;\r\nexport const classNameScrollbarVisible = `${classNameScrollbar}-visible`;\r\nexport const classNameScrollbarCornerless = `${classNameScrollbar}-cornerless`;\r\nexport const classNameScrollbarTransitionless = `${classNameScrollbar}-transitionless`;\r\nexport const classNameScrollbarInteraction = `${classNameScrollbar}-interaction`;\r\nexport const classNameScrollbarUnusable = `${classNameScrollbar}-unusable`;\r\nexport const classNameScrollbarAutoHide = `${classNameScrollbar}-auto-hide`;\r\nexport const classNameScrollbarAutoHideHidden = `${classNameScrollbarAutoHide}-hidden`;\r\nexport const classNameScrollbarWheel = `${classNameScrollbar}-wheel`;\r\nexport const classNameScrollbarTrackInteractive = `${classNameScrollbarTrack}-interactive`;\r\nexport const classNameScrollbarHandleInteractive = `${classNameScrollbarHandle}-interactive`;\r\n","import { each, keys } from '~/support';\r\nimport type { OverlayScrollbars, OverlayScrollbarsStatic } from '~/overlayscrollbars';\r\nimport type { EventListener, EventListenerArgs, EventListeners } from '..';\r\n\r\nexport type PluginModuleInstance = Record<string | number | symbol, any>;\r\n\r\nexport type InstancePluginEvent = {\r\n  /**\r\n   * Adds event listeners to the instance.\r\n   * @param eventListeners An object which contains the added listeners.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  (eventListeners: EventListeners): () => void;\r\n  /**\r\n   * Adds a single event listener to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which is invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  <N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\r\n  /**\r\n   * Adds multiple event listeners to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which are invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  <N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\r\n};\r\n\r\n/**\r\n * Describes a OverlayScrollbars plugin module.\r\n * Plugin modules must be side-effect free and deterministic. (same input produces same output)\r\n */\r\nexport type PluginModule<\r\n  S extends PluginModuleInstance | void = PluginModuleInstance | void,\r\n  I extends PluginModuleInstance | void = PluginModuleInstance | void\r\n> = (S extends PluginModuleInstance\r\n  ? {\r\n      /**\r\n       * Creates a plugin which is bound to the static object.\r\n       * The function will be called once with the static object as soon as the plugin is registered.\r\n       * The plugin can add new methods or fields to the passed static object.\r\n       * @param osStatic The static object the plugin is bound to.\r\n       * @returns The plugins instance object or a falsy value if the plugin doesn't need any instance object.\r\n       */\r\n      static: (osStatic: OverlayScrollbarsStatic) => S | void;\r\n    }\r\n  : object) &\r\n  (I extends PluginModuleInstance\r\n    ? {\r\n        /**\r\n         * Creates a A plugin which is bound to an instance.\r\n         * The function will be called each time a new instance is created.\r\n         * The plugin can add new methods or fields to the passed instance object.\r\n         * @param osInstance The instance object the plugin is bound to.\r\n         * @param event A function which adds events to the instance which can't be removed from outside the plugin. (instance events added with the `on` function can be removed with the optional `pure` parameter)\r\n         * @param osStatic The static object the plugin is bound to.\r\n         * @returns The plugins instance object or a falsy value if the plugin doesn't need any instance object.\r\n         */\r\n        instance: (\r\n          osInstance: OverlayScrollbars,\r\n          event: InstancePluginEvent,\r\n          osStatic: OverlayScrollbarsStatic\r\n        ) => I | void;\r\n      }\r\n    : object);\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin.\r\n */\r\nexport type Plugin<\r\n  Name extends string = string,\r\n  S extends PluginModuleInstance | void = PluginModuleInstance | void,\r\n  I extends PluginModuleInstance | void = PluginModuleInstance | void\r\n> = {\r\n  /** The field is the plugins name. Plugin names must be globally unique, please choose wisely. */\r\n  [pluginName in Name]: PluginModule<S, I>;\r\n};\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin which has only a static module.\r\n */\r\nexport type StaticPlugin<\r\n  Name extends string = string,\r\n  T extends PluginModuleInstance = PluginModuleInstance\r\n> = Plugin<Name, T, void>;\r\n\r\n/**\r\n * Describes a OverlayScrollbar plugin which has only a instance module.\r\n */\r\nexport type InstancePlugin<\r\n  Name extends string = string,\r\n  T extends PluginModuleInstance = PluginModuleInstance\r\n> = Plugin<Name, void, T>;\r\n\r\n/**\r\n * Infers the type of the static modules instance of the passed plugin.\r\n */\r\nexport type InferStaticPluginModuleInstance<T extends StaticPlugin> = T extends StaticPlugin<\r\n  infer Name\r\n>\r\n  ? T[Name]['static'] extends (...args: any[]) => any\r\n    ? ReturnType<T[Name]['static']>\r\n    : void\r\n  : void;\r\n\r\n/**\r\n * Infers the type of the instance modules instance of the passed plugin.\r\n */\r\nexport type InferInstancePluginModuleInstance<T extends InstancePlugin> = T extends InstancePlugin<\r\n  infer Name\r\n>\r\n  ? T[Name]['instance'] extends (...args: any[]) => any\r\n    ? ReturnType<T[Name]['instance']>\r\n    : void\r\n  : void;\r\n\r\n/** All registered plugin modules. */\r\nexport const pluginModules: Record<string, PluginModule> = {};\r\n\r\n/** All static plugin module instances. */\r\nexport const staticPluginModuleInstances: Record<string, PluginModuleInstance | void> = {};\r\n\r\n/**\r\n * Adds plugins.\r\n * @param addedPlugin The plugin(s) to add.\r\n * @returns The added plugin modules of the registered plugins.\r\n */\r\nexport const addPlugins = (addedPlugin: Plugin[]) => {\r\n  each(addedPlugin, (plugin) =>\r\n    each(plugin, (_, key) => {\r\n      pluginModules[key] = plugin[key];\r\n    })\r\n  );\r\n};\r\n\r\nexport const registerPluginModuleInstances = (\r\n  plugin: Plugin,\r\n  staticObj: OverlayScrollbarsStatic,\r\n  instanceInfo?: [\r\n    instanceObj: OverlayScrollbars,\r\n    event: InstancePluginEvent,\r\n    instancePluginMap?: Record<string, PluginModuleInstance>\r\n  ]\r\n): Array<PluginModuleInstance | void> =>\r\n  keys(plugin).map((name) => {\r\n    const { static: osStatic, instance: osInstance } = (\r\n      plugin as Plugin<string, PluginModuleInstance, PluginModuleInstance>\r\n    )[name];\r\n    const [instanceObj, event, instancePluginMap] = instanceInfo || [];\r\n    const ctor = instanceInfo ? osInstance : osStatic;\r\n    if (ctor) {\r\n      const instance = instanceInfo\r\n        ? (\r\n            ctor as Extract<\r\n              typeof ctor,\r\n              (\r\n                osInstance: OverlayScrollbars,\r\n                event: InstancePluginEvent,\r\n                osStatic: OverlayScrollbarsStatic\r\n              ) => PluginModuleInstance | void\r\n            >\r\n          )(instanceObj!, event!, staticObj)\r\n        : (\r\n            ctor as Extract<\r\n              typeof ctor,\r\n              (osStatic: OverlayScrollbarsStatic) => PluginModuleInstance | void\r\n            >\r\n          )(staticObj);\r\n      return ((instancePluginMap || staticPluginModuleInstances)[name] = instance);\r\n    }\r\n  });\r\n\r\nexport const getStaticPluginModuleInstance = <T extends StaticPlugin>(\r\n  pluginModuleName: T extends StaticPlugin<infer N> ? N : never\r\n): InferStaticPluginModuleInstance<T> | undefined =>\r\n  staticPluginModuleInstances[pluginModuleName] as InferStaticPluginModuleInstance<T> | undefined;\r\n","import {\r\n  createDOM,\r\n  appendChildren,\r\n  offsetSize,\r\n  addEventListener,\r\n  addClass,\r\n  equalWH,\r\n  cAF,\r\n  rAF,\r\n  stopPropagation,\r\n  bind,\r\n  scrollElementTo,\r\n  strWidth,\r\n  strHeight,\r\n  setStyles,\r\n} from '~/support';\r\nimport {\r\n  classNameSizeObserverListenerScroll,\r\n  classNameSizeObserverListenerItem,\r\n  classNameSizeObserverListenerItemFinal,\r\n} from '~/classnames';\r\nimport type { StaticPlugin } from '../plugins';\r\n\r\nexport const sizeObserverPluginName = '__osSizeObserverPlugin';\r\n\r\nexport const SizeObserverPlugin = /* @__PURE__ */ (() => ({\r\n  [sizeObserverPluginName]: {\r\n    static:\r\n      () =>\r\n      (\r\n        listenerElement: HTMLElement,\r\n        onSizeChangedCallback: (appear: boolean) => any,\r\n        observeAppearChange: boolean | null | undefined\r\n      ): [appearCallback: () => void, offFns: (() => any)[]] => {\r\n        const scrollAmount = 3333333;\r\n        const scrollEventName = 'scroll';\r\n        const observerElementChildren = createDOM(\r\n          `<div class=\"${classNameSizeObserverListenerItem}\" dir=\"ltr\"><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\"></div></div><div class=\"${classNameSizeObserverListenerItem}\"><div class=\"${classNameSizeObserverListenerItemFinal}\" style=\"width: 200%; height: 200%\"></div></div></div>`\r\n        );\r\n        const observerElementChildrenRoot = observerElementChildren[0] as HTMLElement;\r\n        const shrinkElement = observerElementChildrenRoot.lastChild as HTMLElement;\r\n        const expandElement = observerElementChildrenRoot.firstChild as HTMLElement;\r\n        const expandElementChild = expandElement?.firstChild as HTMLElement;\r\n\r\n        let cacheSize = offsetSize(observerElementChildrenRoot);\r\n        let currSize = cacheSize;\r\n        let isDirty = false;\r\n        let rAFId: number;\r\n\r\n        const reset = () => {\r\n          scrollElementTo(expandElement, scrollAmount);\r\n          scrollElementTo(shrinkElement, scrollAmount);\r\n        };\r\n        const onResized = (appear?: unknown) => {\r\n          rAFId = 0;\r\n          if (isDirty) {\r\n            cacheSize = currSize;\r\n            onSizeChangedCallback(appear === true);\r\n          }\r\n        };\r\n        const onScroll = (scrollEvent?: Event | false) => {\r\n          currSize = offsetSize(observerElementChildrenRoot);\r\n          isDirty = !scrollEvent || !equalWH(currSize, cacheSize);\r\n\r\n          if (scrollEvent) {\r\n            stopPropagation(scrollEvent);\r\n\r\n            if (isDirty && !rAFId) {\r\n              cAF!(rAFId);\r\n              rAFId = rAF!(onResized);\r\n            }\r\n          } else {\r\n            onResized(scrollEvent === false);\r\n          }\r\n\r\n          reset();\r\n        };\r\n        const destroyFns = [\r\n          appendChildren(listenerElement, observerElementChildren),\r\n          addEventListener(expandElement, scrollEventName, onScroll),\r\n          addEventListener(shrinkElement, scrollEventName, onScroll),\r\n        ];\r\n\r\n        addClass(listenerElement, classNameSizeObserverListenerScroll);\r\n\r\n        // lets assume that the divs will never be that large and a constant value is enough\r\n        setStyles(expandElementChild, {\r\n          [strWidth]: scrollAmount,\r\n          [strHeight]: scrollAmount,\r\n        });\r\n\r\n        rAF!(reset);\r\n\r\n        return [observeAppearChange ? bind(onScroll, false) : reset, destroyFns];\r\n      },\r\n  },\r\n}))() satisfies StaticPlugin<typeof sizeObserverPluginName>;\r\n","import {\r\n  keys,\r\n  attr,\r\n  noop,\r\n  each,\r\n  assignDeep,\r\n  windowSize,\r\n  attrClass,\r\n  wnd,\r\n  mathAbs,\r\n  mathRound,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  strWidth,\r\n  strHeight,\r\n  getStyles,\r\n  setStyles,\r\n} from '~/support';\r\nimport { dataValueViewportArrange, dataAttributeViewport } from '~/classnames';\r\nimport type { WH, UpdateCache, XY } from '~/support';\r\nimport type { StyleObject, StyleObjectKey } from '~/typings';\r\nimport type { StructureSetupState } from '~/setups/structureSetup';\r\nimport type {\r\n  ViewportOverflowState,\r\n  GetViewportOverflowState,\r\n  HideNativeScrollbars,\r\n} from '~/setups/structureSetup/updateSegments/overflowUpdateSegment';\r\nimport type { InternalEnvironment } from '~/environment';\r\nimport type { StaticPlugin } from '~/plugins';\r\n\r\nexport type ArrangeViewport = (\r\n  viewportOverflowState: ViewportOverflowState,\r\n  viewportScrollSize: WH<number>,\r\n  sizeFraction: WH<number>,\r\n  directionIsRTL: boolean\r\n) => boolean;\r\n\r\nexport type UndoViewportArrangeResult = [\r\n  redoViewportArrange: () => void,\r\n  overflowState?: ViewportOverflowState\r\n];\r\n\r\nexport type UndoArrangeViewport = (\r\n  showNativeOverlaidScrollbars: boolean,\r\n  directionIsRTL: boolean,\r\n  viewportOverflowState?: ViewportOverflowState\r\n) => UndoViewportArrangeResult;\r\n\r\nlet contentArrangeCounter = 0;\r\n\r\nexport const scrollbarsHidingPluginName = '__osScrollbarsHidingPlugin';\r\n\r\nexport const ScrollbarsHidingPlugin = /* @__PURE__ */ (() => ({\r\n  [scrollbarsHidingPluginName]: {\r\n    static: () => ({\r\n      _createUniqueViewportArrangeElement: (env: InternalEnvironment): false | HTMLStyleElement => {\r\n        const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid, _cssCustomProperties } = env;\r\n        const create =\r\n          !_cssCustomProperties &&\r\n          !_nativeScrollbarsHiding &&\r\n          (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n        const result = create ? document.createElement('style') : false;\r\n\r\n        if (result) {\r\n          attr(\r\n            result,\r\n            'id',\r\n            `${dataAttributeViewport}-${dataValueViewportArrange}-${contentArrangeCounter}`\r\n          );\r\n          contentArrangeCounter++;\r\n        }\r\n\r\n        return result;\r\n      },\r\n      _overflowUpdateSegment: (\r\n        doViewportArrange: boolean,\r\n        flexboxGlue: boolean,\r\n        viewport: HTMLElement,\r\n        viewportArrange: HTMLStyleElement | false | null | undefined,\r\n        state: StructureSetupState,\r\n        getViewportOverflowState: GetViewportOverflowState,\r\n        hideNativeScrollbars: HideNativeScrollbars\r\n      ): [ArrangeViewport, UndoArrangeViewport] => {\r\n        /**\r\n         * Sets the styles of the viewport arrange element.\r\n         * @param viewportOverflowState The viewport overflow state according to which the scrollbars shall be hidden.\r\n         * @param viewportScrollSize The content scroll size.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @returns A boolean which indicates whether the viewport arrange element was adjusted.\r\n         */\r\n        const arrangeViewport: ArrangeViewport = (\r\n          viewportOverflowState,\r\n          viewportScrollSize,\r\n          sizeFraction,\r\n          directionIsRTL\r\n        ) => {\r\n          if (doViewportArrange) {\r\n            const { _viewportPaddingStyle } = state;\r\n            const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } = viewportOverflowState;\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n            const viewportArrangeHorizontalPaddingKey: keyof StyleObject = directionIsRTL\r\n              ? strPaddingRight\r\n              : strPaddingLeft;\r\n            const viewportArrangeHorizontalPaddingValue = _viewportPaddingStyle[\r\n              viewportArrangeHorizontalPaddingKey\r\n            ] as number;\r\n            const viewportArrangeVerticalPaddingValue = _viewportPaddingStyle.paddingTop as number;\r\n            const fractionalContentWidth = viewportScrollSize.w + sizeFraction.w;\r\n            const fractionalContenHeight = viewportScrollSize.h + sizeFraction.h;\r\n            const arrangeSize = {\r\n              w:\r\n                hideOffsetY && arrangeY\r\n                  ? `${\r\n                      hideOffsetY + fractionalContentWidth - viewportArrangeHorizontalPaddingValue\r\n                    }px`\r\n                  : '',\r\n              h:\r\n                hideOffsetX && arrangeX\r\n                  ? `${\r\n                      hideOffsetX + fractionalContenHeight - viewportArrangeVerticalPaddingValue\r\n                    }px`\r\n                  : '',\r\n            };\r\n\r\n            // adjust content arrange / before element\r\n            if (viewportArrange) {\r\n              const { sheet } = viewportArrange;\r\n              if (sheet) {\r\n                const { cssRules } = sheet;\r\n                if (cssRules) {\r\n                  if (!cssRules.length) {\r\n                    sheet.insertRule(\r\n                      `#${attr(\r\n                        viewportArrange,\r\n                        'id'\r\n                      )} + [${dataAttributeViewport}~='${dataValueViewportArrange}']::before {}`,\r\n                      0\r\n                    );\r\n                  }\r\n\r\n                  // @ts-ignore\r\n                  const ruleStyle = cssRules[0].style;\r\n\r\n                  ruleStyle[strWidth] = arrangeSize.w;\r\n                  ruleStyle[strHeight] = arrangeSize.h;\r\n                }\r\n              }\r\n            } else {\r\n              setStyles(viewport, {\r\n                '--os-vaw': arrangeSize.w,\r\n                '--os-vah': arrangeSize.h,\r\n              });\r\n            }\r\n          }\r\n\r\n          return doViewportArrange;\r\n        };\r\n\r\n        /**\r\n         * Removes all styles applied because of the viewport arrange strategy.\r\n         * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\r\n         * @param directionIsRTL Whether the direction is RTL or not.\r\n         * @param viewportOverflowState The currentviewport overflow state or undefined if it has to be determined.\r\n         * @returns A object with a function which applies all the removed styles and the determined viewport vverflow state.\r\n         */\r\n        const undoViewportArrange: UndoArrangeViewport = (\r\n          showNativeOverlaidScrollbars,\r\n          directionIsRTL,\r\n          viewportOverflowState?\r\n        ) => {\r\n          if (doViewportArrange) {\r\n            const finalViewportOverflowState =\r\n              viewportOverflowState || getViewportOverflowState(showNativeOverlaidScrollbars);\r\n            const { _viewportPaddingStyle: viewportPaddingStyle } = state;\r\n            const { _scrollbarsHideOffsetArrange } = finalViewportOverflowState;\r\n            const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n            const finalPaddingStyle: StyleObject = {};\r\n            const assignProps = (props: string[]) =>\r\n              each(props, (prop) => {\r\n                finalPaddingStyle[prop as StyleObjectKey] =\r\n                  viewportPaddingStyle[prop as StyleObjectKey];\r\n              });\r\n\r\n            if (arrangeX) {\r\n              assignProps([strMarginBottom, strPaddingTop, strPaddingBottom]);\r\n            }\r\n\r\n            if (arrangeY) {\r\n              assignProps([strMarginLeft, strMarginRight, strPaddingLeft, strPaddingRight]);\r\n            }\r\n\r\n            const prevStyle = getStyles(viewport, keys(finalPaddingStyle) as StyleObjectKey[]);\r\n\r\n            // add class\r\n            attrClass(viewport, dataAttributeViewport, dataValueViewportArrange);\r\n\r\n            if (!flexboxGlue) {\r\n              finalPaddingStyle[strHeight] = '';\r\n            }\r\n\r\n            setStyles(viewport, finalPaddingStyle);\r\n\r\n            return [\r\n              () => {\r\n                hideNativeScrollbars(\r\n                  finalViewportOverflowState,\r\n                  directionIsRTL,\r\n                  doViewportArrange,\r\n                  prevStyle\r\n                );\r\n                setStyles(viewport, prevStyle);\r\n                // remove class\r\n                attrClass(viewport, dataAttributeViewport, dataValueViewportArrange, true);\r\n              },\r\n              finalViewportOverflowState,\r\n            ];\r\n          }\r\n          return [noop];\r\n        };\r\n\r\n        return [arrangeViewport, undoViewportArrange];\r\n      },\r\n      _envWindowZoom: () => {\r\n        let size = { w: 0, h: 0 };\r\n        let dpr = 0;\r\n        const getWindowDPR = (): number => {\r\n          const screen = wnd.screen;\r\n          // eslint-disable-next-line\r\n          // @ts-ignore\r\n          const dDPI = screen.deviceXDPI || 0;\r\n          // eslint-disable-next-line\r\n          // @ts-ignore\r\n          const sDPI = screen.logicalXDPI || 1;\r\n          return wnd.devicePixelRatio || dDPI / sDPI;\r\n        };\r\n        const diffBiggerThanOne = (valOne: number, valTwo: number): boolean => {\r\n          const absValOne = mathAbs(valOne);\r\n          const absValTwo = mathAbs(valTwo);\r\n          return !(\r\n            absValOne === absValTwo ||\r\n            absValOne + 1 === absValTwo ||\r\n            absValOne - 1 === absValTwo\r\n          );\r\n        };\r\n\r\n        return (\r\n          envInstance: InternalEnvironment,\r\n          updateNativeScrollbarSizeCache: UpdateCache<XY<number>>\r\n        ): boolean | undefined => {\r\n          const sizeNew = windowSize();\r\n          const deltaSize = {\r\n            w: sizeNew.w - size.w,\r\n            h: sizeNew.h - size.h,\r\n          };\r\n\r\n          if (deltaSize.w === 0 && deltaSize.h === 0) {\r\n            return;\r\n          }\r\n\r\n          const deltaAbsSize = {\r\n            w: mathAbs(deltaSize.w),\r\n            h: mathAbs(deltaSize.h),\r\n          };\r\n          const deltaAbsRatio = {\r\n            w: mathAbs(mathRound(sizeNew.w / (size.w / 100.0))),\r\n            h: mathAbs(mathRound(sizeNew.h / (size.h / 100.0))),\r\n          };\r\n          const dprNew = getWindowDPR();\r\n          const deltaIsBigger = deltaAbsSize.w > 2 && deltaAbsSize.h > 2;\r\n          const difference = !diffBiggerThanOne(deltaAbsRatio.w, deltaAbsRatio.h);\r\n          const dprChanged = dprNew !== dpr && dprNew > 0;\r\n          const isZoom = deltaIsBigger && difference && dprChanged;\r\n          let scrollbarSizeChanged;\r\n          let scrollbarSize;\r\n\r\n          if (isZoom) {\r\n            [scrollbarSize, scrollbarSizeChanged] = updateNativeScrollbarSizeCache();\r\n\r\n            assignDeep(envInstance._nativeScrollbarsSize, scrollbarSize); // keep the object same!\r\n          }\r\n\r\n          size = sizeNew;\r\n          dpr = dprNew;\r\n\r\n          return scrollbarSizeChanged;\r\n        };\r\n      },\r\n    }),\r\n  },\r\n}))() satisfies StaticPlugin<typeof scrollbarsHidingPluginName>;\r\n","import { animateNumber, noop, setT } from '~/support';\r\nimport type { StaticPlugin } from '~/plugins';\r\n\r\nexport const clickScrollPluginModuleName = '__osClickScrollPlugin';\r\n\r\nexport const ClickScrollPlugin = /* @__PURE__ */ (() => ({\r\n  [clickScrollPluginModuleName]: {\r\n    static:\r\n      () =>\r\n      (\r\n        moveHandleRelative: (deltaMovement: number) => void,\r\n        getHandleOffset: (handleRect?: DOMRect, trackRect?: DOMRect) => number,\r\n        startOffset: number,\r\n        handleLength: number,\r\n        relativeTrackPointerOffset: number\r\n      ): (() => void) => {\r\n        // click scroll animation\r\n        let iteration = 0;\r\n        let clear = noop;\r\n        const animateClickScroll = (clickScrollProgress: number) => {\r\n          clear = animateNumber(\r\n            clickScrollProgress,\r\n            clickScrollProgress + handleLength * Math.sign(startOffset),\r\n            133,\r\n            (animationProgress, _, animationCompleted) => {\r\n              moveHandleRelative(animationProgress);\r\n              const handleStartBound = getHandleOffset();\r\n              const handleEndBound = handleStartBound + handleLength;\r\n              const mouseBetweenHandleBounds =\r\n                relativeTrackPointerOffset >= handleStartBound &&\r\n                relativeTrackPointerOffset <= handleEndBound;\r\n\r\n              if (animationCompleted && !mouseBetweenHandleBounds) {\r\n                if (iteration) {\r\n                  animateClickScroll(animationProgress);\r\n                } else {\r\n                  const firstIterationPauseTimeout = setT(() => {\r\n                    animateClickScroll(animationProgress);\r\n                  }, 222);\r\n                  clear = () => {\r\n                    clearTimeout(firstIterationPauseTimeout);\r\n                  };\r\n                }\r\n                iteration++;\r\n              }\r\n            }\r\n          );\r\n        };\r\n\r\n        animateClickScroll(0);\r\n\r\n        return () => clear();\r\n      },\r\n  },\r\n}))() satisfies StaticPlugin<typeof clickScrollPluginModuleName>;\r\n","import {\r\n  createDOM,\r\n  addClass,\r\n  appendChildren,\r\n  fractionalSize,\r\n  clientSize,\r\n  absoluteCoordinates,\r\n  offsetSize,\r\n  removeAttr,\r\n  removeElements,\r\n  equalBCRWH,\r\n  getBoundingClientRect,\r\n  assignDeep,\r\n  cssProperty,\r\n  createCache,\r\n  equalXY,\r\n  createEventListenerHub,\r\n  scrollT,\r\n  bind,\r\n  wnd,\r\n  noop,\r\n  scrollElementTo,\r\n  strHidden,\r\n  strOverflowX,\r\n  strOverflowY,\r\n  getStyles,\r\n  setStyles,\r\n} from '~/support';\r\nimport {\r\n  classNameEnvironment,\r\n  classNameEnvironmentFlexboxGlue,\r\n  classNameEnvironmentFlexboxGlueMax,\r\n  classNameScrollbarHidden,\r\n} from '~/classnames';\r\nimport { defaultOptions } from '~/options';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport type { XY, EventListener } from '~/support';\r\nimport type { Options, PartialOptions } from '~/options';\r\nimport type { ScrollbarsHidingPlugin } from '~/plugins';\r\nimport type { Initialization, PartialInitialization } from '~/initialization';\r\nimport type { StyleObjectKey } from './typings';\r\n\r\ntype EnvironmentEventArgs = {\r\n  r: [scrollbarSizeChanged?: boolean];\r\n};\r\n\r\n/**\r\n * Describes the OverlayScrollbars environment.\r\n */\r\nexport interface Environment {\r\n  /** The native scrollbars size of the browser / system. */\r\n  scrollbarsSize: XY<number>;\r\n  /** Whether the native scrollbars are overlaid. */\r\n  scrollbarsOverlaid: XY<boolean>;\r\n  /** Whether the browser supports native scrollbars hiding. */\r\n  scrollbarsHiding: boolean;\r\n  /** The rtl scroll behavior of the browser. */\r\n  rtlScrollBehavior: { n: boolean; i: boolean };\r\n  /** Whether the browser supports all needed Flexbox features for OverlayScrollbars to work in a more performant way. */\r\n  flexboxGlue: boolean;\r\n  /** Whether the browser supports custom css properties. (also known as css variables) */\r\n  cssCustomProperties: boolean;\r\n  /** Whether the browser supports the ScrollTimeline API. */\r\n  scrollTimeline: boolean;\r\n  /** The default Initialization to use if nothing else is specified. */\r\n  staticDefaultInitialization: Initialization;\r\n  /** The default Options to use if nothing else is specified. */\r\n  staticDefaultOptions: Options;\r\n\r\n  /** Returns the current default Initialization. */\r\n  getDefaultInitialization(): Initialization;\r\n  /** Returns the current default Options. */\r\n  getDefaultOptions(): Options;\r\n\r\n  /**\r\n   * Sets a new default Initialization.\r\n   * If the new default Initialization is partially filled, its deeply merged with the current default Initialization.\r\n   * @param newDefaultInitialization The new default Initialization.\r\n   * @returns The current default Initialization.\r\n   */\r\n  setDefaultInitialization(newDefaultInitialization: PartialInitialization): Initialization;\r\n  /**\r\n   * Sets new default Options.\r\n   * If the new default Options are partially filled, they're deeply merged with the current default Options.\r\n   * @param newDefaultOptions The new default Options.\r\n   * @returns The current default options.\r\n   */\r\n  setDefaultOptions(newDefaultOptions: PartialOptions): Options;\r\n}\r\n\r\nexport interface InternalEnvironment {\r\n  readonly _nativeScrollbarsSize: XY;\r\n  readonly _nativeScrollbarsOverlaid: XY<boolean>;\r\n  readonly _nativeScrollbarsHiding: boolean;\r\n  readonly _rtlScrollBehavior: { n: boolean; i: boolean };\r\n  readonly _flexboxGlue: boolean;\r\n  readonly _cssCustomProperties: boolean;\r\n  readonly _scrollTimeline: boolean;\r\n  readonly _staticDefaultInitialization: Initialization;\r\n  readonly _staticDefaultOptions: Options;\r\n  _addResizeListener(listener: EventListener<EnvironmentEventArgs, 'r'>): () => void;\r\n  _getDefaultInitialization(): Initialization;\r\n  _setDefaultInitialization(newInitialization: PartialInitialization): Initialization;\r\n  _getDefaultOptions(): Options;\r\n  _setDefaultOptions(newDefaultOptions: PartialOptions): Options;\r\n}\r\n\r\nlet environmentInstance: InternalEnvironment;\r\n\r\nconst getNativeScrollbarSize = (\r\n  body: HTMLElement,\r\n  measureElm: HTMLElement,\r\n  measureElmChild: HTMLElement,\r\n  clear?: boolean\r\n): XY => {\r\n  appendChildren(body, measureElm);\r\n\r\n  const cSize = clientSize(measureElm);\r\n  const oSize = offsetSize(measureElm);\r\n  const fSize = fractionalSize(measureElmChild);\r\n\r\n  clear && removeElements(measureElm);\r\n\r\n  return {\r\n    x: oSize.h - cSize.h + fSize.h,\r\n    y: oSize.w - cSize.w + fSize.w,\r\n  };\r\n};\r\n\r\nconst getNativeScrollbarsHiding = (testElm: HTMLElement): boolean => {\r\n  let result = false;\r\n  const revertClass = addClass(testElm, classNameScrollbarHidden);\r\n  try {\r\n    result =\r\n      getStyles(testElm, cssProperty('scrollbar-width') as StyleObjectKey) === 'none' ||\r\n      getStyles(testElm, 'display', '::-webkit-scrollbar') === 'none';\r\n  } catch {}\r\n  revertClass();\r\n  return result;\r\n};\r\n\r\nconst getRtlScrollBehavior = (\r\n  parentElm: HTMLElement,\r\n  childElm: HTMLElement\r\n): { i: boolean; n: boolean } => {\r\n  setStyles(parentElm, { [strOverflowX]: strHidden, [strOverflowY]: strHidden, direction: 'rtl' });\r\n  scrollElementTo(parentElm, { x: 0 });\r\n\r\n  const parentOffset = absoluteCoordinates(parentElm);\r\n  const childOffset = absoluteCoordinates(childElm);\r\n  scrollElementTo(parentElm, { x: -999 }); // https://github.com/KingSora/OverlayScrollbars/issues/187\r\n  const childOffsetAfterScroll = absoluteCoordinates(childElm);\r\n  return {\r\n    /**\r\n     * origin direction = determines if the zero scroll position is on the left or right side\r\n     * 'i' means 'invert' (i === true means that the axis must be inverted to be correct)\r\n     * true = on the left side\r\n     * false = on the right side\r\n     */\r\n    i: parentOffset.x === childOffset.x,\r\n    /**\r\n     * negative = determines if the maximum scroll is positive or negative\r\n     * 'n' means 'negate' (n === true means that the axis must be negated to be correct)\r\n     * true = negative\r\n     * false = positive\r\n     */\r\n    n: childOffset.x !== childOffsetAfterScroll.x,\r\n  };\r\n};\r\n\r\nconst getFlexboxGlue = (parentElm: HTMLElement, childElm: HTMLElement): boolean => {\r\n  // IE11 doesn't support \"flexbox glue\"\r\n  const revertFbxGlue = addClass(parentElm, classNameEnvironmentFlexboxGlue);\r\n  const minOffsetsizeParent = getBoundingClientRect(parentElm);\r\n  const minOffsetsize = getBoundingClientRect(childElm);\r\n  const supportsMin = equalBCRWH(minOffsetsize, minOffsetsizeParent, true);\r\n\r\n  const revertFbxGlueMax = addClass(parentElm, classNameEnvironmentFlexboxGlueMax);\r\n  const maxOffsetsizeParent = getBoundingClientRect(parentElm);\r\n  const maxOffsetsize = getBoundingClientRect(childElm);\r\n  const supportsMax = equalBCRWH(maxOffsetsize, maxOffsetsizeParent, true);\r\n\r\n  revertFbxGlue();\r\n  revertFbxGlueMax();\r\n\r\n  return supportsMin && supportsMax;\r\n};\r\n\r\nconst createEnvironment = (): InternalEnvironment => {\r\n  const { body } = document;\r\n  const envDOM = createDOM(`<div class=\"${classNameEnvironment}\"><div></div></div>`);\r\n  const envElm = envDOM[0] as HTMLElement;\r\n  const envChildElm = envElm.firstChild as HTMLElement;\r\n  const [addEvent, , triggerEvent] = createEventListenerHub<EnvironmentEventArgs>();\r\n  const [updateNativeScrollbarSizeCache, getNativeScrollbarSizeCache] = createCache(\r\n    {\r\n      _initialValue: getNativeScrollbarSize(body, envElm, envChildElm),\r\n      _equal: equalXY,\r\n    },\r\n    bind(getNativeScrollbarSize, body, envElm, envChildElm, true)\r\n  );\r\n  const [nativeScrollbarsSize] = getNativeScrollbarSizeCache();\r\n  const nativeScrollbarsHiding = getNativeScrollbarsHiding(envElm);\r\n  const nativeScrollbarsOverlaid = {\r\n    x: nativeScrollbarsSize.x === 0,\r\n    y: nativeScrollbarsSize.y === 0,\r\n  };\r\n  const staticDefaultInitialization: Initialization = {\r\n    elements: {\r\n      host: null,\r\n      padding: !nativeScrollbarsHiding,\r\n      viewport: (target) =>\r\n        nativeScrollbarsHiding && target === target.ownerDocument.body && target,\r\n      content: false,\r\n    },\r\n    scrollbars: {\r\n      slot: true,\r\n    },\r\n    cancel: {\r\n      nativeScrollbarsOverlaid: false,\r\n      body: null,\r\n    },\r\n  };\r\n  const staticDefaultOptions = assignDeep({}, defaultOptions);\r\n  const getDefaultOptions = bind(\r\n    assignDeep as typeof assignDeep<Options, Options>,\r\n    {} as Options,\r\n    staticDefaultOptions\r\n  );\r\n  const getDefaultInitialization = bind(\r\n    assignDeep as typeof assignDeep<Initialization, Initialization>,\r\n    {} as Initialization,\r\n    staticDefaultInitialization\r\n  );\r\n\r\n  const env: InternalEnvironment = {\r\n    _nativeScrollbarsSize: nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid: nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding: nativeScrollbarsHiding,\r\n    _cssCustomProperties: getStyles(envElm, 'zIndex') === '-1', // IE11 doesn't support css custom props\r\n    _scrollTimeline: !!scrollT,\r\n    _rtlScrollBehavior: getRtlScrollBehavior(envElm, envChildElm),\r\n    _flexboxGlue: getFlexboxGlue(envElm, envChildElm),\r\n    _addResizeListener: bind(addEvent, 'r'),\r\n    _getDefaultInitialization: getDefaultInitialization,\r\n    _setDefaultInitialization: (newInitializationStrategy) =>\r\n      assignDeep(staticDefaultInitialization, newInitializationStrategy) &&\r\n      getDefaultInitialization(),\r\n    _getDefaultOptions: getDefaultOptions,\r\n    _setDefaultOptions: (newDefaultOptions) =>\r\n      assignDeep(staticDefaultOptions, newDefaultOptions) && getDefaultOptions(),\r\n    _staticDefaultInitialization: assignDeep({}, staticDefaultInitialization),\r\n    _staticDefaultOptions: assignDeep({}, staticDefaultOptions),\r\n  };\r\n\r\n  removeAttr(envElm, 'style');\r\n  removeElements(envElm);\r\n\r\n  // needed in case content has css viewport units\r\n  wnd.addEventListener('resize', () => {\r\n    let scrollbarSizeChanged;\r\n    if (!nativeScrollbarsHiding && (!nativeScrollbarsOverlaid.x || !nativeScrollbarsOverlaid.y)) {\r\n      const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n        scrollbarsHidingPluginName\r\n      );\r\n      const zoomFn = scrollbarsHidingPlugin ? scrollbarsHidingPlugin._envWindowZoom() : noop;\r\n      scrollbarSizeChanged = !!zoomFn(env, updateNativeScrollbarSizeCache);\r\n    }\r\n\r\n    triggerEvent('r', [scrollbarSizeChanged]);\r\n  });\r\n\r\n  return env;\r\n};\r\n\r\nconst getEnvironment = (): InternalEnvironment => {\r\n  if (!environmentInstance) {\r\n    environmentInstance = createEnvironment();\r\n  }\r\n  return environmentInstance;\r\n};\r\n\r\nexport { getEnvironment };\r\n","import { isFunction, isHTMLElement, isNull, isUndefined } from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { DeepPartial } from '~/typings';\r\n\r\ntype StaticInitialization = HTMLElement | false | null;\r\ntype DynamicInitialization = HTMLElement | boolean | null;\r\ntype FallbackStaticInitializtationElement<Args extends any[]> = Extract<\r\n  StaticInitializationElement<Args>,\r\n  (...args: Args) => any\r\n> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\ntype FallbackDynamicInitializtationElement<Args extends any[]> = Extract<\r\n  DynamicInitializationElement<Args>,\r\n  (...args: Args) => any\r\n> extends (...args: infer P) => any\r\n  ? (...args: P) => HTMLElement\r\n  : never;\r\n\r\n/**\r\n * Static elements are elements which MUST be present in the final DOM.\r\n * If an `HTMLElement` is passed the passed element will be taken as the repsective element.\r\n * With `false`, `null` or `undefined` an appropriate element is generated automatically.\r\n */\r\nexport type StaticInitializationElement<Args extends any[]> =\r\n  /** A function which returns the the StaticInitialization value. */\r\n  | ((...args: Args) => StaticInitialization)\r\n  /** The StaticInitialization value. */\r\n  | StaticInitialization;\r\n\r\n/**\r\n * Dynamic elements are elements which CAN be present in the final DOM.\r\n * If an `HTMLElement`is passed the passed element will be taken as the repsective element.\r\n * With `true` an appropriate element is generated automatically.\r\n * With `false`, `null` or `undefined` the element won't be in the DOM.\r\n */\r\nexport type DynamicInitializationElement<Args extends any[]> =\r\n  /** A function which returns the the DynamicInitialization value. */\r\n  | ((...args: Args) => DynamicInitialization)\r\n  /** The DynamicInitialization value. */\r\n  | DynamicInitialization;\r\n\r\n/**\r\n * Describes how a OverlayScrollbar instance should initialize.\r\n */\r\nexport type Initialization = {\r\n  /**\r\n   * Customizes which elements are generated and used.\r\n   * If a function is passed to any of the fields, it receives the `target` element as its argument.\r\n   * Any passed function should be a \"pure\" function. (same input produces same output)\r\n   */\r\n  elements: {\r\n    /**\r\n     * Assign a custom element as the host element.\r\n     * Only relevant if the target element is a Textarea.\r\n     */\r\n    host: StaticInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the viewport element. */\r\n    viewport: StaticInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the padding element or force the element not to be generated. */\r\n    padding: DynamicInitializationElement<[target: InitializationTargetElement]>;\r\n    /** Assign a custom element as the content element or force the element not to be generated. */\r\n    content: DynamicInitializationElement<[target: InitializationTargetElement]>;\r\n  };\r\n  /**\r\n   * Customizes elements related to the scrollbars.\r\n   * If a function is passed, it receives the `target`, `host` and `viewport` element as arguments.\r\n   */\r\n  scrollbars: {\r\n    slot: DynamicInitializationElement<\r\n      [target: InitializationTargetElement, host: HTMLElement, viewport: HTMLElement]\r\n    >;\r\n  };\r\n  /**\r\n   * Customizes the cancelation behavior.\r\n   */\r\n  cancel: {\r\n    /** Whether the initialization shall be canceled if the native scrollbars are overlaid. */\r\n    nativeScrollbarsOverlaid: boolean;\r\n    /**\r\n     * Whether the initialization shall be canceled if its applied to a body element.\r\n     * With `true` an initialization is always canceled, with `false` its never canceled.\r\n     * With `null` the initialization will only be canceled when the initialization would affect the browsers functionality. (window.scrollTo, mobile browser behavior etc.)\r\n     */\r\n    body: boolean | null;\r\n  };\r\n};\r\n\r\nexport type PartialInitialization = DeepPartial<Initialization>;\r\n\r\n/** The initialization target element. */\r\nexport type InitializationTargetElement = HTMLElement; // | HTMLTextAreaElement;\r\n\r\n/**\r\n * The initialization target object.\r\n * OverlayScrollbars({ target: myElement }) is equivalent to OverlayScrollbars(myElement).\r\n */\r\nexport type InitializationTargetObject = PartialInitialization & {\r\n  target: InitializationTargetElement;\r\n};\r\n\r\n/** The initialization target. */\r\nexport type InitializationTarget = InitializationTargetElement | InitializationTargetObject;\r\n\r\nexport const resolveInitialization = <T extends StaticInitialization | DynamicInitialization>(\r\n  args: any,\r\n  value: any\r\n): T => (isFunction(value) ? value.apply(0, args) : value);\r\n\r\nexport const staticInitializationElement = <Args extends any[]>(\r\n  args: Args,\r\n  fallbackStaticInitializationElement: FallbackStaticInitializtationElement<Args>,\r\n  defaultStaticInitializationElement: StaticInitializationElement<Args>,\r\n  staticInitializationElementValue?: StaticInitializationElement<Args>\r\n): HTMLElement => {\r\n  const staticInitialization = isUndefined(staticInitializationElementValue)\r\n    ? defaultStaticInitializationElement\r\n    : staticInitializationElementValue;\r\n  const resolvedInitialization = resolveInitialization<StaticInitialization>(\r\n    args,\r\n    staticInitialization\r\n  );\r\n  return resolvedInitialization || fallbackStaticInitializationElement.apply(0, args);\r\n};\r\n\r\nexport const dynamicInitializationElement = <Args extends any[]>(\r\n  args: Args,\r\n  fallbackDynamicInitializationElement: FallbackDynamicInitializtationElement<Args>,\r\n  defaultDynamicInitializationElement: DynamicInitializationElement<Args>,\r\n  dynamicInitializationElementValue?: DynamicInitializationElement<Args>\r\n): HTMLElement | false => {\r\n  const dynamicInitialization = isUndefined(dynamicInitializationElementValue)\r\n    ? defaultDynamicInitializationElement\r\n    : dynamicInitializationElementValue;\r\n  const resolvedInitialization = resolveInitialization<DynamicInitialization>(\r\n    args,\r\n    dynamicInitialization\r\n  );\r\n  return (\r\n    !!resolvedInitialization &&\r\n    (isHTMLElement(resolvedInitialization)\r\n      ? resolvedInitialization\r\n      : fallbackDynamicInitializationElement.apply(0, args))\r\n  );\r\n};\r\n\r\nexport const cancelInitialization = (\r\n  isBody: boolean,\r\n  cancelInitializationValue?: DeepPartial<Initialization['cancel']> | false | null | undefined\r\n): boolean => {\r\n  const { nativeScrollbarsOverlaid, body } = cancelInitializationValue || {};\r\n  const { _nativeScrollbarsOverlaid, _nativeScrollbarsHiding, _getDefaultInitialization } =\r\n    getEnvironment();\r\n  const { nativeScrollbarsOverlaid: defaultNativeScrollbarsOverlaid, body: defaultbody } =\r\n    _getDefaultInitialization().cancel;\r\n\r\n  const resolvedNativeScrollbarsOverlaid =\r\n    nativeScrollbarsOverlaid ?? defaultNativeScrollbarsOverlaid;\r\n  const resolvedDocumentScrollingElement = isUndefined(body) ? defaultbody : body;\r\n\r\n  const finalNativeScrollbarsOverlaid =\r\n    (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y) &&\r\n    resolvedNativeScrollbarsOverlaid;\r\n  const finalDocumentScrollingElement =\r\n    isBody &&\r\n    (isNull(resolvedDocumentScrollingElement)\r\n      ? !_nativeScrollbarsHiding\r\n      : resolvedDocumentScrollingElement);\r\n\r\n  return !!finalNativeScrollbarsOverlaid || !!finalDocumentScrollingElement;\r\n};\r\n","import type { OverlayScrollbars } from '~/overlayscrollbars';\n\nconst targetInstanceMap: WeakMap<Element, OverlayScrollbars> = new WeakMap();\n\n/**\n * Adds the given OverlayScrollbars instance to the given element.\n * @param target The element which is the target of the OverlayScrollbars instance.\n * @param osInstance The OverlayScrollbars instance.\n */\nexport const addInstance = (target: Element, osInstance: OverlayScrollbars): void => {\n  targetInstanceMap.set(target, osInstance);\n};\n\n/**\n * Removes a OverlayScrollbars instance from the given element.\n * @param target The element from which its OverlayScrollbars instance shall be removed.\n */\nexport const removeInstance = (target: Element): void => {\n  targetInstanceMap.delete(target);\n};\n\n/**\n * Gets the OverlayScrollbars from the given element or undefined if it doesn't have one.\n * @param target The element of which its OverlayScrollbars instance shall be get.\n */\nexport const getInstance = (target: Element): OverlayScrollbars | undefined =>\n  targetInstanceMap.get(target);\n","import {\r\n  each,\r\n  noop,\r\n  debounce,\r\n  MutationObserverConstructor,\r\n  addEventListener,\r\n  attr,\r\n  is,\r\n  find,\r\n  push,\r\n  runEachAndClear,\r\n  bind,\r\n  isEmptyArray,\r\n  deduplicateArray,\r\n  inArray,\r\n  concat,\r\n} from '~/support';\r\n\r\ntype DOMContentObserverCallback = (contentChangedThroughEvent: boolean) => any;\r\n\r\ntype DOMTargetObserverCallback = (targetChangedAttrs: string[], targetStyleChanged: boolean) => any;\r\n\r\ninterface DOMObserverOptionsBase {\r\n  _attributes?: string[];\r\n  /**\r\n   * A function which can ignore a changed attribute if it returns true.\r\n   * for DOMTargetObserver this applies to the changes to the observed target\r\n   * for DOMContentObserver this applies to changes to nested targets -> nested targets are elements which match the \"_nestedTargetSelector\" selector\r\n   */\r\n  _ignoreTargetChange?: DOMObserverIgnoreTargetChange;\r\n}\r\n\r\ninterface DOMContentObserverOptions extends DOMObserverOptionsBase {\r\n  _eventContentChange?: DOMObserverEventContentChange; // [selector, eventname(s) | function returning eventname(s)] -> eventnames divided by whitespaces\r\n  _nestedTargetSelector?: string;\r\n  _ignoreContentChange?: DOMObserverIgnoreContentChange; // function which will prevent marking certain dom changes as content change if it returns true\r\n}\r\n\r\ninterface DOMTargetObserverOptions extends DOMObserverOptionsBase {\r\n  /**\r\n   * Marks certain attributes as style changing, should be a subset of the _attributes prop.\r\n   * Used to set the \"targetStyleChanged\" param in the DOMTargetObserverCallback.\r\n   */\r\n  _styleChangingAttributes?: string[];\r\n}\r\n\r\ntype ContentChangeArrayItem = [selector?: string, eventNames?: string] | null | undefined;\r\n\r\nexport type DOMObserverEventContentChange =\r\n  | Array<ContentChangeArrayItem>\r\n  | false\r\n  | null\r\n  | undefined;\r\n\r\nexport type DOMObserverIgnoreContentChange = (\r\n  mutation: MutationRecord,\r\n  isNestedTarget: boolean,\r\n  domObserverTarget: HTMLElement,\r\n  domObserverOptions?: DOMContentObserverOptions\r\n) => boolean;\r\n\r\nexport type DOMObserverIgnoreTargetChange = (\r\n  target: Node,\r\n  attributeName: string,\r\n  oldAttributeValue: string | null,\r\n  newAttributeValue: string | null\r\n) => boolean;\r\n\r\nexport type DOMObserverCallback<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverCallback\r\n  : DOMTargetObserverCallback;\r\n\r\nexport type DOMObserverOptions<ContentObserver extends boolean> = ContentObserver extends true\r\n  ? DOMContentObserverOptions\r\n  : DOMTargetObserverOptions;\r\n\r\nexport type DOMObserver<ContentObserver extends boolean> = [\r\n  construct: () => () => void,\r\n  update: () => void | false | Parameters<DOMObserverCallback<ContentObserver>>\r\n];\r\n\r\ntype EventContentChangeUpdateElement = (\r\n  getElements?: (selector: string) => Node[],\r\n  removed?: boolean\r\n) => void;\r\ntype EventContentChange = [destroy: () => void, updateElements: EventContentChangeUpdateElement];\r\n\r\n/**\r\n * Creates a set of helper functions to observe events of elements inside the target element.\r\n * @param target The target element of which the children elements shall be observed. (not only direct children but also nested ones)\r\n * @param eventContentChange The event content change array. (array of tuples: selector and eventname(s))\r\n * @param callback Callback which is called if one of the elements emits the corresponding event.\r\n * @returns A object which contains a set of helper functions to destroy and update the observation of elements.\r\n */\r\nconst createEventContentChange = (\r\n  target: HTMLElement,\r\n  callback: (...args: any) => any,\r\n  eventContentChange?: DOMObserverEventContentChange\r\n): EventContentChange => {\r\n  let destroyed = false;\r\n  const map = eventContentChange ? new WeakMap<Node, (() => any)[]>() : false; // weak map to prevent memory leak for detached elements\r\n  const destroy = () => {\r\n    destroyed = true;\r\n  };\r\n  const updateElements: EventContentChangeUpdateElement = (getElements) => {\r\n    if (map && eventContentChange) {\r\n      const eventElmList = eventContentChange.map((item) => {\r\n        const [selector, eventNames] = item || [];\r\n        const elements = eventNames && selector ? (getElements || find)(selector, target) : [];\r\n        return [elements, eventNames] as const;\r\n      });\r\n\r\n      each(eventElmList, (item) =>\r\n        each(item[0], (elm) => {\r\n          const eventNames = item[1];\r\n          const entries = map.get(elm) || [];\r\n          const isTargetChild = target.contains(elm);\r\n\r\n          if (isTargetChild && eventNames) {\r\n            const removeListener = addEventListener(elm, eventNames.trim(), (event: Event) => {\r\n              if (destroyed) {\r\n                removeListener();\r\n                map.delete(elm);\r\n              } else {\r\n                callback(event);\r\n              }\r\n            });\r\n            map.set(elm, push(entries, removeListener));\r\n          } else {\r\n            runEachAndClear(entries);\r\n            map.delete(elm);\r\n          }\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  updateElements();\r\n\r\n  return [destroy, updateElements];\r\n};\r\n\r\n/**\r\n * Creates a DOM observer which observes DOM changes to either the target element or its children.\r\n * @param target The element which shall be observed.\r\n * @param isContentObserver Whether this observer is just observing the target or just the targets children. (not only direct children but also nested ones)\r\n * @param callback The callback which gets called if a change was detected.\r\n * @param options The options for DOM change detection.\r\n * @returns A object which represents the instance of the DOM observer.\r\n */\r\nexport const createDOMObserver = <ContentObserver extends boolean>(\r\n  target: HTMLElement,\r\n  isContentObserver: ContentObserver,\r\n  callback: DOMObserverCallback<ContentObserver>,\r\n  options?: DOMObserverOptions<ContentObserver>\r\n): DOMObserver<ContentObserver> => {\r\n  let isConnected = false;\r\n  const {\r\n    _attributes,\r\n    _styleChangingAttributes,\r\n    _eventContentChange,\r\n    _nestedTargetSelector,\r\n    _ignoreTargetChange,\r\n    _ignoreContentChange,\r\n  } = (options as DOMContentObserverOptions & DOMTargetObserverOptions) || {};\r\n  const debouncedEventContentChange = debounce(\r\n    () => isConnected && (callback as DOMContentObserverCallback)(true),\r\n    { _timeout: 33, _maxDelay: 99 }\r\n  );\r\n  const [destroyEventContentChange, updateEventContentChangeElements] = createEventContentChange(\r\n    target,\r\n    debouncedEventContentChange,\r\n    _eventContentChange\r\n  );\r\n\r\n  // MutationObserver\r\n  const finalAttributes = _attributes || [];\r\n  const finalStyleChangingAttributes = _styleChangingAttributes || [];\r\n  const observedAttributes = concat(finalAttributes, finalStyleChangingAttributes);\r\n  const observerCallback = (\r\n    fromRecords: boolean,\r\n    mutations: MutationRecord[]\r\n  ): void | Parameters<DOMObserverCallback<ContentObserver>> => {\r\n    if (!isEmptyArray(mutations)) {\r\n      const ignoreTargetChange = _ignoreTargetChange || noop;\r\n      const ignoreContentChange = _ignoreContentChange || noop;\r\n      const totalChangedNodes: Node[] = [];\r\n      const targetChangedAttrs: string[] = [];\r\n      let targetStyleChanged: boolean | '' | null | undefined = false;\r\n      let contentChanged: boolean | '' | null | undefined = false;\r\n      let childListChanged: boolean | '' | null | undefined = false;\r\n\r\n      each(mutations, (mutation) => {\r\n        const {\r\n          attributeName,\r\n          target: mutationTarget,\r\n          type,\r\n          oldValue,\r\n          addedNodes,\r\n          removedNodes,\r\n        } = mutation;\r\n        const isAttributesType = type === 'attributes';\r\n        const isChildListType = type === 'childList';\r\n        const targetIsMutationTarget = target === mutationTarget;\r\n        const isAttrChange = isAttributesType && attributeName;\r\n        // isAttrChange check needed, otherwise mutationTarget might not be a valid HTMLElement\r\n        const attributeValue = isAttrChange\r\n          ? attr(mutationTarget as HTMLElement, attributeName || '')\r\n          : null;\r\n        const attributeChanged = isAttrChange && oldValue !== attributeValue;\r\n        const styleChangingAttrChanged =\r\n          inArray(finalStyleChangingAttributes, attributeName) && attributeChanged;\r\n\r\n        // if is content observer and something changed in children\r\n        if (isContentObserver && (isChildListType || !targetIsMutationTarget)) {\r\n          const contentAttrChanged = isAttributesType && attributeChanged;\r\n          const isNestedTarget =\r\n            contentAttrChanged &&\r\n            _nestedTargetSelector &&\r\n            is(mutationTarget, _nestedTargetSelector);\r\n          const baseAssertion = isNestedTarget\r\n            ? !ignoreTargetChange(mutationTarget, attributeName, oldValue, attributeValue)\r\n            : !isAttributesType || contentAttrChanged;\r\n          const contentFinalChanged =\r\n            baseAssertion && !ignoreContentChange(mutation, !!isNestedTarget, target, options);\r\n\r\n          each(addedNodes, (node) => push(totalChangedNodes, node));\r\n          each(removedNodes, (node) => push(totalChangedNodes, node));\r\n\r\n          contentChanged = contentChanged || contentFinalChanged;\r\n          childListChanged = childListChanged || isChildListType;\r\n        }\r\n        // if is target observer and target attr changed\r\n        if (\r\n          !isContentObserver &&\r\n          targetIsMutationTarget &&\r\n          attributeChanged &&\r\n          !ignoreTargetChange(mutationTarget, attributeName!, oldValue, attributeValue)\r\n        ) {\r\n          push(targetChangedAttrs, attributeName);\r\n          targetStyleChanged = targetStyleChanged || styleChangingAttrChanged;\r\n        }\r\n      });\r\n\r\n      // adds / removes the new elements from the event content change\r\n      updateEventContentChangeElements((selector: string) =>\r\n        deduplicateArray(totalChangedNodes).reduce<Node[]>((arr, node) => {\r\n          push(arr, find(selector, node));\r\n          return is(node, selector) ? push(arr, node) : arr;\r\n        }, [])\r\n      );\r\n\r\n      if (isContentObserver) {\r\n        !fromRecords && contentChanged && (callback as DOMContentObserverCallback)(false);\r\n        return [false] satisfies Parameters<DOMObserverCallback<true>> as Parameters<\r\n          DOMObserverCallback<ContentObserver>\r\n        >;\r\n      }\r\n\r\n      if (!isEmptyArray(targetChangedAttrs) || targetStyleChanged) {\r\n        const args = [\r\n          deduplicateArray(targetChangedAttrs),\r\n          targetStyleChanged,\r\n        ] satisfies Parameters<DOMTargetObserverCallback> & Parameters<DOMObserverCallback<false>>;\r\n        !fromRecords && (callback as DOMTargetObserverCallback).apply(0, args);\r\n\r\n        return args as Parameters<DOMObserverCallback<ContentObserver>>;\r\n      }\r\n    }\r\n  };\r\n  const mutationObserver: MutationObserver = new MutationObserverConstructor!(\r\n    bind(observerCallback, false)\r\n  );\r\n\r\n  return [\r\n    () => {\r\n      mutationObserver.observe(target, {\r\n        attributes: true,\r\n        attributeOldValue: true,\r\n        attributeFilter: observedAttributes,\r\n        subtree: isContentObserver,\r\n        childList: isContentObserver,\r\n        characterData: isContentObserver,\r\n      });\r\n      isConnected = true;\r\n\r\n      return () => {\r\n        if (isConnected) {\r\n          destroyEventContentChange();\r\n          mutationObserver.disconnect();\r\n          isConnected = false;\r\n        }\r\n      };\r\n    },\r\n    () => {\r\n      if (isConnected) {\r\n        debouncedEventContentChange._flush();\r\n        return observerCallback(true, mutationObserver.takeRecords());\r\n      }\r\n    },\r\n  ];\r\n};\r\n","import {\r\n  createCache,\r\n  createDOM,\r\n  runEachAndClear,\r\n  addEventListener,\r\n  addClass,\r\n  push,\r\n  ResizeObserverConstructor,\r\n  removeClass,\r\n  stopPropagation,\r\n  appendChildren,\r\n  getDirectionIsRTL,\r\n  domRectHasDimensions,\r\n  bind,\r\n  noop,\r\n  isArray,\r\n  getRTLCompatibleScrollPosition,\r\n  scrollElementTo,\r\n  domRectAppeared,\r\n  concat,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameSizeObserver,\r\n  classNameSizeObserverAppear,\r\n  classNameSizeObserverListener,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, sizeObserverPluginName } from '~/plugins';\r\nimport type { CacheValues } from '~/support';\r\nimport type { SizeObserverPlugin } from '~/plugins';\r\n\r\nexport interface SizeObserverOptions {\r\n  /** Whether direction changes should be observed. */\r\n  _direction?: boolean;\r\n  /** Whether appearing should be observed. */\r\n  _appear?: boolean;\r\n}\r\n\r\nexport interface SizeObserverCallbackParams {\r\n  _sizeChanged: boolean;\r\n  _directionIsRTLCache?: CacheValues<boolean>;\r\n  _appear?: boolean;\r\n}\r\n\r\nexport type SizeObserver = () => () => void;\r\n\r\n/**\r\n * Creates a size observer which observes any size, padding, border, margin and box-sizing changes of the target element. Depending on the options also direction and appear can be observed.\r\n * @param target The target element which shall be observed.\r\n * @param onSizeChangedCallback The callback which gets called after a size change was detected.\r\n * @param options The options for size detection, whether to observe also direction and appear.\r\n * @returns A object which represents the instance of the size observer.\r\n */\r\nexport const createSizeObserver = (\r\n  target: HTMLElement,\r\n  onSizeChangedCallback: (params: SizeObserverCallbackParams) => any,\r\n  options?: SizeObserverOptions\r\n): SizeObserver => {\r\n  const scrollAmount = 3333333;\r\n  const { _direction: observeDirectionChange, _appear: observeAppearChange } = options || {};\r\n  const sizeObserverPlugin =\r\n    getStaticPluginModuleInstance<typeof SizeObserverPlugin>(sizeObserverPluginName);\r\n  const { _rtlScrollBehavior: rtlScrollBehavior } = getEnvironment();\r\n  const getIsDirectionRTL = bind(getDirectionIsRTL, target);\r\n  const [updateResizeObserverContentRectCache] = createCache<DOMRectReadOnly | false>({\r\n    _initialValue: false,\r\n    _alwaysUpdateValues: true,\r\n  });\r\n\r\n  return () => {\r\n    const destroyFns: (() => void)[] = [];\r\n    const baseElements = createDOM(\r\n      `<div class=\"${classNameSizeObserver}\"><div class=\"${classNameSizeObserverListener}\"></div></div>`\r\n    );\r\n    const sizeObserver = baseElements[0] as HTMLElement;\r\n    const listenerElement = sizeObserver.firstChild as HTMLElement;\r\n    const onSizeChangedCallbackProxy = (\r\n      sizeChangedContext?: CacheValues<boolean> | ResizeObserverEntry | boolean\r\n    ) => {\r\n      const isResizeObserverCall = sizeChangedContext instanceof ResizeObserverEntry;\r\n      const hasDirectionCache = !isResizeObserverCall && isArray(sizeChangedContext);\r\n\r\n      let skip = false;\r\n      let appear = false;\r\n      let doDirectionScroll = true; // always true if sizeChangedContext is Event (appear callback or RO. Polyfill)\r\n\r\n      // if triggered from RO.\r\n      if (isResizeObserverCall) {\r\n        const [currRContentRect, , prevContentRect] = updateResizeObserverContentRectCache(\r\n          sizeChangedContext.contentRect\r\n        );\r\n        const hasDimensions = domRectHasDimensions(currRContentRect);\r\n        const appeared = domRectAppeared(currRContentRect, prevContentRect);\r\n        const firstCall = !prevContentRect;\r\n        appear = firstCall || appeared;\r\n        skip = !appear && !hasDimensions; // skip if display is none or when window resize\r\n\r\n        doDirectionScroll = !skip; // direction scroll when not skipping\r\n      }\r\n      // else if its triggered with DirectionCache\r\n      else if (hasDirectionCache) {\r\n        [, doDirectionScroll] = sizeChangedContext; // direction scroll when DirectionCache changed, false otherwise\r\n      }\r\n      // else if it triggered with appear from polyfill\r\n      else {\r\n        appear = sizeChangedContext === true;\r\n      }\r\n\r\n      if (observeDirectionChange && doDirectionScroll) {\r\n        const rtl = hasDirectionCache ? sizeChangedContext[0] : getDirectionIsRTL(sizeObserver);\r\n        scrollElementTo(sizeObserver, {\r\n          x: getRTLCompatibleScrollPosition(scrollAmount, scrollAmount, rtl && rtlScrollBehavior),\r\n          y: scrollAmount,\r\n        });\r\n      }\r\n\r\n      if (!skip) {\r\n        onSizeChangedCallback({\r\n          _directionIsRTLCache: hasDirectionCache ? sizeChangedContext : undefined,\r\n          _sizeChanged: !hasDirectionCache,\r\n          _appear: appear,\r\n        });\r\n      }\r\n    };\r\n\r\n    if (ResizeObserverConstructor) {\r\n      const resizeObserverInstance = new ResizeObserverConstructor((entries) =>\r\n        onSizeChangedCallbackProxy(entries.pop())\r\n      );\r\n      resizeObserverInstance.observe(listenerElement);\r\n      push(destroyFns, () => {\r\n        resizeObserverInstance.disconnect();\r\n      });\r\n    } else if (sizeObserverPlugin) {\r\n      const [pluginAppearCallback, pluginDestroyFns] = sizeObserverPlugin(\r\n        listenerElement,\r\n        onSizeChangedCallbackProxy,\r\n        observeAppearChange\r\n      );\r\n      push(\r\n        destroyFns,\r\n        concat(\r\n          [\r\n            addClass(sizeObserver, classNameSizeObserverAppear),\r\n            addEventListener(sizeObserver, 'animationstart', pluginAppearCallback),\r\n          ],\r\n          pluginDestroyFns\r\n        )\r\n      );\r\n    } else {\r\n      return noop;\r\n    }\r\n\r\n    if (observeDirectionChange) {\r\n      const [updateDirectionIsRTLCache] = createCache(\r\n        {\r\n          _initialValue: undefined,\r\n        },\r\n        getIsDirectionRTL\r\n      );\r\n\r\n      push(\r\n        destroyFns,\r\n        addEventListener(sizeObserver, 'scroll', (event) => {\r\n          const directionIsRTLCacheValues = updateDirectionIsRTLCache();\r\n          const [directionIsRTLCache, directionIsRTLCacheChanged, directionIsRTLCachePrevious] =\r\n            directionIsRTLCacheValues;\r\n          if (directionIsRTLCacheChanged) {\r\n            removeClass(listenerElement, 'ltr rtl');\r\n            addClass(listenerElement, directionIsRTLCache ? 'rtl' : 'ltr');\r\n\r\n            onSizeChangedCallbackProxy([\r\n              !!directionIsRTLCache,\r\n              directionIsRTLCacheChanged,\r\n              directionIsRTLCachePrevious,\r\n            ]);\r\n          }\r\n\r\n          stopPropagation(event);\r\n        })\r\n      );\r\n    }\r\n\r\n    return bind(runEachAndClear, push(destroyFns, appendChildren(target, sizeObserver)));\r\n  };\r\n};\r\n","import {\r\n  createDiv,\r\n  offsetSize,\r\n  runEachAndClear,\r\n  createCache,\r\n  push,\r\n  IntersectionObserverConstructor,\r\n  appendChildren,\r\n  bind,\r\n} from '~/support';\r\nimport { createSizeObserver } from '~/observers/sizeObserver';\r\nimport { classNameTrinsicObserver } from '~/classnames';\r\nimport type { WH, CacheValues } from '~/support';\r\n\r\nexport type TrinsicObserverCallback = (heightIntrinsic: CacheValues<boolean>) => any;\r\nexport type TrinsicObserver = [\r\n  construct: () => () => void,\r\n  update: () => void | false | null | undefined | Parameters<TrinsicObserverCallback>\r\n];\r\n\r\n/**\r\n * Creates a trinsic observer which observes changes to intrinsic or extrinsic sizing for the height of the target element.\r\n * @param target The element which shall be observed.\r\n * @param onTrinsicChangedCallback The callback which gets called after a change was detected.\r\n * @returns A object which represents the instance of the trinsic observer.\r\n */\r\nexport const createTrinsicObserver = (\r\n  target: HTMLElement,\r\n  onTrinsicChangedCallback: TrinsicObserverCallback\r\n): TrinsicObserver => {\r\n  let intersectionObserverInstance: undefined | IntersectionObserver;\r\n  const isHeightIntrinsic = (ioEntryOrSize: IntersectionObserverEntry | WH<number>): boolean =>\r\n    (ioEntryOrSize as WH<number>).h === 0 ||\r\n    (ioEntryOrSize as IntersectionObserverEntry).isIntersecting ||\r\n    (ioEntryOrSize as IntersectionObserverEntry).intersectionRatio > 0;\r\n  const trinsicObserver = createDiv(classNameTrinsicObserver);\r\n  const [updateHeightIntrinsicCache] = createCache({\r\n    _initialValue: false,\r\n  });\r\n  const triggerOnTrinsicChangedCallback = (\r\n    updateValue: IntersectionObserverEntry | WH<number> | undefined,\r\n    fromRecords?: boolean\r\n  ): void | Parameters<TrinsicObserverCallback> => {\r\n    if (updateValue) {\r\n      const heightIntrinsic = updateHeightIntrinsicCache(isHeightIntrinsic(updateValue));\r\n      const [, heightIntrinsicChanged] = heightIntrinsic;\r\n      return (\r\n        heightIntrinsicChanged &&\r\n        !fromRecords &&\r\n        onTrinsicChangedCallback(heightIntrinsic) && [heightIntrinsic]\r\n      );\r\n    }\r\n  };\r\n  const intersectionObserverCallback = (\r\n    fromRecords: boolean,\r\n    entries: IntersectionObserverEntry[]\r\n  ) => triggerOnTrinsicChangedCallback(entries.pop(), fromRecords);\r\n\r\n  return [\r\n    () => {\r\n      const destroyFns: (() => void)[] = [];\r\n\r\n      if (IntersectionObserverConstructor) {\r\n        intersectionObserverInstance = new IntersectionObserverConstructor(\r\n          bind(intersectionObserverCallback, false),\r\n          { root: target }\r\n        );\r\n        intersectionObserverInstance.observe(trinsicObserver);\r\n        push(destroyFns, () => {\r\n          intersectionObserverInstance!.disconnect();\r\n        });\r\n      } else {\r\n        const onSizeChanged = () => {\r\n          const newSize = offsetSize(trinsicObserver);\r\n          triggerOnTrinsicChangedCallback(newSize);\r\n        };\r\n        push(destroyFns, createSizeObserver(trinsicObserver, onSizeChanged)());\r\n        onSizeChanged();\r\n      }\r\n\r\n      return bind(runEachAndClear, push(destroyFns, appendChildren(target, trinsicObserver)));\r\n    },\r\n    () =>\r\n      intersectionObserverInstance &&\r\n      intersectionObserverCallback(true, intersectionObserverInstance.takeRecords()),\r\n  ];\r\n};\r\n","import {\r\n  ResizeObserverConstructor,\r\n  assignDeep,\r\n  attr,\r\n  closest,\r\n  createCache,\r\n  debounce,\r\n  getDirectionIsRTL,\r\n  each,\r\n  equalWH,\r\n  fractionalSize,\r\n  isArray,\r\n  isFunction,\r\n  isNumber,\r\n  isString,\r\n  keys,\r\n  liesBetween,\r\n  removeAttr,\r\n  scrollSize,\r\n  getElmentScroll,\r\n  scrollElementTo,\r\n  inArray,\r\n  domRectAppeared,\r\n  concat,\r\n} from '~/support';\r\nimport { createDOMObserver, createSizeObserver, createTrinsicObserver } from '~/observers';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameScrollbar,\r\n  dataAttributeHost,\r\n  dataAttributeViewport,\r\n  dataValueHostOverflowVisible,\r\n  dataValueHostUpdating,\r\n  dataValueViewportArrange,\r\n  dataValueViewportOverflowVisible,\r\n} from '~/classnames';\r\nimport type { SizeObserverCallbackParams } from '~/observers';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport type { Setup, SetupUpdateInfo } from '~/setups';\r\nimport type { CacheValues, WH } from '~/support';\r\nimport type { PlainObject } from '~/typings';\r\n\r\nexport interface ObserversSetupState {\r\n  _heightIntrinsic: boolean;\r\n  _directionIsRTL: boolean;\r\n}\r\n\r\nexport interface ObserversSetupUpdateInfo extends SetupUpdateInfo {\r\n  _takeRecords?: boolean;\r\n}\r\n\r\nexport type ObserversSetupUpdateHints = {\r\n  _sizeChanged?: boolean;\r\n  _directionChanged?: boolean;\r\n  _heightIntrinsicChanged?: boolean;\r\n  _hostMutation?: boolean;\r\n  _contentMutation?: boolean;\r\n  _appear?: boolean;\r\n  _scrollbarSizeChanged?: boolean;\r\n};\r\n\r\nexport type ObserversSetup = Setup<\r\n  ObserversSetupUpdateInfo,\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints\r\n>;\r\n\r\nexport const createObserversSetup = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  onObserversUpdated: (updateHints: ObserversSetupUpdateHints) => void\r\n): ObserversSetup => {\r\n  let debounceTimeout: number | false | undefined;\r\n  let debounceMaxDelay: number | false | undefined;\r\n  let updateContentMutationObserver: (() => void) | undefined;\r\n  let destroyContentMutationObserver: (() => void) | undefined;\r\n  let prevContentRect: DOMRectReadOnly | undefined;\r\n\r\n  const { _nativeScrollbarsHiding } = getEnvironment();\r\n\r\n  const hostSelector = `[${dataAttributeHost}]`;\r\n\r\n  // TODO: observer textarea attrs if textarea\r\n\r\n  const viewportSelector = `[${dataAttributeViewport}]`;\r\n  const viewportAttrsFromTarget = ['tabindex'];\r\n  const baseStyleChangingAttrsTextarea = ['wrap', 'cols', 'rows'];\r\n  const baseStyleChangingAttrs = ['id', 'class', 'style', 'open'];\r\n\r\n  const state: ObserversSetupState = {\r\n    _heightIntrinsic: false,\r\n    _directionIsRTL: getDirectionIsRTL(structureSetupElements._host),\r\n  };\r\n  const {\r\n    _host,\r\n    _viewport,\r\n    _content,\r\n    _isTextarea,\r\n    _viewportIsTarget,\r\n    _viewportHasClass,\r\n    _viewportAddRemoveClass,\r\n  } = structureSetupElements;\r\n  const { _flexboxGlue, _addResizeListener } = getEnvironment();\r\n\r\n  const [updateContentSizeCache] = createCache<WH<number>>(\r\n    {\r\n      _equal: equalWH,\r\n      _initialValue: { w: 0, h: 0 },\r\n    },\r\n    () => {\r\n      const hasOver = _viewportHasClass(\r\n        dataValueViewportOverflowVisible,\r\n        dataValueHostOverflowVisible\r\n      );\r\n      const hasVpStyle = _viewportHasClass(dataValueViewportArrange, '');\r\n      const scrollOffset = hasVpStyle && getElmentScroll(_viewport);\r\n      _viewportAddRemoveClass(dataValueViewportOverflowVisible, dataValueHostOverflowVisible);\r\n      _viewportAddRemoveClass(dataValueViewportArrange, '');\r\n      _viewportAddRemoveClass('', dataValueHostUpdating, true);\r\n\r\n      const contentScroll = scrollSize(_content);\r\n      const viewportScroll = scrollSize(_viewport);\r\n      const fractional = fractionalSize(_viewport);\r\n\r\n      _viewportAddRemoveClass(\r\n        dataValueViewportOverflowVisible,\r\n        dataValueHostOverflowVisible,\r\n        hasOver\r\n      );\r\n      _viewportAddRemoveClass(dataValueViewportArrange, '', hasVpStyle);\r\n      _viewportAddRemoveClass('', dataValueHostUpdating);\r\n      scrollElementTo(_viewport, scrollOffset);\r\n\r\n      return {\r\n        w: viewportScroll.w + contentScroll.w + fractional.w,\r\n        h: viewportScroll.h + contentScroll.h + fractional.h,\r\n      };\r\n    }\r\n  );\r\n\r\n  const contentMutationObserverAttr = _isTextarea\r\n    ? baseStyleChangingAttrsTextarea\r\n    : concat(baseStyleChangingAttrs, baseStyleChangingAttrsTextarea);\r\n\r\n  const onObserversUpdatedDebounced = debounce(onObserversUpdated, {\r\n    _timeout: () => debounceTimeout,\r\n    _maxDelay: () => debounceMaxDelay,\r\n    _mergeParams(prev, curr) {\r\n      const [prevObj] = prev;\r\n      const [currObj] = curr;\r\n      return [\r\n        concat(keys(prevObj), keys(currObj)).reduce((obj, key) => {\r\n          obj[key] = prevObj[key as keyof typeof prevObj] || currObj[key as keyof typeof currObj];\r\n          return obj;\r\n        }, {} as PlainObject),\r\n      ] as [Partial<ObserversSetupUpdateHints>];\r\n    },\r\n  });\r\n\r\n  const updateViewportAttrsFromHost = (attributes?: string[]) => {\r\n    each(attributes || viewportAttrsFromTarget, (attribute) => {\r\n      if (inArray(viewportAttrsFromTarget, attribute)) {\r\n        const hostAttr = attr(_host, attribute);\r\n        if (isString(hostAttr)) {\r\n          attr(_viewport, attribute, hostAttr);\r\n        } else {\r\n          removeAttr(_viewport, attribute);\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const onTrinsicChanged = (\r\n    heightIntrinsicCache: CacheValues<boolean>,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const [heightIntrinsic, heightIntrinsicChanged] = heightIntrinsicCache;\r\n    const updateHints = {\r\n      _heightIntrinsicChanged: heightIntrinsicChanged,\r\n    };\r\n\r\n    assignDeep(state, { _heightIntrinsic: heightIntrinsic });\r\n    !fromRecords && onObserversUpdated(updateHints);\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const onSizeChanged = ({\r\n    _sizeChanged,\r\n    _directionIsRTLCache,\r\n    _appear,\r\n  }: SizeObserverCallbackParams) => {\r\n    const exclusiveSizeChange = _sizeChanged && !_appear && !_directionIsRTLCache;\r\n    const updateFn =\r\n      // use debounceed update:\r\n      // if native scrollbars hiding is supported\r\n      // and if the update is more than just a exclusive sizeChange (e.g. size change + appear, or size change + direction)\r\n      !exclusiveSizeChange && _nativeScrollbarsHiding\r\n        ? onObserversUpdatedDebounced\r\n        : onObserversUpdated;\r\n\r\n    const [directionIsRTL, directionIsRTLChanged] = _directionIsRTLCache || [];\r\n\r\n    _directionIsRTLCache && assignDeep(state, { _directionIsRTL: directionIsRTL });\r\n\r\n    updateFn({\r\n      _sizeChanged: _sizeChanged || _appear,\r\n      _appear,\r\n      _directionChanged: directionIsRTLChanged,\r\n    });\r\n  };\r\n\r\n  const onContentMutation = (\r\n    contentChangedThroughEvent: boolean,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const [, _contentMutation] = updateContentSizeCache();\r\n    const updateHints = {\r\n      _contentMutation,\r\n    };\r\n\r\n    // if contentChangedThroughEvent is true its already debounced\r\n    const updateFn = contentChangedThroughEvent ? onObserversUpdated : onObserversUpdatedDebounced;\r\n\r\n    _contentMutation && !fromRecords && updateFn(updateHints);\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const onHostMutation = (\r\n    targetChangedAttrs: string[],\r\n    targetStyleChanged: boolean,\r\n    fromRecords?: true\r\n  ): ObserversSetupUpdateHints => {\r\n    const updateHints = { _hostMutation: targetStyleChanged };\r\n\r\n    if (targetStyleChanged && !fromRecords) {\r\n      onObserversUpdatedDebounced(updateHints);\r\n    } else if (!_viewportIsTarget) {\r\n      updateViewportAttrsFromHost(targetChangedAttrs);\r\n    }\r\n\r\n    return updateHints;\r\n  };\r\n\r\n  const [constructTrinsicObserver, updateTrinsicObserver] =\r\n    _content || !_flexboxGlue ? createTrinsicObserver(_host, onTrinsicChanged) : [];\r\n\r\n  const constructSizeObserver =\r\n    !_viewportIsTarget &&\r\n    createSizeObserver(_host, onSizeChanged, {\r\n      _appear: true,\r\n      _direction: true,\r\n    });\r\n\r\n  const [constructHostMutationObserver, updateHostMutationObserver] = createDOMObserver(\r\n    _host,\r\n    false,\r\n    onHostMutation,\r\n    {\r\n      _styleChangingAttributes: baseStyleChangingAttrs,\r\n      _attributes: concat(baseStyleChangingAttrs, viewportAttrsFromTarget),\r\n    }\r\n  );\r\n\r\n  const viewportIsTargetResizeObserver =\r\n    _viewportIsTarget &&\r\n    ResizeObserverConstructor &&\r\n    new ResizeObserverConstructor((entries) => {\r\n      const currContentRect = entries[entries.length - 1].contentRect;\r\n      onSizeChanged({\r\n        _sizeChanged: true,\r\n        _appear: domRectAppeared(currContentRect, prevContentRect),\r\n      });\r\n      prevContentRect = currContentRect;\r\n    });\r\n\r\n  return [\r\n    () => {\r\n      // order is matter!\r\n      updateViewportAttrsFromHost();\r\n      viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.observe(_host);\r\n      const destroySizeObserver = constructSizeObserver && constructSizeObserver();\r\n      const destroyTrinsicObserver = constructTrinsicObserver && constructTrinsicObserver();\r\n      const destroyHostMutationObserver = constructHostMutationObserver();\r\n      const removeResizeListener = _addResizeListener((_scrollbarSizeChanged) => {\r\n        const [, _contentMutation] = updateContentSizeCache();\r\n        onObserversUpdatedDebounced({ _scrollbarSizeChanged, _contentMutation });\r\n      });\r\n\r\n      return () => {\r\n        viewportIsTargetResizeObserver && viewportIsTargetResizeObserver.disconnect();\r\n        destroySizeObserver && destroySizeObserver();\r\n        destroyTrinsicObserver && destroyTrinsicObserver();\r\n        destroyContentMutationObserver && destroyContentMutationObserver();\r\n        destroyHostMutationObserver();\r\n        removeResizeListener();\r\n      };\r\n    },\r\n    ({ _checkOption, _takeRecords, _force }) => {\r\n      const updateHints: ObserversSetupUpdateHints = {};\r\n\r\n      const [ignoreMutation] = _checkOption('update.ignoreMutation');\r\n      const [attributes, attributesChanged] = _checkOption('update.attributes');\r\n      const [elementEvents, elementEventsChanged] = _checkOption('update.elementEvents');\r\n      const [debounceValue, debounceChanged] = _checkOption('update.debounce');\r\n      const contentMutationObserverChanged = elementEventsChanged || attributesChanged;\r\n      const takeRecords = _takeRecords || _force;\r\n      const ignoreMutationFromOptions = (mutation: MutationRecord) =>\r\n        isFunction(ignoreMutation) && ignoreMutation(mutation);\r\n\r\n      if (contentMutationObserverChanged) {\r\n        updateContentMutationObserver && updateContentMutationObserver();\r\n        destroyContentMutationObserver && destroyContentMutationObserver();\r\n\r\n        const [construct, update] = createDOMObserver(\r\n          _content || _viewport,\r\n          true,\r\n          onContentMutation,\r\n          {\r\n            _attributes: concat(contentMutationObserverAttr, attributes || []),\r\n            _eventContentChange: elementEvents,\r\n            _nestedTargetSelector: hostSelector,\r\n            _ignoreContentChange: (mutation, isNestedTarget) => {\r\n              const { target: mutationTarget, attributeName } = mutation;\r\n              const ignore =\r\n                !isNestedTarget && attributeName && !_viewportIsTarget\r\n                  ? liesBetween(mutationTarget, hostSelector, viewportSelector)\r\n                  : false;\r\n              return (\r\n                ignore ||\r\n                !!closest(mutationTarget, `.${classNameScrollbar}`) || // ignore explicitely all scrollbar elements\r\n                !!ignoreMutationFromOptions(mutation)\r\n              );\r\n            },\r\n          }\r\n        );\r\n\r\n        destroyContentMutationObserver = construct();\r\n        updateContentMutationObserver = update;\r\n      }\r\n\r\n      if (debounceChanged) {\r\n        onObserversUpdatedDebounced._flush();\r\n        if (isArray(debounceValue)) {\r\n          const timeout = debounceValue[0];\r\n          const maxWait = debounceValue[1];\r\n          debounceTimeout = isNumber(timeout) && timeout;\r\n          debounceMaxDelay = isNumber(maxWait) && maxWait;\r\n        } else if (isNumber(debounceValue)) {\r\n          debounceTimeout = debounceValue;\r\n          debounceMaxDelay = false;\r\n        } else {\r\n          debounceTimeout = false;\r\n          debounceMaxDelay = false;\r\n        }\r\n      }\r\n\r\n      if (takeRecords) {\r\n        const hostUpdateResult = updateHostMutationObserver();\r\n        const trinsicUpdateResult = updateTrinsicObserver && updateTrinsicObserver();\r\n        const contentUpdateResult =\r\n          updateContentMutationObserver && updateContentMutationObserver();\r\n\r\n        hostUpdateResult &&\r\n          assignDeep(\r\n            updateHints,\r\n            onHostMutation(hostUpdateResult[0], hostUpdateResult[1], takeRecords)\r\n          );\r\n\r\n        trinsicUpdateResult &&\r\n          assignDeep(updateHints, onTrinsicChanged(trinsicUpdateResult[0], takeRecords));\r\n\r\n        contentUpdateResult &&\r\n          assignDeep(updateHints, onContentMutation(contentUpdateResult[0], takeRecords));\r\n      }\r\n\r\n      return updateHints;\r\n    },\r\n    state,\r\n  ];\r\n};\r\n","import {\r\n  getBoundingClientRect,\r\n  getRTLCompatibleScrollBounds,\r\n  mathMax,\r\n  mathMin,\r\n  mathRound,\r\n  strHeight,\r\n  strWidth,\r\n} from '~/support';\r\nimport type { Environment } from '~/environment';\r\nimport type { StructureSetupState } from '~/setups';\r\nimport type { ScrollbarStructure } from './scrollbarsSetup.elements';\r\n\r\nconst capNumber = (min: number, max: number, number: number) => mathMax(min, mathMin(max, number));\r\n\r\nexport const getScrollbarHandleOffsetPercent = (\r\n  scrollPos: number,\r\n  overflowAmount: number,\r\n  rtlScrollBehavior?: Environment['rtlScrollBehavior'] | false\r\n) => {\r\n  const rawScrollPosMax = mathRound(overflowAmount);\r\n  const [scrollPositionMin, scrollPositionMax] = getRTLCompatibleScrollBounds(\r\n    rawScrollPosMax,\r\n    rtlScrollBehavior\r\n  );\r\n\r\n  const scrollPercentNegate = (scrollPositionMax - scrollPos) / scrollPositionMax;\r\n  const scrollPercentInvert = scrollPos / scrollPositionMin;\r\n  const scrollPercentNone = scrollPos / scrollPositionMax;\r\n  const rawScrollPercent = rtlScrollBehavior\r\n    ? rtlScrollBehavior.n\r\n      ? scrollPercentNegate\r\n      : rtlScrollBehavior.i\r\n      ? scrollPercentInvert\r\n      : scrollPercentNone\r\n    : scrollPercentNone;\r\n\r\n  return capNumber(0, 1, rawScrollPercent);\r\n};\r\n\r\n/**\r\n * Gets the scrollbar handle length ratio\r\n * @param structureSetupState The structure setup state.\r\n * @param isHorizontal Whether the axis is horizontal\r\n * @param scrollbarStructure The scrollbar structure. Only passed when the length ratio is calculated for the offset ratio (respects handle min. & max. size via. css)\r\n * @returns The scrollbar handle length ratio.\r\n */\r\nexport const getScrollbarHandleLengthRatio = (\r\n  structureSetupState: StructureSetupState,\r\n  isHorizontal?: boolean,\r\n  scrollbarStructure?: ScrollbarStructure\r\n) => {\r\n  if (scrollbarStructure) {\r\n    const axis = isHorizontal ? strWidth : strHeight;\r\n    const { _track, _handle } = scrollbarStructure;\r\n\r\n    const handleSize = getBoundingClientRect(_handle)[axis];\r\n    const trackSize = getBoundingClientRect(_track)[axis];\r\n\r\n    return capNumber(0, 1, handleSize / trackSize);\r\n  }\r\n\r\n  const axis = isHorizontal ? 'x' : 'y';\r\n  const { _overflowAmount, _overflowEdge } = structureSetupState;\r\n\r\n  const viewportSize = _overflowEdge[axis];\r\n  const overflowAmount = _overflowAmount[axis];\r\n\r\n  return capNumber(0, 1, viewportSize / (viewportSize + overflowAmount));\r\n};\r\n\r\nexport const getScrollbarHandleOffsetRatio = (\r\n  structureSetupState: StructureSetupState,\r\n  scrollbarStructure: ScrollbarStructure,\r\n  scrollPercent: number,\r\n  isHorizontal?: boolean\r\n) => {\r\n  const lengthRatio = getScrollbarHandleLengthRatio(\r\n    structureSetupState,\r\n    isHorizontal,\r\n    scrollbarStructure\r\n  );\r\n\r\n  return (1 / lengthRatio) * (1 - lengthRatio) * scrollPercent;\r\n};\r\n","import {\r\n  addClass,\r\n  appendChildren,\r\n  createDiv,\r\n  getDirectionIsRTL,\r\n  each,\r\n  getTrasformTranslateValue,\r\n  isBoolean,\r\n  isEmptyArray,\r\n  parent,\r\n  push,\r\n  removeClass,\r\n  removeElements,\r\n  runEachAndClear,\r\n  scrollT,\r\n  setT,\r\n  bind,\r\n  getElmentScroll,\r\n  inArray,\r\n  strWidth,\r\n  strHeight,\r\n  concat,\r\n  assignDeep,\r\n  ratioToCssPercent,\r\n  numberToCssPx,\r\n  setStyles,\r\n  createOrKeepArray,\r\n} from '~/support';\r\nimport {\r\n  classNameScrollbar,\r\n  classNameScrollbarHorizontal,\r\n  classNameScrollbarVertical,\r\n  classNameScrollbarTrack,\r\n  classNameScrollbarHandle,\r\n  classNameScrollbarTransitionless,\r\n  classNameScrollbarNoCssCustomProps,\r\n} from '~/classnames';\r\nimport { getEnvironment } from '~/environment';\r\nimport { dynamicInitializationElement as generalDynamicInitializationElement } from '~/initialization';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '~/initialization';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupEvents } from './scrollbarsSetup.events';\r\nimport type { StyleObject } from '~/typings';\r\nimport type { StructureSetupState } from '../structureSetup';\r\nimport {\r\n  getScrollbarHandleLengthRatio,\r\n  getScrollbarHandleOffsetPercent,\r\n  getScrollbarHandleOffsetRatio,\r\n} from './scrollbarsSetup.calculations';\r\n\r\nexport interface ScrollbarStructure {\r\n  _scrollbar: HTMLElement;\r\n  _track: HTMLElement;\r\n  _handle: HTMLElement;\r\n}\r\n\r\nexport interface ScrollbarsSetupElement {\r\n  _scrollTimeline: AnimationTimeline | undefined;\r\n  _scrollbarStructures: ScrollbarStructure[];\r\n  _clone: () => ScrollbarStructure;\r\n  _style: (\r\n    elmStyle: (\r\n      scrollbarStructure: ScrollbarStructure\r\n    ) => [HTMLElement | false | null | undefined, StyleObject]\r\n  ) => void;\r\n}\r\n\r\nexport interface ScrollbarsSetupElementsObj {\r\n  _scrollbarsAddRemoveClass: (\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean,\r\n    isHorizontal?: boolean\r\n  ) => void;\r\n  _refreshScrollbarsHandleLength: () => void;\r\n  _refreshScrollbarsHandleOffset: () => void;\r\n  _refreshScrollbarsScrollbarOffset: () => void;\r\n  _horizontal: ScrollbarsSetupElement;\r\n  _vertical: ScrollbarsSetupElement;\r\n}\r\n\r\nexport type ScrollbarsSetupElements = [\r\n  elements: ScrollbarsSetupElementsObj,\r\n  appendElements: () => () => void\r\n];\r\n\r\ntype PotentialAnimation = Animation | false | null | undefined;\r\n\r\nexport const createScrollbarsSetupElements = (\r\n  target: InitializationTarget,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState,\r\n  scrollbarsSetupEvents: ScrollbarsSetupEvents\r\n): ScrollbarsSetupElements => {\r\n  const { _getDefaultInitialization, _cssCustomProperties } = getEnvironment();\r\n  const { scrollbars: defaultInitScrollbars } = _getDefaultInitialization();\r\n  const { slot: defaultInitScrollbarsSlot } = defaultInitScrollbars;\r\n  const {\r\n    _target,\r\n    _host,\r\n    _viewport,\r\n    _targetIsElm,\r\n    _scrollOffsetElement,\r\n    _isBody,\r\n    _viewportIsTarget,\r\n  } = structureSetupElements;\r\n  const { scrollbars: scrollbarsInit } = (_targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { slot: initScrollbarsSlot } = scrollbarsInit || {};\r\n  const elementAnimations = new Map<HTMLElement, PotentialAnimation[]>();\r\n  const initScrollTimeline = (axis: 'x' | 'y') =>\r\n    scrollT &&\r\n    new scrollT({\r\n      source: _scrollOffsetElement,\r\n      axis,\r\n    });\r\n  const scrollTimelineX = initScrollTimeline('x');\r\n  const scrollTimelineY = initScrollTimeline('y');\r\n\r\n  const evaluatedScrollbarSlot = generalDynamicInitializationElement<\r\n    [InitializationTargetElement, HTMLElement, HTMLElement]\r\n  >(\r\n    [_target, _host, _viewport],\r\n    () => (_viewportIsTarget && _isBody ? _target : _host),\r\n    defaultInitScrollbarsSlot,\r\n    initScrollbarsSlot\r\n  );\r\n  const doRefreshScrollbarOffset = (scrollbar: HTMLElement) =>\r\n    _viewportIsTarget && !_isBody && parent(scrollbar) === _viewport;\r\n  const getScrollbarOffsetKeyframes = (\r\n    overflowAmount: number,\r\n    isHorizontal?: boolean,\r\n    directionRTL?: boolean\r\n  ) => {\r\n    const cushion = 0.5 * (directionRTL ? 1 : -1);\r\n    const directionRTLMultiplicator = isHorizontal && directionRTL ? -1 : 1;\r\n    return {\r\n      transform: [\r\n        getTrasformTranslateValue(numberToCssPx(0 + cushion), isHorizontal),\r\n        getTrasformTranslateValue(\r\n          numberToCssPx(overflowAmount * directionRTLMultiplicator + cushion),\r\n          isHorizontal\r\n        ),\r\n      ],\r\n    };\r\n  };\r\n  const addDirectionRTLKeyframes = (\r\n    keyframes: Keyframe[] | PropertyIndexedKeyframes | null,\r\n    directionRTL?: boolean\r\n  ) =>\r\n    assignDeep(\r\n      keyframes,\r\n      directionRTL\r\n        ? {\r\n            clear: ['left'], // dummy keyframe for direction rtl animation because of chrome bug\r\n          }\r\n        : {}\r\n    );\r\n  const cancelElementAnimations = (elements?: HTMLElement | HTMLElement[]) => {\r\n    elementAnimations.forEach((currAnimations, element) => {\r\n      const doCancel = elements ? inArray(createOrKeepArray(elements), element) : true;\r\n      if (doCancel) {\r\n        each(currAnimations || [], (animation) => {\r\n          animation && animation.cancel();\r\n        });\r\n        elementAnimations.delete(element);\r\n      }\r\n    });\r\n  };\r\n  const setElementAnimation = (\r\n    element: HTMLElement,\r\n    timeline: AnimationTimeline,\r\n    keyframes: Keyframe[] | PropertyIndexedKeyframes | null,\r\n    composite?: CompositeOperation\r\n  ) => {\r\n    const activeAnimations = elementAnimations.get(element) || [];\r\n    const activeAnimation = activeAnimations.find(\r\n      (animation) => animation && animation.timeline === timeline\r\n    );\r\n\r\n    if (activeAnimation) {\r\n      activeAnimation.effect = new KeyframeEffect(element, keyframes, { composite });\r\n    } else {\r\n      elementAnimations.set(\r\n        element,\r\n        concat(activeAnimations, [\r\n          element.animate(keyframes, {\r\n            timeline,\r\n            composite,\r\n          }),\r\n        ])\r\n      );\r\n    }\r\n  };\r\n  const scrollbarStructureAddRemoveClass = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    classNames: string | false | null | undefined,\r\n    add?: boolean\r\n  ) => {\r\n    const action = add ? addClass : removeClass;\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      action(scrollbarStructure._scrollbar, classNames);\r\n    });\r\n  };\r\n  const scrollbarStyle = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    elmStyle: (\r\n      scrollbarStructure: ScrollbarStructure\r\n    ) => [HTMLElement | false | null | undefined, StyleObject]\r\n  ) => {\r\n    each(scrollbarStructures, (scrollbarStructure) => {\r\n      const [elm, styles] = elmStyle(scrollbarStructure);\r\n      setStyles(elm, styles);\r\n    });\r\n  };\r\n  const scrollbarStructureRefreshHandleLength = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    scrollbarStyle(scrollbarStructures, (structure) => {\r\n      const { _handle } = structure;\r\n      return [\r\n        _handle,\r\n        {\r\n          [isHorizontal ? strWidth : strHeight]: ratioToCssPercent(\r\n            getScrollbarHandleLengthRatio(structureSetupState, isHorizontal)\r\n          ),\r\n        },\r\n      ];\r\n    });\r\n  };\r\n  const scrollbarStructureRefreshHandleOffset = (\r\n    scrollbarStructures: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => {\r\n    if (scrollTimelineX && scrollTimelineY) {\r\n      each(scrollbarStructures, (structure: ScrollbarStructure) => {\r\n        const { _scrollbar, _handle } = structure;\r\n        const getRatio = bind(getScrollbarHandleOffsetRatio, structureSetupState, structure);\r\n        const directionRTL = isHorizontal && getDirectionIsRTL(_scrollbar);\r\n        const start = getRatio(directionRTL ? 1 : 0, isHorizontal);\r\n        const end = getRatio(directionRTL ? 0 : 1, isHorizontal);\r\n        setElementAnimation(\r\n          _handle,\r\n          isHorizontal ? scrollTimelineX : scrollTimelineY,\r\n          addDirectionRTLKeyframes(\r\n            {\r\n              transform: [\r\n                getTrasformTranslateValue(ratioToCssPercent(start), isHorizontal),\r\n                getTrasformTranslateValue(ratioToCssPercent(end), isHorizontal),\r\n              ],\r\n            },\r\n            directionRTL\r\n          )\r\n        );\r\n      });\r\n    } else {\r\n      scrollbarStyle(scrollbarStructures, (structure) => {\r\n        const { _handle, _scrollbar } = structure;\r\n        const { _rtlScrollBehavior } = getEnvironment();\r\n        const axis = isHorizontal ? 'x' : 'y';\r\n        const { _overflowAmount } = structureSetupState;\r\n        const isRTL = getDirectionIsRTL(_scrollbar);\r\n\r\n        const offsetRatio = getScrollbarHandleOffsetRatio(\r\n          structureSetupState,\r\n          structure,\r\n          getScrollbarHandleOffsetPercent(\r\n            getElmentScroll(_scrollOffsetElement)[axis],\r\n            _overflowAmount[axis],\r\n            isHorizontal && isRTL && _rtlScrollBehavior\r\n          ),\r\n          isHorizontal\r\n        );\r\n\r\n        return [\r\n          _handle,\r\n          {\r\n            transform: getTrasformTranslateValue(ratioToCssPercent(offsetRatio), isHorizontal),\r\n          },\r\n        ];\r\n      });\r\n    }\r\n  };\r\n  const styleScrollbarPosition = (structure: ScrollbarStructure) => {\r\n    const { _scrollbar } = structure;\r\n    const elm = doRefreshScrollbarOffset(_scrollbar) && _scrollbar;\r\n    const { x, y } = getElmentScroll(_scrollOffsetElement);\r\n    return [\r\n      elm,\r\n      {\r\n        transform: elm\r\n          ? getTrasformTranslateValue({ x: numberToCssPx(x), y: numberToCssPx(y) })\r\n          : '',\r\n      },\r\n    ] as [HTMLElement | false, StyleObject];\r\n  };\r\n\r\n  const destroyFns: (() => void)[] = [];\r\n  const horizontalScrollbars: ScrollbarStructure[] = [];\r\n  const verticalScrollbars: ScrollbarStructure[] = [];\r\n\r\n  const scrollbarsAddRemoveClass = (\r\n    className: string | false | null | undefined,\r\n    add?: boolean,\r\n    onlyHorizontal?: boolean\r\n  ) => {\r\n    const singleAxis = isBoolean(onlyHorizontal);\r\n    const runHorizontal = singleAxis ? onlyHorizontal : true;\r\n    const runVertical = singleAxis ? !onlyHorizontal : true;\r\n    runHorizontal && scrollbarStructureAddRemoveClass(horizontalScrollbars, className, add);\r\n    runVertical && scrollbarStructureAddRemoveClass(verticalScrollbars, className, add);\r\n  };\r\n  const refreshScrollbarsHandleLength = () => {\r\n    scrollbarStructureRefreshHandleLength(horizontalScrollbars, true);\r\n    scrollbarStructureRefreshHandleLength(verticalScrollbars);\r\n  };\r\n  const refreshScrollbarsHandleOffset = () => {\r\n    scrollbarStructureRefreshHandleOffset(horizontalScrollbars, true);\r\n    scrollbarStructureRefreshHandleOffset(verticalScrollbars);\r\n  };\r\n  const refreshScrollbarsScrollbarOffset = () => {\r\n    if (_viewportIsTarget) {\r\n      if (scrollTimelineX && scrollTimelineY) {\r\n        const { _overflowAmount } = structureSetupState;\r\n        const directionRTL = !!horizontalScrollbars.find(({ _scrollbar }) =>\r\n          getDirectionIsRTL(_scrollbar)\r\n        );\r\n        const setScrollbarElementAnimation = (\r\n          scrollbar: HTMLElement,\r\n          timeline: AnimationTimeline,\r\n          overflowAmount: number,\r\n          isHorizontal?: boolean,\r\n          rtl?: boolean\r\n        ) =>\r\n          setElementAnimation(\r\n            scrollbar,\r\n            timeline,\r\n            addDirectionRTLKeyframes(\r\n              getScrollbarOffsetKeyframes(overflowAmount, isHorizontal, rtl),\r\n              directionRTL\r\n            ),\r\n            'add'\r\n          );\r\n\r\n        each(concat(verticalScrollbars, horizontalScrollbars), ({ _scrollbar }) => {\r\n          if (doRefreshScrollbarOffset(_scrollbar)) {\r\n            setScrollbarElementAnimation(\r\n              _scrollbar,\r\n              scrollTimelineX,\r\n              _overflowAmount.x,\r\n              true,\r\n              directionRTL\r\n            );\r\n            setScrollbarElementAnimation(_scrollbar, scrollTimelineY, _overflowAmount.y);\r\n          } else {\r\n            cancelElementAnimations(_scrollbar);\r\n          }\r\n        });\r\n      } else {\r\n        scrollbarStyle(horizontalScrollbars, styleScrollbarPosition);\r\n        scrollbarStyle(verticalScrollbars, styleScrollbarPosition);\r\n      }\r\n    }\r\n  };\r\n  const generateScrollbarDOM = (isHorizontal?: boolean): ScrollbarStructure => {\r\n    const scrollbarClassName = isHorizontal\r\n      ? classNameScrollbarHorizontal\r\n      : classNameScrollbarVertical;\r\n    const arrToPush = isHorizontal ? horizontalScrollbars : verticalScrollbars;\r\n    const transitionlessClass = isEmptyArray(arrToPush) ? classNameScrollbarTransitionless : '';\r\n    const scrollbar = createDiv(\r\n      `${classNameScrollbar} ${scrollbarClassName} ${transitionlessClass}`\r\n    );\r\n    const track = createDiv(classNameScrollbarTrack);\r\n    const handle = createDiv(classNameScrollbarHandle);\r\n    const result = {\r\n      _scrollbar: scrollbar,\r\n      _track: track,\r\n      _handle: handle,\r\n    };\r\n\r\n    if (!_cssCustomProperties) {\r\n      addClass(scrollbar, classNameScrollbarNoCssCustomProps);\r\n    }\r\n\r\n    push(arrToPush, result);\r\n    push(destroyFns, [\r\n      appendChildren(scrollbar, track),\r\n      appendChildren(track, handle),\r\n      bind(removeElements, scrollbar),\r\n      cancelElementAnimations,\r\n      scrollbarsSetupEvents(\r\n        result,\r\n        scrollbarsAddRemoveClass,\r\n        scrollbarStructureRefreshHandleOffset,\r\n        isHorizontal\r\n      ),\r\n    ]);\r\n\r\n    return result;\r\n  };\r\n  const generateHorizontalScrollbarStructure = bind(generateScrollbarDOM, true);\r\n  const generateVerticalScrollbarStructure = bind(generateScrollbarDOM, false);\r\n  const appendElements = () => {\r\n    appendChildren(evaluatedScrollbarSlot, horizontalScrollbars[0]._scrollbar);\r\n    appendChildren(evaluatedScrollbarSlot, verticalScrollbars[0]._scrollbar);\r\n\r\n    setT(() => {\r\n      scrollbarsAddRemoveClass(classNameScrollbarTransitionless);\r\n    }, 300);\r\n\r\n    return bind(runEachAndClear, destroyFns);\r\n  };\r\n\r\n  generateHorizontalScrollbarStructure();\r\n  generateVerticalScrollbarStructure();\r\n\r\n  return [\r\n    {\r\n      _refreshScrollbarsHandleLength: refreshScrollbarsHandleLength,\r\n      _refreshScrollbarsHandleOffset: refreshScrollbarsHandleOffset,\r\n      _refreshScrollbarsScrollbarOffset: refreshScrollbarsScrollbarOffset,\r\n      _scrollbarsAddRemoveClass: scrollbarsAddRemoveClass,\r\n      _horizontal: {\r\n        _scrollTimeline: scrollTimelineX,\r\n        _scrollbarStructures: horizontalScrollbars,\r\n        _clone: generateHorizontalScrollbarStructure,\r\n        _style: bind(scrollbarStyle, horizontalScrollbars),\r\n      },\r\n      _vertical: {\r\n        _scrollTimeline: scrollTimelineY,\r\n        _scrollbarStructures: verticalScrollbars,\r\n        _clone: generateVerticalScrollbarStructure,\r\n        _style: bind(scrollbarStyle, verticalScrollbars),\r\n      },\r\n    },\r\n    appendElements,\r\n  ];\r\n};\r\n","import {\r\n  getBoundingClientRect,\r\n  offsetSize,\r\n  addEventListener,\r\n  preventDefault,\r\n  runEachAndClear,\r\n  stopPropagation,\r\n  selfClearTimeout,\r\n  parent,\r\n  closest,\r\n  push,\r\n  attrClass,\r\n  bind,\r\n  mathRound,\r\n  strWidth,\r\n  strHeight,\r\n  getElmentScroll,\r\n  scrollElementTo,\r\n} from '~/support';\r\nimport { clickScrollPluginModuleName, getStaticPluginModuleInstance } from '~/plugins';\r\nimport {\r\n  classNameScrollbarHandle,\r\n  classNameScrollbarInteraction,\r\n  classNameScrollbarWheel,\r\n  dataAttributeHost,\r\n  dataValueHostScrollbarPressed,\r\n} from '~/classnames';\r\nimport type { ClickScrollPlugin } from '~/plugins';\r\nimport type { ReadonlyOptions } from '~/options';\r\nimport type { StructureSetupState } from '~/setups';\r\nimport type { ScrollbarsSetupElementsObj, ScrollbarStructure } from './scrollbarsSetup.elements';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\n\r\nexport type ScrollbarsSetupEvents = (\r\n  scrollbarStructure: ScrollbarStructure,\r\n  scrollbarsAddRemoveClass: ScrollbarsSetupElementsObj['_scrollbarsAddRemoveClass'],\r\n  refreshScrollbarStructuresHandleOffset: (\r\n    scrollbarStructure: ScrollbarStructure[],\r\n    isHorizontal?: boolean\r\n  ) => void,\r\n  isHorizontal?: boolean\r\n) => () => void;\r\n\r\nexport const createScrollbarsSetupEvents = (\r\n  options: ReadonlyOptions,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  structureSetupState: StructureSetupState\r\n): ScrollbarsSetupEvents => {\r\n  const { _host, _scrollOffsetElement, _documentElm } = structureSetupElements;\r\n\r\n  return (\r\n    scrollbarStructure,\r\n    scrollbarsAddRemoveClass,\r\n    refreshScrollbarStructuresHandleOffset,\r\n    isHorizontal\r\n  ) => {\r\n    const { _scrollbar, _track, _handle } = scrollbarStructure;\r\n    const [wheelTimeout, clearWheelTimeout] = selfClearTimeout(333);\r\n    const [requestHandleTransitionAnimationFrame, cancelHandleTransitionTimeout] =\r\n      selfClearTimeout();\r\n    const refreshHandleOffsetTransition = bind(\r\n      refreshScrollbarStructuresHandleOffset,\r\n      [scrollbarStructure],\r\n      isHorizontal\r\n    );\r\n    const scrollByFn = !!_scrollOffsetElement.scrollBy;\r\n\r\n    const clientXYKey = `client${isHorizontal ? 'X' : 'Y'}` as 'clientX' | 'clientY'; // for pointer event (can't use xy because of IE11)\r\n    const widthHeightKey = isHorizontal ? strWidth : strHeight;\r\n    const leftTopKey = isHorizontal ? 'left' : 'top'; // for BCR (can't use xy because of IE11)\r\n    const whKey = isHorizontal ? 'w' : 'h';\r\n    const xyKey = isHorizontal ? 'x' : 'y';\r\n\r\n    const isAffectingTransition = (event: TransitionEvent) =>\r\n      event.propertyName.indexOf(widthHeightKey) > -1;\r\n\r\n    const createInteractiveScrollEvents = () => {\r\n      const releasePointerCaptureEvents = 'pointerup pointerleave pointercancel lostpointercapture';\r\n\r\n      const createRelativeHandleMove =\r\n        (mouseDownScroll: number, invertedScale: number) => (deltaMovement: number) => {\r\n          const { _overflowAmount } = structureSetupState;\r\n          const handleTrackDiff = offsetSize(_track)[whKey] - offsetSize(_handle)[whKey];\r\n          const scrollDeltaPercent = (invertedScale * deltaMovement) / handleTrackDiff;\r\n          const scrollDelta = scrollDeltaPercent * _overflowAmount[xyKey];\r\n\r\n          scrollElementTo(_scrollOffsetElement, {\r\n            [xyKey]: mouseDownScroll + scrollDelta,\r\n          });\r\n        };\r\n\r\n      return addEventListener(_track, 'pointerdown', (pointerDownEvent: PointerEvent) => {\r\n        const isDragScroll =\r\n          closest(pointerDownEvent.target as Node, `.${classNameScrollbarHandle}`) === _handle;\r\n        const pointerCaptureElement = isDragScroll ? _handle : _track;\r\n\r\n        const scrollbarOptions = options.scrollbars;\r\n        const { button, isPrimary, pointerType } = pointerDownEvent;\r\n        const { pointers } = scrollbarOptions;\r\n\r\n        const continuePointerDown =\r\n          button === 0 &&\r\n          isPrimary &&\r\n          scrollbarOptions[isDragScroll ? 'dragScroll' : 'clickScroll'] &&\r\n          (pointers || []).includes(pointerType);\r\n\r\n        if (continuePointerDown) {\r\n          const instantClickScroll = !isDragScroll && pointerDownEvent.shiftKey;\r\n          const getHandleRect = bind(getBoundingClientRect, _handle);\r\n          const getTrackRect = bind(getBoundingClientRect, _track);\r\n          const getHandleOffset = (handleRect?: DOMRect, trackRect?: DOMRect) =>\r\n            (handleRect || getHandleRect())[leftTopKey] - (trackRect || getTrackRect())[leftTopKey];\r\n          const axisScale =\r\n            mathRound(getBoundingClientRect(_scrollOffsetElement)[widthHeightKey]) /\r\n              offsetSize(_scrollOffsetElement)[whKey] || 1;\r\n          const moveHandleRelative = createRelativeHandleMove(\r\n            getElmentScroll(_scrollOffsetElement)[xyKey] || 0,\r\n            1 / axisScale\r\n          );\r\n          const pointerDownOffset = pointerDownEvent[clientXYKey];\r\n          const handleRect = getHandleRect();\r\n          const trackRect = getTrackRect();\r\n          const handleLength = handleRect[widthHeightKey];\r\n          const handleCenter = getHandleOffset(handleRect, trackRect) + handleLength / 2;\r\n          const relativeTrackPointerOffset = pointerDownOffset - trackRect[leftTopKey];\r\n          const startOffset = isDragScroll ? 0 : relativeTrackPointerOffset - handleCenter;\r\n          const releasePointerCapture = (pointerUpEvent: PointerEvent) => {\r\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n            runEachAndClear(offFns);\r\n            pointerCaptureElement.releasePointerCapture(pointerUpEvent.pointerId);\r\n          };\r\n\r\n          const offFns = [\r\n            bind(attrClass, _host, dataAttributeHost, dataValueHostScrollbarPressed),\r\n            addEventListener(_documentElm, releasePointerCaptureEvents, releasePointerCapture),\r\n            addEventListener(_documentElm, 'selectstart', (event: Event) => preventDefault(event), {\r\n              _passive: false,\r\n            }),\r\n            addEventListener(_track, releasePointerCaptureEvents, releasePointerCapture),\r\n            addEventListener(_track, 'pointermove', (pointerMoveEvent: PointerEvent) => {\r\n              const relativeMovement = pointerMoveEvent[clientXYKey] - pointerDownOffset;\r\n\r\n              if (isDragScroll || instantClickScroll) {\r\n                moveHandleRelative(startOffset + relativeMovement);\r\n              }\r\n            }),\r\n          ];\r\n\r\n          attrClass(_host, dataAttributeHost, dataValueHostScrollbarPressed, true);\r\n          pointerCaptureElement.setPointerCapture(pointerDownEvent.pointerId);\r\n\r\n          if (instantClickScroll) {\r\n            moveHandleRelative(startOffset);\r\n          } else if (!isDragScroll) {\r\n            const animateClickScroll = getStaticPluginModuleInstance<typeof ClickScrollPlugin>(\r\n              clickScrollPluginModuleName\r\n            );\r\n\r\n            animateClickScroll &&\r\n              push(\r\n                offFns,\r\n                animateClickScroll(\r\n                  moveHandleRelative,\r\n                  getHandleOffset,\r\n                  startOffset,\r\n                  handleLength,\r\n                  relativeTrackPointerOffset\r\n                )\r\n              );\r\n          }\r\n        }\r\n      });\r\n    };\r\n\r\n    let wheelScrollBy = true;\r\n\r\n    return bind(runEachAndClear, [\r\n      addEventListener(_scrollbar, 'pointerenter', () => {\r\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, true);\r\n      }),\r\n      addEventListener(_scrollbar, 'pointerleave pointercancel', () => {\r\n        scrollbarsAddRemoveClass(classNameScrollbarInteraction, false);\r\n      }),\r\n      addEventListener(\r\n        _scrollbar,\r\n        'wheel',\r\n        (wheelEvent: WheelEvent) => {\r\n          const { deltaX, deltaY, deltaMode } = wheelEvent;\r\n\r\n          // the first wheel event is swallowed, simulate scroll to compensate for it\r\n          if (scrollByFn && wheelScrollBy && deltaMode === 0 && parent(_scrollbar) === _host) {\r\n            _scrollOffsetElement.scrollBy({\r\n              left: deltaX,\r\n              top: deltaY,\r\n              behavior: 'smooth',\r\n            });\r\n          }\r\n\r\n          wheelScrollBy = false;\r\n          scrollbarsAddRemoveClass(classNameScrollbarWheel, true);\r\n          wheelTimeout(() => {\r\n            wheelScrollBy = true;\r\n            scrollbarsAddRemoveClass(classNameScrollbarWheel);\r\n          });\r\n\r\n          preventDefault(wheelEvent);\r\n        },\r\n        { _passive: false, _capture: true }\r\n      ),\r\n      addEventListener(_handle, 'transitionstart', (event: TransitionEvent) => {\r\n        if (isAffectingTransition(event)) {\r\n          const animateHandleOffset = () => {\r\n            refreshHandleOffsetTransition();\r\n            requestHandleTransitionAnimationFrame(animateHandleOffset);\r\n          };\r\n          animateHandleOffset();\r\n        }\r\n      }),\r\n      addEventListener(_handle, 'transitionend transitioncancel', (event: TransitionEvent) => {\r\n        if (isAffectingTransition(event)) {\r\n          cancelHandleTransitionTimeout();\r\n          refreshHandleOffsetTransition();\r\n        }\r\n      }),\r\n      // rootClickStopPropagationEvent\r\n      addEventListener(\r\n        _scrollbar,\r\n        'mousedown',\r\n        bind(addEventListener, _documentElm, 'click', stopPropagation, {\r\n          _once: true,\r\n          _capture: true,\r\n        }),\r\n        { _capture: true }\r\n      ),\r\n      createInteractiveScrollEvents(),\r\n      clearWheelTimeout,\r\n      cancelHandleTransitionTimeout,\r\n    ]);\r\n  };\r\n};\r\n","import {\r\n  isHTMLElement,\r\n  appendChildren,\r\n  createDiv,\r\n  is,\r\n  contents,\r\n  insertAfter,\r\n  addClass,\r\n  parent,\r\n  removeElements,\r\n  push,\r\n  runEachAndClear,\r\n  insertBefore,\r\n  attr,\r\n  keys,\r\n  removeAttr,\r\n  attrClass,\r\n  hasAttrClass,\r\n  noop,\r\n  addEventListener,\r\n  bind,\r\n  inArray,\r\n} from '~/support';\r\nimport {\r\n  dataAttributeHost,\r\n  dataAttributeInitialize,\r\n  dataAttributeHostOverflowX,\r\n  dataAttributeHostOverflowY,\r\n  classNameScrollbarHidden,\r\n  dataAttributeViewport,\r\n  dataValueViewportScrollbarHidden,\r\n  dataAttributePadding,\r\n  dataAttributeContent,\r\n} from '~/classnames';\r\nimport { getEnvironment } from '~/environment';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport {\r\n  staticInitializationElement as generalStaticInitializationElement,\r\n  dynamicInitializationElement as generalDynamicInitializationElement,\r\n  resolveInitialization as generalResolveInitialization,\r\n} from '~/initialization';\r\nimport type { ScrollbarsHidingPlugin } from '~/plugins';\r\nimport type {\r\n  InitializationTarget,\r\n  InitializationTargetElement,\r\n  InitializationTargetObject,\r\n} from '~/initialization';\r\n\r\nexport type StructureSetupElements = [\r\n  elements: StructureSetupElementsObj,\r\n  appendElements: () => () => void,\r\n  canceled: () => void\r\n];\r\n\r\nexport interface StructureSetupElementsObj {\r\n  _target: InitializationTargetElement;\r\n  _host: HTMLElement;\r\n  _viewport: HTMLElement;\r\n  _padding: HTMLElement | false;\r\n  _content: HTMLElement | false;\r\n  _viewportArrange: HTMLStyleElement | false | null | undefined;\r\n  _scrollOffsetElement: HTMLElement;\r\n  _scrollEventElement: HTMLElement | Document;\r\n  // ctx ----\r\n  _isTextarea: boolean;\r\n  _isBody: boolean;\r\n  _windowElm: Window;\r\n  _documentElm: Document;\r\n  _targetIsElm: boolean;\r\n  _viewportIsTarget: boolean;\r\n  _viewportIsContent: boolean;\r\n  _viewportHasClass: (\r\n    viewportAttributeClassName: string,\r\n    hostAttributeClassName: string\r\n  ) => boolean;\r\n  _viewportAddRemoveClass: (\r\n    viewportAttributeClassName: string,\r\n    hostAttributeClassName: string,\r\n    add?: boolean\r\n  ) => void;\r\n}\r\n\r\nexport const createStructureSetupElements = (\r\n  target: InitializationTarget\r\n): StructureSetupElements => {\r\n  const env = getEnvironment();\r\n  const { _getDefaultInitialization, _nativeScrollbarsHiding } = env;\r\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n    scrollbarsHidingPluginName\r\n  );\r\n  const createUniqueViewportArrangeElement =\r\n    scrollbarsHidingPlugin && scrollbarsHidingPlugin._createUniqueViewportArrangeElement;\r\n  const { elements: defaultInitElements } = _getDefaultInitialization();\r\n  const {\r\n    host: defaultHostInitialization,\r\n    padding: defaultPaddingInitialization,\r\n    viewport: defaultViewportInitialization,\r\n    content: defaultContentInitialization,\r\n  } = defaultInitElements;\r\n  const targetIsElm = isHTMLElement(target);\r\n  const targetStructureInitialization = (targetIsElm ? {} : target) as InitializationTargetObject;\r\n  const { elements: initElements } = targetStructureInitialization;\r\n  const {\r\n    host: hostInitialization,\r\n    padding: paddingInitialization,\r\n    viewport: viewportInitialization,\r\n    content: contentInitialization,\r\n  } = initElements || {};\r\n\r\n  const targetElement = targetIsElm ? target : targetStructureInitialization.target;\r\n  const isTextarea = is(targetElement, 'textarea');\r\n  const ownerDocument = targetElement.ownerDocument;\r\n  const docElement = ownerDocument.documentElement;\r\n  const isBody = targetElement === ownerDocument.body;\r\n  const docWnd = ownerDocument.defaultView as Window;\r\n  const staticInitializationElement = bind(generalStaticInitializationElement, [targetElement]);\r\n  const dynamicInitializationElement = bind(generalDynamicInitializationElement, [targetElement]);\r\n  const resolveInitialization = bind(generalResolveInitialization, [targetElement]);\r\n  const createNewDiv = bind(createDiv, '');\r\n  const generateViewportElement = bind(\r\n    staticInitializationElement,\r\n    createNewDiv,\r\n    defaultViewportInitialization\r\n  );\r\n  const generateContentElement = bind(\r\n    dynamicInitializationElement,\r\n    createNewDiv,\r\n    defaultContentInitialization\r\n  );\r\n  const possibleViewportElement = generateViewportElement(viewportInitialization);\r\n  const viewportIsTarget = possibleViewportElement === targetElement;\r\n  const viewportIsTargetBody = viewportIsTarget && isBody;\r\n  const possibleContentElement = !viewportIsTarget && generateContentElement(contentInitialization);\r\n  // edge case if passed viewportElement is contentElement:\r\n  // check the default contentElement\r\n  // if truthy (so the element would be present in the DOM) the passed element is the final content element and the viewport element is generated\r\n  // if falsy (so the element wouldn't be present in the DOM) the passed element is the final viewport element and the content element is omitted\r\n  const viewportIsContent =\r\n    !viewportIsTarget &&\r\n    isHTMLElement(possibleViewportElement) &&\r\n    possibleViewportElement === possibleContentElement;\r\n  const defaultContentElementPresent =\r\n    viewportIsContent && !!resolveInitialization(defaultContentInitialization);\r\n  const viewportIstContentViewport = defaultContentElementPresent\r\n    ? generateViewportElement()\r\n    : possibleViewportElement;\r\n  const viewportIsContentContent = defaultContentElementPresent\r\n    ? possibleContentElement\r\n    : generateContentElement();\r\n  const nonBodyViewportElement = viewportIsContent\r\n    ? viewportIstContentViewport\r\n    : possibleViewportElement;\r\n  const viewportElement = viewportIsTargetBody ? docElement : nonBodyViewportElement;\r\n  const nonBodyHostElement = isTextarea\r\n    ? staticInitializationElement(createNewDiv, defaultHostInitialization, hostInitialization)\r\n    : (targetElement as HTMLElement);\r\n  const hostElement = viewportIsTargetBody ? viewportElement : nonBodyHostElement;\r\n  const contentElement = viewportIsContent ? viewportIsContentContent : possibleContentElement;\r\n  const activeElm = ownerDocument.activeElement;\r\n  const setViewportFocus =\r\n    !viewportIsTarget && docWnd.top === docWnd && activeElm === targetElement;\r\n  const evaluatedTargetObj: StructureSetupElementsObj = {\r\n    _target: targetElement,\r\n    _host: hostElement,\r\n    _viewport: viewportElement,\r\n    _padding:\r\n      !viewportIsTarget &&\r\n      dynamicInitializationElement(\r\n        createNewDiv,\r\n        defaultPaddingInitialization,\r\n        paddingInitialization\r\n      ),\r\n    _content: contentElement,\r\n    _viewportArrange:\r\n      !viewportIsTarget &&\r\n      !_nativeScrollbarsHiding &&\r\n      createUniqueViewportArrangeElement &&\r\n      createUniqueViewportArrangeElement(env),\r\n    _scrollOffsetElement: viewportIsTargetBody ? docElement : viewportElement,\r\n    _scrollEventElement: viewportIsTargetBody ? ownerDocument : viewportElement,\r\n    _windowElm: docWnd,\r\n    _documentElm: ownerDocument,\r\n    _isTextarea: isTextarea,\r\n    _isBody: isBody,\r\n    _targetIsElm: targetIsElm,\r\n    _viewportIsTarget: viewportIsTarget,\r\n    _viewportIsContent: viewportIsContent,\r\n    _viewportHasClass: (viewportAttributeClassName: string, hostAttributeClassName: string) =>\r\n      hasAttrClass(\r\n        viewportElement,\r\n        viewportIsTarget ? dataAttributeHost : dataAttributeViewport,\r\n        viewportIsTarget ? hostAttributeClassName : viewportAttributeClassName\r\n      ),\r\n    _viewportAddRemoveClass: (\r\n      viewportAttributeClassName: string,\r\n      hostAttributeClassName: string,\r\n      add?: boolean\r\n    ) =>\r\n      attrClass(\r\n        viewportElement,\r\n        viewportIsTarget ? dataAttributeHost : dataAttributeViewport,\r\n        viewportIsTarget ? hostAttributeClassName : viewportAttributeClassName,\r\n        add\r\n      ),\r\n  };\r\n  const generatedElements = keys(evaluatedTargetObj).reduce((arr, key) => {\r\n    const value = evaluatedTargetObj[key as keyof StructureSetupElementsObj];\r\n    return push(arr, value && isHTMLElement(value) && !parent(value) ? value : false);\r\n  }, [] as Array<HTMLElement | false>);\r\n  const elementIsGenerated = (elm: HTMLElement | false) =>\r\n    elm ? inArray(generatedElements, elm) : null;\r\n  const { _target, _host, _padding, _viewport, _content, _viewportArrange } = evaluatedTargetObj;\r\n  const destroyFns: (() => any)[] = [\r\n    () => {\r\n      // always remove dataAttributeHost & dataAttributeInitialize from host and from <html> element if target is body\r\n      removeAttr(_host, dataAttributeHost);\r\n      removeAttr(_host, dataAttributeInitialize);\r\n      removeAttr(_target, dataAttributeInitialize);\r\n      if (isBody) {\r\n        removeAttr(docElement, dataAttributeHost);\r\n        removeAttr(docElement, dataAttributeInitialize);\r\n      }\r\n    },\r\n  ];\r\n  const isTextareaHostGenerated = isTextarea && elementIsGenerated(_host);\r\n  let targetContents = isTextarea\r\n    ? _target\r\n    : contents(\r\n        [_content, _viewport, _padding, _host, _target].find(\r\n          (elm) => elementIsGenerated(elm) === false\r\n        )\r\n      );\r\n  const contentSlot = viewportIsTargetBody ? _target : _content || _viewport;\r\n  const destroy = bind(runEachAndClear, destroyFns);\r\n  const appendElements = () => {\r\n    attr(_host, dataAttributeHost, viewportIsTarget ? 'viewport' : 'host');\r\n    attr(_padding, dataAttributePadding, '');\r\n    attr(_content, dataAttributeContent, '');\r\n\r\n    if (!viewportIsTarget) {\r\n      attr(_viewport, dataAttributeViewport, '');\r\n    }\r\n\r\n    const removeHtmlClass =\r\n      isBody && !viewportIsTarget\r\n        ? addClass(parent(targetElement), classNameScrollbarHidden)\r\n        : noop;\r\n    const unwrap = (elm: HTMLElement | false | null | undefined) => {\r\n      appendChildren(parent(elm), contents(elm));\r\n      removeElements(elm);\r\n    };\r\n\r\n    // only insert host for textarea after target if it was generated\r\n    if (isTextareaHostGenerated) {\r\n      insertAfter(_target, _host);\r\n\r\n      push(destroyFns, () => {\r\n        insertAfter(_host, _target);\r\n        removeElements(_host);\r\n      });\r\n    }\r\n\r\n    appendChildren(contentSlot, targetContents);\r\n    appendChildren(_host, _padding);\r\n    appendChildren(_padding || _host, !viewportIsTarget && _viewport);\r\n    appendChildren(_viewport, _content);\r\n\r\n    push(destroyFns, () => {\r\n      removeHtmlClass();\r\n      removeAttr(_padding, dataAttributePadding);\r\n      removeAttr(_content, dataAttributeContent);\r\n      removeAttr(_viewport, dataAttributeHostOverflowX);\r\n      removeAttr(_viewport, dataAttributeHostOverflowY);\r\n      removeAttr(_viewport, dataAttributeViewport);\r\n\r\n      elementIsGenerated(_content) && unwrap(_content);\r\n      elementIsGenerated(_viewport) && unwrap(_viewport);\r\n      elementIsGenerated(_padding) && unwrap(_padding);\r\n    });\r\n\r\n    if (_nativeScrollbarsHiding && !viewportIsTarget) {\r\n      attrClass(_viewport, dataAttributeViewport, dataValueViewportScrollbarHidden, true);\r\n      push(destroyFns, bind(removeAttr, _viewport, dataAttributeViewport));\r\n    }\r\n    if (_viewportArrange) {\r\n      insertBefore(_viewport, _viewportArrange);\r\n      push(destroyFns, bind(removeElements, _viewportArrange));\r\n    }\r\n    if (setViewportFocus) {\r\n      const tabIndexStr = 'tabindex';\r\n      const ogTabindex = attr(_viewport, tabIndexStr);\r\n\r\n      attr(_viewport, tabIndexStr, '-1');\r\n      _viewport.focus();\r\n\r\n      const revertViewportTabIndex = () =>\r\n        ogTabindex ? attr(_viewport, tabIndexStr, ogTabindex) : removeAttr(_viewport, tabIndexStr);\r\n      const off = addEventListener(ownerDocument, 'pointerdown keydown', () => {\r\n        revertViewportTabIndex();\r\n        off();\r\n      });\r\n\r\n      push(destroyFns, [revertViewportTabIndex, off]);\r\n    } else if (activeElm && (activeElm as HTMLElement).focus) {\r\n      (activeElm as HTMLElement).focus();\r\n    }\r\n\r\n    // @ts-ignore\r\n    targetContents = 0;\r\n\r\n    return destroy;\r\n  };\r\n\r\n  return [evaluatedTargetObj, appendElements, destroy];\r\n};\r\n","import { setStyles, strHeight } from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the trinsic behavior of the content element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createTrinsicUpdateSegment: CreateStructureUpdateSegment =\r\n  ({ _content }) =>\r\n  ({ _observersUpdateHints, _observersState, _force }) => {\r\n    const { _flexboxGlue } = getEnvironment();\r\n    const { _heightIntrinsicChanged } = _observersUpdateHints || {};\r\n    const { _heightIntrinsic } = _observersState;\r\n    const heightIntrinsicChanged =\r\n      (_content || !_flexboxGlue) && (_heightIntrinsicChanged || _force);\r\n\r\n    if (heightIntrinsicChanged) {\r\n      setStyles(_content, {\r\n        [strHeight]: _heightIntrinsic ? '' : '100%',\r\n      });\r\n    }\r\n  };\r\n","import {\r\n  createCache,\r\n  topRightBottomLeft,\r\n  equalTRBL,\r\n  assignDeep,\r\n  bind,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  strWidth,\r\n  setStyles,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport type { StyleObject } from '~/typings';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\n/**\r\n * Lifecycle with the responsibility to adjust the padding styling of the padding and viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createPaddingUpdateSegment: CreateStructureUpdateSegment = (\r\n  { _host, _padding, _viewport, _viewportIsTarget },\r\n  state\r\n) => {\r\n  const [updatePaddingCache, currentPaddingCache] = createCache(\r\n    {\r\n      _equal: equalTRBL,\r\n      _initialValue: topRightBottomLeft(),\r\n    },\r\n    bind(topRightBottomLeft, _host, 'padding', '')\r\n  );\r\n\r\n  return ({ _checkOption, _observersUpdateHints, _observersState, _force }) => {\r\n    let [padding, paddingChanged] = currentPaddingCache(_force);\r\n    const { _nativeScrollbarsHiding, _flexboxGlue } = getEnvironment();\r\n    const { _sizeChanged, _contentMutation, _directionChanged } = _observersUpdateHints || {};\r\n    const { _directionIsRTL } = _observersState;\r\n    const [paddingAbsolute, paddingAbsoluteChanged] = _checkOption('paddingAbsolute');\r\n    const contentMutation = _force || (!_flexboxGlue && _contentMutation);\r\n\r\n    if (_sizeChanged || paddingChanged || contentMutation) {\r\n      [padding, paddingChanged] = updatePaddingCache(_force);\r\n    }\r\n\r\n    const paddingStyleChanged =\r\n      !_viewportIsTarget && (paddingAbsoluteChanged || _directionChanged || paddingChanged);\r\n\r\n    if (paddingStyleChanged) {\r\n      // if there is no padding element and no scrollbar styling, paddingAbsolute isn't supported\r\n      const paddingRelative = !paddingAbsolute || (!_padding && !_nativeScrollbarsHiding);\r\n      const paddingHorizontal = padding.r + padding.l;\r\n      const paddingVertical = padding.t + padding.b;\r\n\r\n      const paddingStyle: StyleObject = {\r\n        [strMarginRight]: paddingRelative && !_directionIsRTL ? -paddingHorizontal : 0,\r\n        [strMarginBottom]: paddingRelative ? -paddingVertical : 0,\r\n        [strMarginLeft]: paddingRelative && _directionIsRTL ? -paddingHorizontal : 0,\r\n        top: paddingRelative ? -padding.t : 0,\r\n        right: paddingRelative ? (_directionIsRTL ? -padding.r : 'auto') : 0,\r\n        left: paddingRelative ? (_directionIsRTL ? 'auto' : -padding.l) : 0,\r\n        [strWidth]: paddingRelative ? `calc(100% + ${paddingHorizontal}px)` : '',\r\n      };\r\n      const viewportStyle: StyleObject = {\r\n        [strPaddingTop]: paddingRelative ? padding.t : 0,\r\n        [strPaddingRight]: paddingRelative ? padding.r : 0,\r\n        [strPaddingBottom]: paddingRelative ? padding.b : 0,\r\n        [strPaddingLeft]: paddingRelative ? padding.l : 0,\r\n      };\r\n\r\n      // if there is no padding element apply the style to the viewport element instead\r\n      setStyles(_padding || _viewport, paddingStyle);\r\n      setStyles(_viewport, viewportStyle);\r\n\r\n      assignDeep(state, {\r\n        _padding: padding,\r\n        _paddingAbsolute: !paddingRelative,\r\n        _viewportPaddingStyle: _padding\r\n          ? viewportStyle\r\n          : assignDeep({}, paddingStyle, viewportStyle),\r\n      });\r\n    }\r\n\r\n    return {\r\n      _paddingStyleChanged: paddingStyleChanged,\r\n    };\r\n  };\r\n};\r\n","import {\r\n  createCache,\r\n  attr,\r\n  scrollSize,\r\n  fractionalSize,\r\n  equalWH,\r\n  clientSize,\r\n  equalXY,\r\n  attrClass,\r\n  noop,\r\n  assignDeep,\r\n  bind,\r\n  wnd,\r\n  mathMax,\r\n  windowSize,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strWidth,\r\n  strHeight,\r\n  strHidden,\r\n  strOverflowX,\r\n  strOverflowY,\r\n  setStyles,\r\n  getStyles,\r\n} from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  dataAttributeHost,\r\n  dataAttributeHostOverflowX,\r\n  dataAttributeHostOverflowY,\r\n  dataValueHostScrollbarHidden,\r\n  dataValueHostOverflowVisible,\r\n  dataValueViewportScrollbarHidden,\r\n  dataValueViewportOverflowVisible,\r\n  dataAttributeViewport,\r\n  dataAttributePadding,\r\n  dataValuePaddingOverflowVisible,\r\n} from '~/classnames';\r\nimport { getStaticPluginModuleInstance, scrollbarsHidingPluginName } from '~/plugins';\r\nimport type { WH, XY } from '~/support';\r\nimport type {\r\n  ArrangeViewport,\r\n  ScrollbarsHidingPlugin,\r\n  UndoArrangeViewport,\r\n} from '~/plugins/scrollbarsHidingPlugin';\r\nimport type { StyleObject, OverflowStyle, StyleObjectKey } from '~/typings';\r\nimport type { OverflowBehavior } from '~/options';\r\nimport type { CreateStructureUpdateSegment } from '../structureSetup';\r\n\r\nexport interface ViewportOverflowState {\r\n  _scrollbarsHideOffset: XY<number>;\r\n  _scrollbarsHideOffsetArrange: XY<boolean>;\r\n  _overflowScroll: XY<boolean>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n}\r\n\r\nexport type GetViewportOverflowState = (\r\n  showNativeOverlaidScrollbars: boolean,\r\n  viewportStyleObj?: StyleObject\r\n) => ViewportOverflowState;\r\n\r\nexport type HideNativeScrollbars = (\r\n  viewportOverflowState: ViewportOverflowState,\r\n  directionIsRTL: boolean,\r\n  viewportArrange: boolean,\r\n  viewportStyleObj: StyleObject\r\n) => void;\r\n\r\n/**\r\n * Lifecycle with the responsibility to set the correct overflow and scrollbar hiding styles of the viewport element.\r\n * @param structureUpdateHub\r\n * @returns\r\n */\r\nexport const createOverflowUpdateSegment: CreateStructureUpdateSegment = (\r\n  {\r\n    _host,\r\n    _padding,\r\n    _viewport,\r\n    _viewportArrange,\r\n    _viewportIsTarget,\r\n    _viewportAddRemoveClass,\r\n    _isBody,\r\n    _windowElm,\r\n  },\r\n  state\r\n) => {\r\n  const max0 = bind(mathMax, 0);\r\n  const strVisible = 'visible';\r\n  const overlaidScrollbarsHideOffset = 42;\r\n  const whCacheOptions = {\r\n    _equal: equalWH,\r\n    _initialValue: { w: 0, h: 0 },\r\n  };\r\n  const xyCacheOptions = {\r\n    _equal: equalXY,\r\n    _initialValue: { x: strHidden, y: strHidden } as XY<OverflowStyle>,\r\n  };\r\n  const getOverflowAmount = (viewportScrollSize: WH<number>, viewportClientSize: WH<number>) => {\r\n    const tollerance = wnd.devicePixelRatio % 1 !== 0 ? 1 : 0;\r\n    const amount = {\r\n      w: max0(viewportScrollSize.w - viewportClientSize.w),\r\n      h: max0(viewportScrollSize.h - viewportClientSize.h),\r\n    };\r\n\r\n    return {\r\n      w: amount.w > tollerance ? amount.w : 0,\r\n      h: amount.h > tollerance ? amount.h : 0,\r\n    };\r\n  };\r\n  const overflowIsVisible = (overflowBehavior: string) =>\r\n    overflowBehavior.indexOf(strVisible) === 0;\r\n\r\n  const {\r\n    _nativeScrollbarsSize,\r\n    _flexboxGlue,\r\n    _nativeScrollbarsHiding,\r\n    _nativeScrollbarsOverlaid,\r\n  } = getEnvironment();\r\n  const scrollbarsHidingPlugin = getStaticPluginModuleInstance<typeof ScrollbarsHidingPlugin>(\r\n    scrollbarsHidingPluginName\r\n  );\r\n  const doViewportArrange =\r\n    !_viewportIsTarget &&\r\n    !_nativeScrollbarsHiding &&\r\n    (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n  const viewportIsTargetBody = _isBody && _viewportIsTarget;\r\n\r\n  const [updateSizeFraction, getCurrentSizeFraction] = createCache<WH<number>>(\r\n    whCacheOptions,\r\n    bind(fractionalSize, _viewport)\r\n  );\r\n\r\n  const [updateViewportScrollSizeCache, getCurrentViewportScrollSizeCache] = createCache<\r\n    WH<number>\r\n  >(whCacheOptions, bind(scrollSize, _viewport));\r\n\r\n  const [updateOverflowAmountCache, getCurrentOverflowAmountCache] =\r\n    createCache<WH<number>>(whCacheOptions);\r\n\r\n  const [updateOverflowEdge, getCurrentOverflowEdgeCache] = createCache<WH<number>>(whCacheOptions);\r\n\r\n  const [updateOverflowStyleCache] = createCache<XY<OverflowStyle>>(xyCacheOptions);\r\n\r\n  /**\r\n   * Applies a fixed height to the viewport so it can't overflow or underflow the host element.\r\n   * @param viewportOverflowState The current overflow state.\r\n   * @param heightIntrinsic Whether the host height is intrinsic or not.\r\n   */\r\n  const fixFlexboxGlue = (\r\n    viewportOverflowState: ViewportOverflowState,\r\n    heightIntrinsic: boolean\r\n  ) => {\r\n    setStyles(_viewport, {\r\n      [strHeight]: '',\r\n    });\r\n\r\n    if (heightIntrinsic) {\r\n      const { _paddingAbsolute, _padding: padding } = state;\r\n      const { _overflowScroll, _scrollbarsHideOffset } = viewportOverflowState;\r\n      const fSize = fractionalSize(_host);\r\n      const hostClientSize = clientSize(_host);\r\n\r\n      // padding subtraction is only needed if padding is absolute or if viewport is content-box\r\n      const isContentBox = getStyles(_viewport, 'boxSizing') === 'content-box';\r\n      const paddingVertical = _paddingAbsolute || isContentBox ? padding.b + padding.t : 0;\r\n      const subtractXScrollbar = !(_nativeScrollbarsOverlaid.x && isContentBox);\r\n\r\n      setStyles(_viewport, {\r\n        [strHeight]:\r\n          hostClientSize.h +\r\n          fSize.h +\r\n          (_overflowScroll.x && subtractXScrollbar ? _scrollbarsHideOffset.x : 0) -\r\n          paddingVertical,\r\n      });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Gets the current overflow state of the viewport.\r\n   * @param showNativeOverlaidScrollbars Whether native overlaid scrollbars are shown instead of hidden.\r\n   * @param viewportStyleObj The viewport style object where the overflow scroll property can be read of, or undefined if shall be determined.\r\n   * @returns A object which contains informations about the current overflow state.\r\n   */\r\n  const getViewportOverflowState: GetViewportOverflowState = (\r\n    showNativeOverlaidScrollbars,\r\n    viewportStyleObj?\r\n  ) => {\r\n    const arrangeHideOffset =\r\n      !_nativeScrollbarsHiding && !showNativeOverlaidScrollbars ? overlaidScrollbarsHideOffset : 0;\r\n    const getStatePerAxis = (\r\n      styleKey: StyleObjectKey,\r\n      isOverlaid: boolean,\r\n      nativeScrollbarSize: number\r\n    ) => {\r\n      const overflowStyle = getStyles(_viewport, styleKey);\r\n      // can't do something like \"viewportStyleObj && viewportStyleObj[styleKey] || overflowStyle\" here!\r\n      const objectPrefferedOverflowStyle = viewportStyleObj\r\n        ? viewportStyleObj[styleKey]\r\n        : overflowStyle;\r\n      const overflowScroll = objectPrefferedOverflowStyle === 'scroll';\r\n      const nonScrollbarStylingHideOffset = isOverlaid ? arrangeHideOffset : nativeScrollbarSize;\r\n      const scrollbarsHideOffset =\r\n        overflowScroll && !_nativeScrollbarsHiding ? nonScrollbarStylingHideOffset : 0;\r\n      const scrollbarsHideOffsetArrange = isOverlaid && !!arrangeHideOffset;\r\n\r\n      return [overflowStyle, overflowScroll, scrollbarsHideOffset, scrollbarsHideOffsetArrange] as [\r\n        overflowStyle: OverflowStyle,\r\n        overflowScroll: boolean,\r\n        scrollbarsHideOffset: number,\r\n        scrollbarsHideOffsetArrange: boolean\r\n      ];\r\n    };\r\n\r\n    const [xOverflowStyle, xOverflowScroll, xScrollbarsHideOffset, xScrollbarsHideOffsetArrange] =\r\n      getStatePerAxis(strOverflowX, _nativeScrollbarsOverlaid.x, _nativeScrollbarsSize.x);\r\n    const [yOverflowStyle, yOverflowScroll, yScrollbarsHideOffset, yScrollbarsHideOffsetArrange] =\r\n      getStatePerAxis(strOverflowY, _nativeScrollbarsOverlaid.y, _nativeScrollbarsSize.y);\r\n\r\n    return {\r\n      _overflowStyle: {\r\n        x: xOverflowStyle,\r\n        y: yOverflowStyle,\r\n      },\r\n      _overflowScroll: {\r\n        x: xOverflowScroll,\r\n        y: yOverflowScroll,\r\n      },\r\n      _scrollbarsHideOffset: {\r\n        x: xScrollbarsHideOffset,\r\n        y: yScrollbarsHideOffset,\r\n      },\r\n      _scrollbarsHideOffsetArrange: {\r\n        x: xScrollbarsHideOffsetArrange,\r\n        y: yScrollbarsHideOffsetArrange,\r\n      },\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Sets the overflow property of the viewport and calculates the a overflow state according to the new parameters.\r\n   * @param showNativeOverlaidScrollbars Whether to show natively overlaid scrollbars.\r\n   * @param overflowAmount The overflow amount.\r\n   * @param overflow The overflow behavior according to the options.\r\n   * @param viewportStyleObj The viewport style object to which the overflow style shall be applied.\r\n   * @returns A object which represents the newly set overflow state.\r\n   */\r\n  const setViewportOverflowState = (\r\n    showNativeOverlaidScrollbars: boolean,\r\n    hasOverflow: XY<boolean>,\r\n    overflowOption: XY<OverflowBehavior>,\r\n    viewportStyleObj: StyleObject\r\n  ): ViewportOverflowState => {\r\n    const setAxisOverflowStyle = (behavior: OverflowBehavior, hasOverflowAxis: boolean) => {\r\n      const overflowVisible = overflowIsVisible(behavior);\r\n      const overflowVisibleBehavior =\r\n        (hasOverflowAxis && overflowVisible && behavior.replace(`${strVisible}-`, '')) || '';\r\n      return [\r\n        hasOverflowAxis && !overflowVisible ? behavior : '',\r\n        overflowIsVisible(overflowVisibleBehavior) ? 'hidden' : overflowVisibleBehavior,\r\n      ];\r\n    };\r\n\r\n    const [overflowX, visibleBehaviorX] = setAxisOverflowStyle(overflowOption.x, hasOverflow.x);\r\n    const [overflowY, visibleBehaviorY] = setAxisOverflowStyle(overflowOption.y, hasOverflow.y);\r\n\r\n    viewportStyleObj[strOverflowX] = visibleBehaviorX && overflowY ? visibleBehaviorX : overflowX;\r\n    viewportStyleObj[strOverflowY] = visibleBehaviorY && overflowX ? visibleBehaviorY : overflowY;\r\n\r\n    return getViewportOverflowState(showNativeOverlaidScrollbars, viewportStyleObj);\r\n  };\r\n\r\n  /**\r\n   * Hides the native scrollbars according to the passed parameters.\r\n   * @param viewportOverflowState The viewport overflow state.\r\n   * @param directionIsRTL Whether the direction is RTL or not.\r\n   * @param viewportArrange Whether special styles related to the viewport arrange strategy shall be applied.\r\n   * @param viewportStyleObj The viewport style object to which the needed styles shall be applied.\r\n   */\r\n  const hideNativeScrollbars: HideNativeScrollbars = (\r\n    viewportOverflowState,\r\n    directionIsRTL,\r\n    viewportArrange,\r\n    viewportStyleObj\r\n  ) => {\r\n    const { _scrollbarsHideOffset, _scrollbarsHideOffsetArrange } = viewportOverflowState;\r\n    const { x: arrangeX, y: arrangeY } = _scrollbarsHideOffsetArrange;\r\n    const { x: hideOffsetX, y: hideOffsetY } = _scrollbarsHideOffset;\r\n    const { _viewportPaddingStyle: viewportPaddingStyle } = state;\r\n    const horizontalMarginKey: keyof StyleObject = directionIsRTL ? strMarginLeft : strMarginRight;\r\n    const viewportHorizontalPaddingKey: keyof StyleObject = directionIsRTL\r\n      ? strPaddingLeft\r\n      : strPaddingRight;\r\n    const horizontalMarginValue = viewportPaddingStyle[horizontalMarginKey] as number;\r\n    const verticalMarginValue = viewportPaddingStyle[strMarginBottom] as number;\r\n    const horizontalPaddingValue = viewportPaddingStyle[viewportHorizontalPaddingKey] as number;\r\n    const verticalPaddingValue = viewportPaddingStyle[strPaddingBottom] as number;\r\n\r\n    // horizontal\r\n    viewportStyleObj[strWidth] = `calc(100% + ${hideOffsetY + horizontalMarginValue * -1}px)`;\r\n    viewportStyleObj[horizontalMarginKey] = -hideOffsetY + horizontalMarginValue;\r\n\r\n    // vertical\r\n    viewportStyleObj[strMarginBottom] = -hideOffsetX + verticalMarginValue;\r\n\r\n    // viewport arrange additional styles\r\n    if (viewportArrange) {\r\n      viewportStyleObj[viewportHorizontalPaddingKey] =\r\n        horizontalPaddingValue + (arrangeY ? hideOffsetY : 0);\r\n      viewportStyleObj[strPaddingBottom] = verticalPaddingValue + (arrangeX ? hideOffsetX : 0);\r\n    }\r\n  };\r\n\r\n  const [arrangeViewport, undoViewportArrange] = scrollbarsHidingPlugin\r\n    ? scrollbarsHidingPlugin._overflowUpdateSegment(\r\n        doViewportArrange,\r\n        _flexboxGlue,\r\n        _viewport,\r\n        _viewportArrange,\r\n        state,\r\n        getViewportOverflowState,\r\n        hideNativeScrollbars\r\n      )\r\n    : [(() => doViewportArrange) as ArrangeViewport, (() => [noop]) as UndoArrangeViewport];\r\n\r\n  return (\r\n    { _checkOption, _observersUpdateHints, _observersState, _force },\r\n    { _paddingStyleChanged }\r\n  ) => {\r\n    const {\r\n      _sizeChanged,\r\n      _hostMutation,\r\n      _contentMutation,\r\n      _heightIntrinsicChanged,\r\n      _directionChanged,\r\n      _scrollbarSizeChanged,\r\n    } = _observersUpdateHints || {};\r\n    const { _heightIntrinsic, _directionIsRTL } = _observersState;\r\n    const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] = _checkOption(\r\n      'showNativeOverlaidScrollbars'\r\n    );\r\n    const [overflow, overflowChanged] = _checkOption('overflow');\r\n\r\n    const showNativeOverlaidScrollbars =\r\n      showNativeOverlaidScrollbarsOption &&\r\n      _nativeScrollbarsOverlaid.x &&\r\n      _nativeScrollbarsOverlaid.y;\r\n    const adjustFlexboxGlue =\r\n      !_viewportIsTarget &&\r\n      !_flexboxGlue &&\r\n      (_sizeChanged ||\r\n        _contentMutation ||\r\n        _hostMutation ||\r\n        showNativeOverlaidScrollbarsChanged ||\r\n        _heightIntrinsicChanged);\r\n    const adjustViewportArrange =\r\n      _sizeChanged ||\r\n      _paddingStyleChanged ||\r\n      _contentMutation ||\r\n      _directionChanged ||\r\n      _scrollbarSizeChanged ||\r\n      showNativeOverlaidScrollbarsChanged;\r\n    const overflowXVisible = overflowIsVisible(overflow.x);\r\n    const overflowYVisible = overflowIsVisible(overflow.y);\r\n    const overflowVisible = overflowXVisible || overflowYVisible;\r\n\r\n    let sizeFractionCache = getCurrentSizeFraction(_force);\r\n    let viewportScrollSizeCache = getCurrentViewportScrollSizeCache(_force);\r\n    let overflowAmuntCache = getCurrentOverflowAmountCache(_force);\r\n    let overflowEdgeCache = getCurrentOverflowEdgeCache(_force);\r\n\r\n    let preMeasureViewportOverflowState: ViewportOverflowState | undefined;\r\n\r\n    if (showNativeOverlaidScrollbarsChanged && _nativeScrollbarsHiding) {\r\n      _viewportAddRemoveClass(\r\n        dataValueViewportScrollbarHidden,\r\n        dataValueHostScrollbarHidden,\r\n        !showNativeOverlaidScrollbars\r\n      );\r\n    }\r\n\r\n    if (adjustFlexboxGlue) {\r\n      preMeasureViewportOverflowState = getViewportOverflowState(showNativeOverlaidScrollbars);\r\n      fixFlexboxGlue(preMeasureViewportOverflowState, _heightIntrinsic);\r\n    }\r\n\r\n    if (adjustViewportArrange) {\r\n      if (overflowVisible) {\r\n        _viewportAddRemoveClass(\r\n          dataValueViewportOverflowVisible,\r\n          dataValueHostOverflowVisible,\r\n          false\r\n        );\r\n      }\r\n\r\n      const [redoViewportArrange, undoViewportArrangeOverflowState] = undoViewportArrange(\r\n        showNativeOverlaidScrollbars,\r\n        _directionIsRTL,\r\n        preMeasureViewportOverflowState\r\n      );\r\n      const [sizeFraction, sizeFractionChanged] = (sizeFractionCache = updateSizeFraction(_force));\r\n      const [viewportScrollSize, viewportScrollSizeChanged] = (viewportScrollSizeCache =\r\n        updateViewportScrollSizeCache(_force));\r\n      const viewportClientSize = clientSize(_viewport);\r\n      let arrangedViewportScrollSize = viewportScrollSize;\r\n      let arrangedViewportClientSize = viewportClientSize;\r\n\r\n      redoViewportArrange();\r\n\r\n      // if re measure is required (only required if content arrange strategy is used)\r\n      if (\r\n        (viewportScrollSizeChanged || sizeFractionChanged || showNativeOverlaidScrollbarsChanged) &&\r\n        undoViewportArrangeOverflowState &&\r\n        !showNativeOverlaidScrollbars &&\r\n        arrangeViewport(\r\n          undoViewportArrangeOverflowState,\r\n          viewportScrollSize,\r\n          sizeFraction,\r\n          _directionIsRTL\r\n        )\r\n      ) {\r\n        arrangedViewportClientSize = clientSize(_viewport);\r\n        arrangedViewportScrollSize = scrollSize(_viewport);\r\n      }\r\n\r\n      const windowInnerSize = windowSize(_windowElm);\r\n      const overflowAmountScrollSize = {\r\n        w: max0(mathMax(viewportScrollSize.w, arrangedViewportScrollSize.w) + sizeFraction.w),\r\n        h: max0(mathMax(viewportScrollSize.h, arrangedViewportScrollSize.h) + sizeFraction.h),\r\n      };\r\n\r\n      const overflowAmountClientSize = {\r\n        w: max0(\r\n          (viewportIsTargetBody\r\n            ? windowInnerSize.w\r\n            : arrangedViewportClientSize.w + max0(viewportClientSize.w - viewportScrollSize.w)) +\r\n            sizeFraction.w\r\n        ),\r\n        h: max0(\r\n          (viewportIsTargetBody\r\n            ? windowInnerSize.h\r\n            : arrangedViewportClientSize.h + max0(viewportClientSize.h - viewportScrollSize.h)) +\r\n            sizeFraction.h\r\n        ),\r\n      };\r\n\r\n      overflowEdgeCache = updateOverflowEdge(overflowAmountClientSize);\r\n      overflowAmuntCache = updateOverflowAmountCache(\r\n        getOverflowAmount(overflowAmountScrollSize, overflowAmountClientSize),\r\n        _force\r\n      );\r\n    }\r\n\r\n    const [overflowEdge, overflowEdgeChanged] = overflowEdgeCache;\r\n    const [overflowAmount, overflowAmountChanged] = overflowAmuntCache;\r\n    const [viewportScrollSize, viewportScrollSizeChanged] = viewportScrollSizeCache;\r\n    const [sizeFraction, sizeFractionChanged] = sizeFractionCache;\r\n    const hasOverflow = {\r\n      x: overflowAmount.w > 0,\r\n      y: overflowAmount.h > 0,\r\n    };\r\n    const removeClipping =\r\n      (overflowXVisible && overflowYVisible && (hasOverflow.x || hasOverflow.y)) ||\r\n      (overflowXVisible && hasOverflow.x && !hasOverflow.y) ||\r\n      (overflowYVisible && hasOverflow.y && !hasOverflow.x);\r\n    const adjustViewportStyle =\r\n      _paddingStyleChanged ||\r\n      _directionChanged ||\r\n      _scrollbarSizeChanged ||\r\n      sizeFractionChanged ||\r\n      viewportScrollSizeChanged ||\r\n      overflowEdgeChanged ||\r\n      overflowAmountChanged ||\r\n      overflowChanged ||\r\n      showNativeOverlaidScrollbarsChanged ||\r\n      adjustFlexboxGlue ||\r\n      adjustViewportArrange;\r\n\r\n    if (adjustViewportStyle) {\r\n      const viewportStyle: StyleObject = {\r\n        [strMarginRight]: 0,\r\n        [strMarginBottom]: 0,\r\n        [strMarginLeft]: 0,\r\n        [strWidth]: '',\r\n        [strOverflowX]: '',\r\n        [strOverflowY]: '',\r\n      };\r\n      const viewportOverflowState = setViewportOverflowState(\r\n        showNativeOverlaidScrollbars,\r\n        hasOverflow,\r\n        overflow,\r\n        viewportStyle\r\n      );\r\n      const viewportArranged = arrangeViewport(\r\n        viewportOverflowState,\r\n        viewportScrollSize,\r\n        sizeFraction,\r\n        _directionIsRTL\r\n      );\r\n\r\n      if (!_viewportIsTarget) {\r\n        hideNativeScrollbars(\r\n          viewportOverflowState,\r\n          _directionIsRTL,\r\n          viewportArranged,\r\n          viewportStyle\r\n        );\r\n      }\r\n\r\n      if (adjustFlexboxGlue) {\r\n        fixFlexboxGlue(viewportOverflowState, _heightIntrinsic);\r\n      }\r\n\r\n      if (_viewportIsTarget) {\r\n        attr(_host, dataAttributeHostOverflowX, viewportStyle[strOverflowX] as string);\r\n        attr(_host, dataAttributeHostOverflowY, viewportStyle[strOverflowY] as string);\r\n      } else {\r\n        setStyles(_viewport, viewportStyle);\r\n      }\r\n    }\r\n\r\n    attrClass(_host, dataAttributeHost, dataValueHostOverflowVisible, removeClipping);\r\n    attrClass(_padding, dataAttributePadding, dataValuePaddingOverflowVisible, removeClipping);\r\n    if (!_viewportIsTarget) {\r\n      attrClass(\r\n        _viewport,\r\n        dataAttributeViewport,\r\n        dataValueViewportOverflowVisible,\r\n        overflowVisible\r\n      );\r\n    }\r\n\r\n    const [overflowStyle, overflowStyleChanged] = updateOverflowStyleCache(\r\n      getViewportOverflowState(showNativeOverlaidScrollbars)._overflowStyle\r\n    );\r\n\r\n    assignDeep(state, {\r\n      _overflowStyle: overflowStyle,\r\n      _overflowEdge: {\r\n        x: overflowEdge.w,\r\n        y: overflowEdge.h,\r\n      },\r\n      _overflowAmount: {\r\n        x: overflowAmount.w,\r\n        y: overflowAmount.h,\r\n      },\r\n      _hasOverflow: hasOverflow,\r\n    });\r\n\r\n    return {\r\n      _overflowStyleChanged: overflowStyleChanged,\r\n      _overflowEdgeChanged: overflowEdgeChanged,\r\n      _overflowAmountChanged: overflowAmountChanged,\r\n    };\r\n  };\r\n};\r\n","import {\r\n  assignDeep,\r\n  bind,\r\n  getElmentScroll,\r\n  isEmptyObject,\r\n  keys,\r\n  runEachAndClear,\r\n  scrollElementTo,\r\n} from '~/support';\r\nimport { createOptionCheck } from '~/options';\r\nimport type { OptionsCheckFn, Options, PartialOptions, ReadonlyOptions } from '~/options';\r\nimport type { DeepReadonly } from '~/typings';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { ObserversSetupState, ObserversSetupUpdateHints } from './observersSetup';\r\nimport type { StructureSetupState, StructureSetupUpdateHints } from './structureSetup';\r\nimport type { StructureSetupElementsObj } from './structureSetup/structureSetup.elements';\r\nimport type { ScrollbarsSetupElementsObj } from './scrollbarsSetup/scrollbarsSetup.elements';\r\nimport { createObserversSetup } from './observersSetup';\r\nimport { createScrollbarsSetup } from './scrollbarsSetup';\r\nimport { createStructureSetup } from './structureSetup';\r\n\r\nexport type SetupUpdateHints = Partial<Record<string, boolean>>;\r\n\r\nexport type SetupUpdateInfo = {\r\n  _checkOption: OptionsCheckFn<Options>;\r\n  _changedOptions: PartialOptions;\r\n  _force: boolean;\r\n};\r\n\r\nexport type Setup<\r\n  U extends SetupUpdateInfo,\r\n  S extends Readonly<Record<string, any>>,\r\n  H extends SetupUpdateHints | void\r\n> = [\r\n  /** The create function which returns the `destroy` function. */\r\n  _create: () => () => void,\r\n  /** Function which updates the setup and returns the update result. */\r\n  _update: (updateInfo: U) => H,\r\n  /** Function which returns the current state. */\r\n  _state: S\r\n];\r\n\r\nexport interface SetupsUpdateInfo {\r\n  /** The options that changed or `undefined` if none changed. */\r\n  _changedOptions?: PartialOptions;\r\n  /** Whether chache should be ignored. */\r\n  _force?: boolean;\r\n  /** Whether observers should take their records and thus update as well. */\r\n  _takeRecords?: boolean;\r\n  /** Whether one or more scrollbars has been cloned. */\r\n  _cloneScrollbar?: boolean;\r\n}\r\n\r\nexport interface SetupsUpdateHints {\r\n  readonly _observersUpdateHints: DeepReadonly<ObserversSetupUpdateHints>;\r\n  readonly _structureUpdateHints: DeepReadonly<StructureSetupUpdateHints>;\r\n}\r\n\r\nexport interface SetupsState {\r\n  readonly _observersSetupState: DeepReadonly<ObserversSetupState>;\r\n  readonly _structureSetupState: DeepReadonly<StructureSetupState>;\r\n}\r\n\r\nexport interface SetupsElements {\r\n  readonly _structureSetupElements: DeepReadonly<StructureSetupElementsObj>;\r\n  readonly _scrollbarsSetupElements: DeepReadonly<ScrollbarsSetupElementsObj>;\r\n}\r\n\r\nexport type Setups = [\r\n  construct: () => () => void,\r\n  update: (updateInfo: SetupsUpdateInfo) => boolean,\r\n  getState: () => SetupsState,\r\n  elements: SetupsElements,\r\n  canceled: () => void\r\n];\r\n\r\nexport const createSetups = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  onUpdated: (updateInfo: SetupsUpdateInfo, updateHints: SetupsUpdateHints) => void,\r\n  onScroll: (scrollEvent: Event) => void\r\n): Setups => {\r\n  const [\r\n    structureSetupCreate,\r\n    structureSetupUpdate,\r\n    structureSetupState,\r\n    structureSetupElements,\r\n    structureSetupCanceled,\r\n  ] = createStructureSetup(target);\r\n  const [observersSetupCreate, observersSetupUpdate, observersSetupState] = createObserversSetup(\r\n    structureSetupElements,\r\n    (observersUpdateHints) => {\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      update({}, observersUpdateHints);\r\n    }\r\n  );\r\n  const [scrollbarsSetupCreate, scrollbarsSetupUpdate, , scrollbarsSetupElements] =\r\n    createScrollbarsSetup(\r\n      target,\r\n      options,\r\n      observersSetupState,\r\n      structureSetupState,\r\n      structureSetupElements,\r\n      onScroll\r\n    );\r\n\r\n  const updateHintsAreTruthy = (hints: SetupUpdateHints) =>\r\n    keys(hints).some((key) => !!hints[key as keyof typeof hints]);\r\n\r\n  const update = (\r\n    updateInfo: SetupsUpdateInfo,\r\n    observerUpdateHints?: ObserversSetupUpdateHints\r\n  ): boolean => {\r\n    const {\r\n      _changedOptions: rawChangedOptions,\r\n      _force: rawForce,\r\n      _takeRecords,\r\n      _cloneScrollbar,\r\n    } = updateInfo;\r\n    const _changedOptions = rawChangedOptions || {};\r\n    const _force = !!rawForce;\r\n    const baseUpdateInfoObj: SetupUpdateInfo = {\r\n      _checkOption: createOptionCheck(options, _changedOptions, _force),\r\n      _changedOptions,\r\n      _force,\r\n    };\r\n\r\n    if (_cloneScrollbar) {\r\n      scrollbarsSetupUpdate(baseUpdateInfoObj);\r\n      return false;\r\n    }\r\n\r\n    const observersHints =\r\n      observerUpdateHints ||\r\n      observersSetupUpdate(\r\n        assignDeep({}, baseUpdateInfoObj, {\r\n          _takeRecords,\r\n        })\r\n      );\r\n\r\n    const structureHints = structureSetupUpdate(\r\n      assignDeep({}, baseUpdateInfoObj, {\r\n        _observersState: observersSetupState,\r\n        _observersUpdateHints: observersHints,\r\n      })\r\n    );\r\n    scrollbarsSetupUpdate(\r\n      assignDeep({}, baseUpdateInfoObj, {\r\n        _observersUpdateHints: observersHints,\r\n        _structureUpdateHints: structureHints,\r\n      })\r\n    );\r\n\r\n    const truthyObserversHints = updateHintsAreTruthy(observersHints);\r\n    const truthyStructureHints = updateHintsAreTruthy(structureHints);\r\n    const changed =\r\n      truthyObserversHints || truthyStructureHints || !isEmptyObject(_changedOptions) || _force;\r\n\r\n    changed &&\r\n      onUpdated(updateInfo, {\r\n        _observersUpdateHints: observersHints,\r\n        _structureUpdateHints: structureHints,\r\n      });\r\n\r\n    return changed;\r\n  };\r\n\r\n  return [\r\n    () => {\r\n      const { _target, _viewport, _documentElm, _isBody } = structureSetupElements;\r\n      const scrollingElement = _isBody ? _documentElm.documentElement : _target;\r\n      const initialScroll = getElmentScroll(scrollingElement);\r\n      const destroyFns = [observersSetupCreate(), structureSetupCreate(), scrollbarsSetupCreate()];\r\n\r\n      scrollElementTo(_viewport, initialScroll);\r\n\r\n      return bind(runEachAndClear, destroyFns);\r\n    },\r\n    update,\r\n    () => ({\r\n      _observersSetupState: observersSetupState,\r\n      _structureSetupState: structureSetupState,\r\n    }),\r\n    {\r\n      _structureSetupElements: structureSetupElements,\r\n      _scrollbarsSetupElements: scrollbarsSetupElements,\r\n    },\r\n    structureSetupCanceled,\r\n  ];\r\n};\r\n","import { getEnvironment } from '~/environment';\r\nimport {\r\n  assignDeep,\r\n  each,\r\n  getElmentScroll,\r\n  scrollElementTo,\r\n  strHidden,\r\n  strMarginBottom,\r\n  strMarginLeft,\r\n  strMarginRight,\r\n  strPaddingBottom,\r\n  strPaddingLeft,\r\n  strPaddingRight,\r\n  strPaddingTop,\r\n  type TRBL,\r\n  type XY,\r\n} from '~/support';\r\nimport { dataValueHostUpdating } from '~/classnames';\r\nimport type { StructureSetupElementsObj } from './structureSetup.elements';\r\nimport type {\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints,\r\n  Setup,\r\n  SetupUpdateInfo,\r\n} from '~/setups';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { StyleObject, OverflowStyle } from '~/typings';\r\nimport { createStructureSetupElements } from './structureSetup.elements';\r\nimport {\r\n  createOverflowUpdateSegment,\r\n  createPaddingUpdateSegment,\r\n  createTrinsicUpdateSegment,\r\n} from './updateSegments';\r\n\r\nexport interface StructureSetupState {\r\n  _padding: TRBL;\r\n  _paddingAbsolute: boolean;\r\n  _viewportPaddingStyle: StyleObject;\r\n  _overflowEdge: XY<number>;\r\n  _overflowAmount: XY<number>;\r\n  _overflowStyle: XY<OverflowStyle>;\r\n  _hasOverflow: XY<boolean>;\r\n}\r\n\r\nexport interface StructureSetupUpdateInfo extends SetupUpdateInfo {\r\n  _observersState: ObserversSetupState;\r\n  _observersUpdateHints?: ObserversSetupUpdateHints;\r\n}\r\n\r\nexport type StructureSetupUpdateHints = {\r\n  _overflowEdgeChanged?: boolean;\r\n  _overflowAmountChanged?: boolean;\r\n  _overflowStyleChanged?: boolean;\r\n  _paddingStyleChanged?: boolean;\r\n};\r\n\r\nexport type StructureSetup = [\r\n  ...Setup<StructureSetupUpdateInfo, StructureSetupState, StructureSetupUpdateHints>,\r\n  /** The elements created by the structure setup. */\r\n  StructureSetupElementsObj,\r\n  /** Function to be called when the initialization was canceled. */\r\n  () => void\r\n];\r\n\r\nexport type StructureUpdateSegment = (\r\n  updateInfo: StructureSetupUpdateInfo,\r\n  updateHints: Readonly<StructureSetupUpdateHints>\r\n) => StructureSetupUpdateHints | void;\r\n\r\nexport type CreateStructureUpdateSegment = (\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  state: StructureSetupState\r\n) => StructureUpdateSegment;\r\n\r\nexport const createStructureSetup = (target: InitializationTarget): StructureSetup => {\r\n  const [elements, appendStructureElements, canceled] = createStructureSetupElements(target);\r\n  const state: StructureSetupState = {\r\n    _padding: {\r\n      t: 0,\r\n      r: 0,\r\n      b: 0,\r\n      l: 0,\r\n    },\r\n    _paddingAbsolute: false,\r\n    _viewportPaddingStyle: {\r\n      [strMarginRight]: 0,\r\n      [strMarginBottom]: 0,\r\n      [strMarginLeft]: 0,\r\n      [strPaddingTop]: 0,\r\n      [strPaddingRight]: 0,\r\n      [strPaddingBottom]: 0,\r\n      [strPaddingLeft]: 0,\r\n    },\r\n    _overflowEdge: { x: 0, y: 0 },\r\n    _overflowAmount: { x: 0, y: 0 },\r\n    _overflowStyle: {\r\n      x: strHidden,\r\n      y: strHidden,\r\n    },\r\n    _hasOverflow: {\r\n      x: false,\r\n      y: false,\r\n    },\r\n  };\r\n  const { _target, _viewport, _viewportAddRemoveClass, _viewportIsTarget } = elements;\r\n  const { _nativeScrollbarsHiding, _nativeScrollbarsOverlaid, _flexboxGlue } = getEnvironment();\r\n  const doViewportArrange =\r\n    !_nativeScrollbarsHiding && (_nativeScrollbarsOverlaid.x || _nativeScrollbarsOverlaid.y);\r\n\r\n  const updateSegments: StructureUpdateSegment[] = [\r\n    createTrinsicUpdateSegment(elements, state),\r\n    createPaddingUpdateSegment(elements, state),\r\n    createOverflowUpdateSegment(elements, state),\r\n  ];\r\n\r\n  return [\r\n    appendStructureElements,\r\n    (updateInfo) => {\r\n      const updateHints: StructureSetupUpdateHints = {};\r\n      const adjustScrollOffset = doViewportArrange || !_flexboxGlue;\r\n      const scrollOffset = adjustScrollOffset && getElmentScroll(_viewport);\r\n\r\n      _viewportAddRemoveClass('', dataValueHostUpdating, true);\r\n\r\n      each(updateSegments, (updateSegment) => {\r\n        assignDeep(updateHints, updateSegment(updateInfo, updateHints) || {});\r\n      });\r\n\r\n      _viewportAddRemoveClass('', dataValueHostUpdating);\r\n\r\n      scrollElementTo(_viewport, scrollOffset);\r\n      !_viewportIsTarget && scrollElementTo(_target, 0);\r\n\r\n      return updateHints;\r\n    },\r\n    state,\r\n    elements,\r\n    canceled,\r\n  ];\r\n};\r\n","import { bind, noop, addEventListener, push, runEachAndClear, selfClearTimeout } from '~/support';\r\nimport { getEnvironment } from '~/environment';\r\nimport {\r\n  classNameScrollbarThemeNone,\r\n  classNameScrollbarVisible,\r\n  classNameScrollbarUnusable,\r\n  classNameScrollbarCornerless,\r\n  classNameScrollbarAutoHideHidden,\r\n  classNameScrollbarHandleInteractive,\r\n  classNameScrollbarTrackInteractive,\r\n  classNameScrollbarRtl,\r\n  classNameScrollbarAutoHide,\r\n} from '~/classnames';\r\nimport { type ReadonlyOptions } from '~/options';\r\nimport type { ScrollbarsSetupElementsObj } from './scrollbarsSetup.elements';\r\nimport type {\r\n  ObserversSetupState,\r\n  ObserversSetupUpdateHints,\r\n  Setup,\r\n  SetupUpdateInfo,\r\n  StructureSetupState,\r\n  StructureSetupUpdateHints,\r\n} from '~/setups';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { StructureSetupElementsObj } from '../structureSetup/structureSetup.elements';\r\nimport { createScrollbarsSetupElements } from './scrollbarsSetup.elements';\r\nimport { createScrollbarsSetupEvents } from './scrollbarsSetup.events';\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\r\nexport interface ScrollbarsSetupState {}\r\n\r\nexport interface ScrollbarsSetupUpdateInfo extends SetupUpdateInfo {\r\n  _observersUpdateHints?: ObserversSetupUpdateHints;\r\n  _structureUpdateHints?: StructureSetupUpdateHints;\r\n}\r\n\r\nexport type ScrollbarsSetup = [\r\n  ...Setup<ScrollbarsSetupUpdateInfo, ScrollbarsSetupState, void>,\r\n  /** The elements created by the scrollbars setup. */\r\n  ScrollbarsSetupElementsObj\r\n];\r\n\r\nexport const createScrollbarsSetup = (\r\n  target: InitializationTarget,\r\n  options: ReadonlyOptions,\r\n  observersSetupState: ObserversSetupState,\r\n  structureSetupState: StructureSetupState,\r\n  structureSetupElements: StructureSetupElementsObj,\r\n  onScroll: (event: Event) => void\r\n): ScrollbarsSetup => {\r\n  let autoHideIsMove: boolean | undefined;\r\n  let autoHideIsLeave: boolean | undefined;\r\n  let autoHideNotNever: boolean | undefined;\r\n  let mouseInHost: boolean | undefined;\r\n  let prevTheme: string | null | undefined;\r\n  let instanceAutoHideSuspendScrollDestroyFn = noop;\r\n  let instanceAutoHideDelay = 0;\r\n\r\n  const [requestMouseMoveAnimationFrame, cancelMouseMoveAnimationFrame] = selfClearTimeout();\r\n  const [requestScrollAnimationFrame, cancelScrollAnimationFrame] = selfClearTimeout();\r\n  const [scrollTimeout, clearScrollTimeout] = selfClearTimeout(100);\r\n  const [auotHideMoveTimeout, clearAutoHideTimeout] = selfClearTimeout(100);\r\n  const [autoHideSuspendTimeout, clearAutoHideSuspendTimeout] = selfClearTimeout(100);\r\n  const [auotHideTimeout, clearAutoTimeout] = selfClearTimeout(() => instanceAutoHideDelay);\r\n  const [elements, appendElements] = createScrollbarsSetupElements(\r\n    target,\r\n    structureSetupElements,\r\n    structureSetupState,\r\n    createScrollbarsSetupEvents(options, structureSetupElements, structureSetupState)\r\n  );\r\n  const { _host, _scrollEventElement, _isBody } = structureSetupElements;\r\n  const {\r\n    _scrollbarsAddRemoveClass,\r\n    _refreshScrollbarsHandleLength,\r\n    _refreshScrollbarsHandleOffset,\r\n    _refreshScrollbarsScrollbarOffset,\r\n  } = elements;\r\n  const manageAutoHideSuspension = (add: boolean) => {\r\n    _scrollbarsAddRemoveClass(classNameScrollbarAutoHide, add, true);\r\n    _scrollbarsAddRemoveClass(classNameScrollbarAutoHide, add, false);\r\n  };\r\n  const manageScrollbarsAutoHide = (removeAutoHide: boolean, delayless?: boolean) => {\r\n    clearAutoTimeout();\r\n    if (removeAutoHide) {\r\n      _scrollbarsAddRemoveClass(classNameScrollbarAutoHideHidden);\r\n    } else {\r\n      const hide = bind(_scrollbarsAddRemoveClass, classNameScrollbarAutoHideHidden, true);\r\n      if (instanceAutoHideDelay > 0 && !delayless) {\r\n        auotHideTimeout(hide);\r\n      } else {\r\n        hide();\r\n      }\r\n    }\r\n  };\r\n\r\n  // needed to not fire unnecessary operations for pointer events on safari which will cause side effects: https://github.com/KingSora/OverlayScrollbars/issues/560\r\n  const isHoverablePointerType = (event: PointerEvent) => event.pointerType === 'mouse';\r\n\r\n  const onHostMouseEnter = (event: PointerEvent) => {\r\n    if (isHoverablePointerType(event)) {\r\n      mouseInHost = autoHideIsLeave;\r\n      mouseInHost && manageScrollbarsAutoHide(true);\r\n    }\r\n  };\r\n\r\n  const destroyFns: (() => void)[] = [\r\n    clearScrollTimeout,\r\n    clearAutoTimeout,\r\n    clearAutoHideTimeout,\r\n    clearAutoHideSuspendTimeout,\r\n    cancelScrollAnimationFrame,\r\n    cancelMouseMoveAnimationFrame,\r\n    () => instanceAutoHideSuspendScrollDestroyFn(),\r\n\r\n    addEventListener(_host, 'pointerover', onHostMouseEnter, { _once: true }),\r\n    addEventListener(_host, 'pointerenter', onHostMouseEnter),\r\n    addEventListener(_host, 'pointerleave', (event: PointerEvent) => {\r\n      if (isHoverablePointerType(event)) {\r\n        mouseInHost = false;\r\n        autoHideIsLeave && manageScrollbarsAutoHide(false);\r\n      }\r\n    }),\r\n    addEventListener(_host, 'pointermove', (event: PointerEvent) => {\r\n      isHoverablePointerType(event) &&\r\n        autoHideIsMove &&\r\n        requestMouseMoveAnimationFrame(() => {\r\n          clearScrollTimeout();\r\n          manageScrollbarsAutoHide(true);\r\n          auotHideMoveTimeout(() => {\r\n            autoHideIsMove && manageScrollbarsAutoHide(false);\r\n          });\r\n        });\r\n    }),\r\n    addEventListener(_scrollEventElement, 'scroll', (event) => {\r\n      requestScrollAnimationFrame(() => {\r\n        _refreshScrollbarsHandleOffset();\r\n\r\n        autoHideNotNever && manageScrollbarsAutoHide(true);\r\n        scrollTimeout(() => {\r\n          autoHideNotNever && !mouseInHost && manageScrollbarsAutoHide(false);\r\n        });\r\n      });\r\n\r\n      onScroll(event);\r\n\r\n      _refreshScrollbarsScrollbarOffset();\r\n    }),\r\n  ];\r\n\r\n  return [\r\n    () => bind(runEachAndClear, push(destroyFns, appendElements())),\r\n    ({ _checkOption, _force, _observersUpdateHints, _structureUpdateHints }) => {\r\n      const { _overflowEdgeChanged, _overflowAmountChanged, _overflowStyleChanged } =\r\n        _structureUpdateHints || {};\r\n      const { _directionChanged, _appear } = _observersUpdateHints || {};\r\n      const { _directionIsRTL } = observersSetupState;\r\n      const { _nativeScrollbarsOverlaid } = getEnvironment();\r\n      const { _overflowAmount, _overflowStyle, _hasOverflow } = structureSetupState;\r\n      const [showNativeOverlaidScrollbarsOption, showNativeOverlaidScrollbarsChanged] =\r\n        _checkOption('showNativeOverlaidScrollbars');\r\n      const [theme, themeChanged] = _checkOption('scrollbars.theme');\r\n      const [visibility, visibilityChanged] = _checkOption('scrollbars.visibility');\r\n      const [autoHide, autoHideChanged] = _checkOption('scrollbars.autoHide');\r\n      const [autoHideSuspend, autoHideSuspendChanged] = _checkOption('scrollbars.autoHideSuspend');\r\n      const [autoHideDelay] = _checkOption('scrollbars.autoHideDelay');\r\n      const [dragScroll, dragScrollChanged] = _checkOption('scrollbars.dragScroll');\r\n      const [clickScroll, clickScrollChanged] = _checkOption('scrollbars.clickScroll');\r\n      const trulyAppeared = _appear && !_force;\r\n      const hasOverflow = _hasOverflow.x || _hasOverflow.y;\r\n      const updateScrollbars =\r\n        _overflowEdgeChanged || _overflowAmountChanged || _directionChanged || _force;\r\n      const updateVisibility = _overflowStyleChanged || visibilityChanged;\r\n      const showNativeOverlaidScrollbars =\r\n        showNativeOverlaidScrollbarsOption &&\r\n        _nativeScrollbarsOverlaid.x &&\r\n        _nativeScrollbarsOverlaid.y;\r\n\r\n      const setScrollbarVisibility = (overflowStyle: OverflowStyle, isHorizontal: boolean) => {\r\n        const isVisible =\r\n          visibility === 'visible' || (visibility === 'auto' && overflowStyle === 'scroll');\r\n        _scrollbarsAddRemoveClass(classNameScrollbarVisible, isVisible, isHorizontal);\r\n        return isVisible;\r\n      };\r\n\r\n      instanceAutoHideDelay = autoHideDelay;\r\n\r\n      if (trulyAppeared) {\r\n        if (autoHideSuspend && hasOverflow) {\r\n          manageAutoHideSuspension(false);\r\n          instanceAutoHideSuspendScrollDestroyFn();\r\n          autoHideSuspendTimeout(() => {\r\n            instanceAutoHideSuspendScrollDestroyFn = addEventListener(\r\n              _scrollEventElement,\r\n              'scroll',\r\n              bind(manageAutoHideSuspension, true),\r\n              {\r\n                _once: true,\r\n              }\r\n            );\r\n          });\r\n        } else {\r\n          manageAutoHideSuspension(true);\r\n        }\r\n      }\r\n\r\n      if (showNativeOverlaidScrollbarsChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarThemeNone, showNativeOverlaidScrollbars);\r\n      }\r\n\r\n      if (themeChanged) {\r\n        _scrollbarsAddRemoveClass(prevTheme);\r\n        _scrollbarsAddRemoveClass(theme, true);\r\n\r\n        prevTheme = theme;\r\n      }\r\n\r\n      if (autoHideSuspendChanged && !autoHideSuspend) {\r\n        manageAutoHideSuspension(true);\r\n      }\r\n\r\n      if (autoHideChanged) {\r\n        autoHideIsMove = autoHide === 'move';\r\n        autoHideIsLeave = autoHide === 'leave';\r\n        autoHideNotNever = autoHide !== 'never';\r\n        manageScrollbarsAutoHide(!autoHideNotNever, true);\r\n      }\r\n\r\n      if (dragScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarHandleInteractive, dragScroll);\r\n      }\r\n\r\n      if (clickScrollChanged) {\r\n        _scrollbarsAddRemoveClass(classNameScrollbarTrackInteractive, clickScroll);\r\n      }\r\n\r\n      if (updateVisibility) {\r\n        const xVisible = setScrollbarVisibility(_overflowStyle.x, true);\r\n        const yVisible = setScrollbarVisibility(_overflowStyle.y, false);\r\n        const hasCorner = xVisible && yVisible;\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarCornerless, !hasCorner);\r\n      }\r\n\r\n      if (updateScrollbars) {\r\n        // order is matter! length has to be refreshed before offset\r\n        _refreshScrollbarsHandleLength();\r\n        _refreshScrollbarsHandleOffset();\r\n        _refreshScrollbarsScrollbarOffset();\r\n\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_overflowAmount.x, true);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarUnusable, !_overflowAmount.y, false);\r\n        _scrollbarsAddRemoveClass(classNameScrollbarRtl, _directionIsRTL && !_isBody);\r\n      }\r\n    },\r\n    {},\r\n    elements,\r\n  ];\r\n};\r\n","import {\r\n  assignDeep,\r\n  isEmptyObject,\r\n  isFunction,\r\n  isHTMLElement,\r\n  createEventListenerHub,\r\n  isPlainObject,\r\n  keys,\r\n  isArray,\r\n  push,\r\n  runEachAndClear,\r\n  bind,\r\n  removeUndefinedProperties,\r\n} from '~/support';\r\nimport { getOptionsDiff } from '~/options';\r\nimport { getEnvironment } from '~/environment';\r\nimport { cancelInitialization } from '~/initialization';\r\nimport { addInstance, getInstance, removeInstance } from '~/instances';\r\nimport { createSetups } from '~/setups';\r\nimport {\r\n  addPlugins,\r\n  getStaticPluginModuleInstance,\r\n  optionsValidationPluginModuleName,\r\n  pluginModules,\r\n  registerPluginModuleInstances,\r\n} from '~/plugins';\r\nimport type { Environment } from '~/environment';\r\nimport type { XY, TRBL } from '~/support';\r\nimport type { Options, PartialOptions, ReadonlyOptions } from '~/options';\r\nimport type {\r\n  InferInstancePluginModuleInstance,\r\n  InferStaticPluginModuleInstance,\r\n  InstancePlugin,\r\n  OptionsValidationPlugin,\r\n  Plugin,\r\n  PluginModuleInstance,\r\n  StaticPlugin,\r\n} from '~/plugins';\r\nimport type { InitializationTarget } from '~/initialization';\r\nimport type { OverflowStyle } from '~/typings';\r\nimport type { EventListenerArgs, EventListener, EventListeners } from '~/eventListeners';\r\nimport type {\r\n  ScrollbarsSetupElement,\r\n  ScrollbarStructure,\r\n} from '~/setups/scrollbarsSetup/scrollbarsSetup.elements';\r\n\r\n// Notes:\r\n// Height intrinsic detection use \"content: true\" init strategy - or open ticket for custom height intrinsic observer\r\n\r\n/**\r\n * The primary entry point to OverlayScrollbars.\r\n */\r\nexport interface OverlayScrollbarsStatic {\r\n  /**\r\n   * Returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The initialization target to from which the instance shall be returned.\r\n   */\r\n  (target: InitializationTarget): OverlayScrollbars | undefined;\r\n  /**\r\n   * Initializes a new OverlayScrollbars instance to the given target\r\n   * or returns the current OverlayScrollbars instance if the target already has an instance.\r\n   * @param target The target.\r\n   * @param options The options. (Can be just an empty object)\r\n   * @param eventListeners Optional event listeners.\r\n   */\r\n  (\r\n    target: InitializationTarget,\r\n    options: PartialOptions,\r\n    eventListeners?: EventListeners\r\n  ): OverlayScrollbars;\r\n\r\n  /**\r\n   * Adds a single plugin.\r\n   * @param plugin The plugin to be added.\r\n   * @returns The plugins static modules instance or `void` if no instance was found.\r\n   */\r\n  plugin<P extends Plugin>(\r\n    plugin: P\r\n  ): P extends StaticPlugin ? InferStaticPluginModuleInstance<P> : void;\r\n  /**\r\n   * Adds multiple plugins.\r\n   * @param plugins The plugins to be added.\r\n   * @returns The plugins static modules instances or `void` if no instance was found.\r\n   */\r\n  plugin<P extends [Plugin, ...Plugin[]]>(\r\n    plugins: P\r\n  ): P extends [Plugin, ...Plugin[]]\r\n    ? {\r\n        [K in keyof P]: P[K] extends StaticPlugin ? InferStaticPluginModuleInstance<P[K]> : void;\r\n      }\r\n    : void;\r\n\r\n  /**\r\n   * Checks whether the passed value is a valid and not destroyed overlayscrollbars instance.\r\n   * @param osInstance The value which shall be checked.\r\n   */\r\n  valid(osInstance: any): osInstance is OverlayScrollbars;\r\n  /**\r\n   * Gets the environment.\r\n   */\r\n  env(): Environment;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instances state.\r\n */\r\nexport interface State {\r\n  /** Describes the current padding in pixel. */\r\n  padding: TRBL;\r\n  /** Whether the current padding is absolute. */\r\n  paddingAbsolute: boolean;\r\n  /** The client width (x) & height (y) of the viewport in pixel. */\r\n  overflowEdge: XY<number>;\r\n  /** The overflow amount in pixel. */\r\n  overflowAmount: XY<number>;\r\n  /** The css overflow style of the viewport. */\r\n  overflowStyle: XY<OverflowStyle>;\r\n  /** Whether the viewport has an overflow. */\r\n  hasOverflow: XY<boolean>;\r\n  /** Whether the direction is considered rtl. */\r\n  directionRTL: boolean;\r\n  /** Whether the instance is considered destroyed. */\r\n  destroyed: boolean;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar.\r\n */\r\nexport interface ScrollbarElements {\r\n  /**\r\n   * The root element of the scrollbar.\r\n   * The HTML structure looks like this:\r\n   * <scrollbar>\r\n   *   <track>\r\n   *     <handle />\r\n   *   </track>\r\n   * </scrollbar>\r\n   */\r\n  scrollbar: HTMLElement;\r\n  /** The track element of the scrollbar. */\r\n  track: HTMLElement;\r\n  /** The handle element of the scrollbar. */\r\n  handle: HTMLElement;\r\n}\r\n\r\n/**\r\n * Describes the elements of a scrollbar and provides the possibility to clone them.\r\n */\r\nexport interface CloneableScrollbarElements extends ScrollbarElements {\r\n  /**\r\n   * Clones the current scrollbar and returns the cloned elements.\r\n   * The returned elements aren't added to the DOM.\r\n   */\r\n  clone(): ScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes the elements of a OverlayScrollbars instance.\r\n */\r\nexport interface Elements {\r\n  /** The element the instance was applied to. */\r\n  target: HTMLElement;\r\n  /** The host element. Its the root of all other elements. */\r\n  host: HTMLElement;\r\n  /**\r\n   * The element which is responsible to apply correct paddings.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  padding: HTMLElement;\r\n  /** The element which is responsible to do any scrolling. */\r\n  viewport: HTMLElement;\r\n  /**\r\n   * The element which is responsible to hold the content.\r\n   * Depending on the Initialization it can be the same as the viewport element.\r\n   */\r\n  content: HTMLElement;\r\n  /**\r\n   * The element through which you can get the current `scrollLeft` or `scrollTop` offset.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollOffsetElement: HTMLElement;\r\n  /**\r\n   * The element through which you can add `scroll` events.\r\n   * Depending on the target element it can be the same as the viewport element.\r\n   */\r\n  scrollEventElement: HTMLElement | Document;\r\n  /** The horizontal scrollbar elements. */\r\n  scrollbarHorizontal: CloneableScrollbarElements;\r\n  /** The vertical scrollbar elements. */\r\n  scrollbarVertical: CloneableScrollbarElements;\r\n}\r\n\r\n/**\r\n * Describes a OverlayScrollbars instance.\r\n */\r\nexport interface OverlayScrollbars {\r\n  /** Gets the current options of the instance. */\r\n  options(): Options;\r\n  /**\r\n   * Sets the options of the instance.\r\n   * If the new options are partially filled, they're deeply merged with either the current options or the current default options.\r\n   * @param newOptions The new options which should be applied.\r\n   * @param pure Whether the options should be reset before the new options are added.\r\n   * @returns Returns the current options of the instance.\r\n   */\r\n  options(newOptions: PartialOptions, pure?: boolean): Options;\r\n\r\n  /**\r\n   * Adds event listeners to the instance.\r\n   * @param eventListeners An object which contains the added listeners.\r\n   * @param pure Whether all already added event listeners should be removed before the new listeners are added.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on(eventListeners: EventListeners, pure?: boolean): () => void;\r\n  /**\r\n   * Adds a single event listener to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which is invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): () => void;\r\n  /**\r\n   * Adds multiple event listeners to the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which are invoked on that event.\r\n   * @returns Returns a function which removes the added listeners.\r\n   */\r\n  on<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): () => void;\r\n\r\n  /**\r\n   * Removes a single event listener from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listener which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>): void;\r\n  /**\r\n   * Removes multiple event listeners from the instance.\r\n   * @param name The name of the event.\r\n   * @param listener The listeners which shall be removed.\r\n   */\r\n  off<N extends keyof EventListenerArgs>(name: N, listener: EventListener<N>[]): void;\r\n\r\n  /**\r\n   * Updates the instance.\r\n   * @param force Whether the update should force the cache to be invalidated.\r\n   * @returns A boolean which indicates whether the `update` event was triggered through this update.\r\n   * The update event is only triggered if something changed because of this update.\r\n   */\r\n  update(force?: boolean): boolean;\r\n  /** Returns the state of the instance. */\r\n  state(): State;\r\n  /** Returns the elements of the instance. */\r\n  elements(): Elements;\r\n  /** Destroys the instance and removes all added elements. */\r\n  destroy(): void;\r\n  /** Returns the instance of the passed plugin or `undefined` if no instance was found. */\r\n  plugin<P extends InstancePlugin>(osPlugin: P): InferInstancePluginModuleInstance<P> | undefined;\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-redeclare\r\nexport const OverlayScrollbars: OverlayScrollbarsStatic = (\r\n  target: InitializationTarget,\r\n  options?: PartialOptions,\r\n  eventListeners?: EventListeners\r\n) => {\r\n  const { _getDefaultOptions } = getEnvironment();\r\n  const targetIsElement = isHTMLElement(target);\r\n  const instanceTarget = targetIsElement ? target : target.target;\r\n  const potentialInstance = getInstance(instanceTarget);\r\n  if (options && !potentialInstance) {\r\n    let destroyed = false;\r\n    const destroyFns: (() => void)[] = [];\r\n    const instancePluginModuleInstances: Record<string, PluginModuleInstance> = {};\r\n    const validateOptions = (newOptions: PartialOptions) => {\r\n      const newOptionsWithoutUndefined = removeUndefinedProperties(newOptions, true);\r\n      const pluginValidate = getStaticPluginModuleInstance<typeof OptionsValidationPlugin>(\r\n        optionsValidationPluginModuleName\r\n      );\r\n      return pluginValidate\r\n        ? pluginValidate(newOptionsWithoutUndefined, true)\r\n        : newOptionsWithoutUndefined;\r\n    };\r\n    const currentOptions: ReadonlyOptions = assignDeep(\r\n      {},\r\n      _getDefaultOptions(),\r\n      validateOptions(options)\r\n    );\r\n    const [addPluginEvent, removePluginEvents, triggerPluginEvent] =\r\n      createEventListenerHub<EventListenerArgs>();\r\n    const [addInstanceEvent, removeInstanceEvents, triggerInstanceEvent] =\r\n      createEventListenerHub(eventListeners);\r\n    const triggerEvent: typeof triggerPluginEvent = (name, args) => {\r\n      triggerInstanceEvent(name, args);\r\n      triggerPluginEvent(name, args);\r\n    };\r\n    const [setupsConstruct, setupsUpdate, setupsState, setupsElements, setupsCanceled] =\r\n      createSetups(\r\n        target,\r\n        currentOptions,\r\n        ({ _changedOptions, _force }, { _observersUpdateHints, _structureUpdateHints }) => {\r\n          const {\r\n            _sizeChanged,\r\n            _directionChanged,\r\n            _heightIntrinsicChanged,\r\n            _contentMutation,\r\n            _hostMutation,\r\n            _appear,\r\n          } = _observersUpdateHints;\r\n\r\n          const { _overflowEdgeChanged, _overflowAmountChanged, _overflowStyleChanged } =\r\n            _structureUpdateHints;\r\n\r\n          triggerEvent('updated', [\r\n            // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n            instance,\r\n            {\r\n              updateHints: {\r\n                sizeChanged: !!_sizeChanged,\r\n                directionChanged: !!_directionChanged,\r\n                heightIntrinsicChanged: !!_heightIntrinsicChanged,\r\n                overflowEdgeChanged: !!_overflowEdgeChanged,\r\n                overflowAmountChanged: !!_overflowAmountChanged,\r\n                overflowStyleChanged: !!_overflowStyleChanged,\r\n                contentMutation: !!_contentMutation,\r\n                hostMutation: !!_hostMutation,\r\n                appear: !!_appear,\r\n              },\r\n              changedOptions: _changedOptions || {},\r\n              force: !!_force,\r\n            },\r\n          ]);\r\n        },\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        (scrollEvent) => triggerEvent('scroll', [instance, scrollEvent])\r\n      );\r\n\r\n    const destroy = (canceled: boolean) => {\r\n      removeInstance(instanceTarget);\r\n      runEachAndClear(destroyFns);\r\n\r\n      destroyed = true;\r\n\r\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n      triggerEvent('destroyed', [instance, canceled]);\r\n      removePluginEvents();\r\n      removeInstanceEvents();\r\n    };\r\n\r\n    const instance: OverlayScrollbars = {\r\n      options(newOptions?: PartialOptions, pure?: boolean) {\r\n        if (newOptions) {\r\n          const base = pure ? _getDefaultOptions() : {};\r\n          const changedOptions = getOptionsDiff(\r\n            currentOptions,\r\n            assignDeep(base, validateOptions(newOptions))\r\n          );\r\n          if (!isEmptyObject(changedOptions)) {\r\n            assignDeep(currentOptions, changedOptions);\r\n            setupsUpdate({ _changedOptions: changedOptions });\r\n          }\r\n        }\r\n        return assignDeep({}, currentOptions);\r\n      },\r\n      on: addInstanceEvent,\r\n      off: (name, listener) => {\r\n        name && listener && removeInstanceEvents(name, listener);\r\n      },\r\n      state() {\r\n        const { _observersSetupState, _structureSetupState } = setupsState();\r\n        const { _directionIsRTL } = _observersSetupState;\r\n        const {\r\n          _overflowEdge,\r\n          _overflowAmount,\r\n          _overflowStyle,\r\n          _hasOverflow,\r\n          _padding,\r\n          _paddingAbsolute,\r\n        } = _structureSetupState;\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            overflowEdge: _overflowEdge,\r\n            overflowAmount: _overflowAmount,\r\n            overflowStyle: _overflowStyle,\r\n            hasOverflow: _hasOverflow,\r\n            padding: _padding,\r\n            paddingAbsolute: _paddingAbsolute,\r\n            directionRTL: _directionIsRTL,\r\n            destroyed,\r\n          }\r\n        );\r\n      },\r\n      elements() {\r\n        const {\r\n          _target,\r\n          _host,\r\n          _padding,\r\n          _viewport,\r\n          _content,\r\n          _scrollOffsetElement,\r\n          _scrollEventElement,\r\n        } = setupsElements._structureSetupElements;\r\n        const { _horizontal, _vertical } = setupsElements._scrollbarsSetupElements;\r\n        const translateScrollbarStructure = (\r\n          scrollbarStructure: ScrollbarStructure\r\n        ): ScrollbarElements => {\r\n          const { _handle, _track, _scrollbar } = scrollbarStructure;\r\n          return {\r\n            scrollbar: _scrollbar,\r\n            track: _track,\r\n            handle: _handle,\r\n          };\r\n        };\r\n        const translateScrollbarsSetupElement = (\r\n          scrollbarsSetupElement: ScrollbarsSetupElement\r\n        ): CloneableScrollbarElements => {\r\n          const { _scrollbarStructures, _clone } = scrollbarsSetupElement;\r\n          const translatedStructure = translateScrollbarStructure(_scrollbarStructures[0]);\r\n\r\n          return assignDeep({}, translatedStructure, {\r\n            clone: () => {\r\n              const result = translateScrollbarStructure(_clone());\r\n              setupsUpdate({ _cloneScrollbar: true });\r\n              return result;\r\n            },\r\n          });\r\n        };\r\n        return assignDeep(\r\n          {},\r\n          {\r\n            target: _target,\r\n            host: _host,\r\n            padding: _padding || _viewport,\r\n            viewport: _viewport,\r\n            content: _content || _viewport,\r\n            scrollOffsetElement: _scrollOffsetElement,\r\n            scrollEventElement: _scrollEventElement,\r\n            scrollbarHorizontal: translateScrollbarsSetupElement(_horizontal),\r\n            scrollbarVertical: translateScrollbarsSetupElement(_vertical),\r\n          }\r\n        );\r\n      },\r\n      update: (_force?: boolean) => setupsUpdate({ _force, _takeRecords: true }),\r\n      destroy: bind(destroy, false),\r\n      plugin: <P extends InstancePlugin>(plugin: P) =>\r\n        instancePluginModuleInstances[keys(plugin)[0]] as\r\n          | InferInstancePluginModuleInstance<P>\r\n          | undefined,\r\n    };\r\n\r\n    push(destroyFns, [setupsCanceled]);\r\n\r\n    // valid inside plugins\r\n    addInstance(instanceTarget, instance);\r\n\r\n    // init plugins\r\n    registerPluginModuleInstances(pluginModules, OverlayScrollbars, [\r\n      instance,\r\n      addPluginEvent,\r\n      instancePluginModuleInstances,\r\n    ]);\r\n\r\n    if (\r\n      cancelInitialization(\r\n        setupsElements._structureSetupElements._isBody,\r\n        !targetIsElement && target.cancel\r\n      )\r\n    ) {\r\n      destroy(true);\r\n      return instance;\r\n    }\r\n\r\n    push(destroyFns, setupsConstruct());\r\n\r\n    triggerEvent('initialized', [instance]);\r\n\r\n    instance.update(true);\r\n\r\n    return instance;\r\n  }\r\n  return potentialInstance!;\r\n};\r\n\r\nOverlayScrollbars.plugin = (plugins: Plugin | Plugin[]) => {\r\n  const isArr = isArray(plugins);\r\n  const pluginsToAdd: Plugin<string, void | PluginModuleInstance, void | PluginModuleInstance>[] =\r\n    isArr ? plugins : [plugins];\r\n  const result = pluginsToAdd.map(\r\n    (plugin) => registerPluginModuleInstances(plugin, OverlayScrollbars)[0]\r\n  );\r\n  addPlugins(pluginsToAdd);\r\n  return isArr ? result : (result[0] as any);\r\n};\r\nOverlayScrollbars.valid = (osInstance: any): osInstance is OverlayScrollbars => {\r\n  const hasElmsFn = osInstance && (osInstance as OverlayScrollbars).elements;\r\n  const elements = isFunction(hasElmsFn) && hasElmsFn();\r\n  return isPlainObject(elements) && !!getInstance(elements.target);\r\n};\r\nOverlayScrollbars.env = () => {\r\n  const {\r\n    _nativeScrollbarsSize,\r\n    _nativeScrollbarsOverlaid,\r\n    _nativeScrollbarsHiding,\r\n    _rtlScrollBehavior,\r\n    _flexboxGlue,\r\n    _cssCustomProperties,\r\n    _scrollTimeline,\r\n    _staticDefaultInitialization,\r\n    _staticDefaultOptions,\r\n    _getDefaultInitialization,\r\n    _setDefaultInitialization,\r\n    _getDefaultOptions,\r\n    _setDefaultOptions,\r\n  } = getEnvironment();\r\n  return assignDeep(\r\n    {},\r\n    {\r\n      scrollbarsSize: _nativeScrollbarsSize,\r\n      scrollbarsOverlaid: _nativeScrollbarsOverlaid,\r\n      scrollbarsHiding: _nativeScrollbarsHiding,\r\n      rtlScrollBehavior: _rtlScrollBehavior,\r\n      flexboxGlue: _flexboxGlue,\r\n      cssCustomProperties: _cssCustomProperties,\r\n      scrollTimeline: _scrollTimeline,\r\n      staticDefaultInitialization: _staticDefaultInitialization,\r\n      staticDefaultOptions: _staticDefaultOptions,\r\n\r\n      getDefaultInitialization: _getDefaultInitialization,\r\n      setDefaultInitialization: _setDefaultInitialization,\r\n      getDefaultOptions: _getDefaultOptions,\r\n      setDefaultOptions: _setDefaultOptions,\r\n    }\r\n  );\r\n};\r\n","import type {\r\n  Options,\r\n  PartialOptions,\r\n  OverflowBehavior,\r\n  ScrollbarsVisibilityBehavior,\r\n  ScrollbarsAutoHideBehavior,\r\n} from '~/options';\r\nimport type { OptionsTemplate, OptionsTemplateValue } from './validation';\r\nimport type { StaticPlugin } from '~/plugins';\r\nimport { validateOptions, optionsTemplateTypes as oTypes } from './validation';\r\n\r\nexport const optionsValidationPluginModuleName = '__osOptionsValidationPlugin';\r\n\r\nexport const OptionsValidationPlugin = /* @__PURE__ */ (() => ({\r\n  [optionsValidationPluginModuleName]: {\r\n    static: () => {\r\n      const numberAllowedValues: OptionsTemplateValue<number> = oTypes.number;\r\n      const booleanAllowedValues: OptionsTemplateValue<boolean> = oTypes.boolean;\r\n      const arrayNullValues: OptionsTemplateValue<Array<unknown> | null> = [\r\n        oTypes.array,\r\n        oTypes.null,\r\n      ];\r\n      const overflowAllowedValues: OptionsTemplateValue<OverflowBehavior> =\r\n        'hidden scroll visible visible-hidden';\r\n      const scrollbarsVisibilityAllowedValues: OptionsTemplateValue<ScrollbarsVisibilityBehavior> =\r\n        'visible hidden auto';\r\n      const scrollbarsAutoHideAllowedValues: OptionsTemplateValue<ScrollbarsAutoHideBehavior> =\r\n        'never scroll leavemove';\r\n\r\n      const optionsTemplate: OptionsTemplate<Options> = {\r\n        // resize: resizeAllowedValues, // none || both  || horizontal || vertical || n || b ||\r\n        paddingAbsolute: booleanAllowedValues, // true || false\r\n        showNativeOverlaidScrollbars: booleanAllowedValues, // true || false\r\n        update: {\r\n          elementEvents: arrayNullValues, // array of tuples || null\r\n          attributes: arrayNullValues,\r\n          debounce: [oTypes.number, oTypes.array, oTypes.null], // number || number array || null\r\n          ignoreMutation: [oTypes.function, oTypes.null], // function || null\r\n        },\r\n        overflow: {\r\n          x: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\r\n          y: overflowAllowedValues, // visible-hidden  || visible-scroll || hidden || scrol\r\n        },\r\n        scrollbars: {\r\n          theme: [oTypes.string, oTypes.null], // string || null\r\n          visibility: scrollbarsVisibilityAllowedValues, // visible || hidden || auto || v ||\r\n          autoHide: scrollbarsAutoHideAllowedValues, // never || scroll || leave || move ||\r\n          autoHideDelay: numberAllowedValues, // number\r\n          autoHideSuspend: booleanAllowedValues, // true || false\r\n          dragScroll: booleanAllowedValues, // true || false\r\n          clickScroll: booleanAllowedValues, // true || false\r\n          pointers: [oTypes.array, oTypes.null], // string array\r\n        },\r\n        /*\r\n        textarea: {\r\n          dynWidth: booleanAllowedValues, // true || false\r\n          dynHeight: booleanAllowedValues, // true || false\r\n          inheritedAttrs: stringArrayNullAllowedValues, // string || array || nul\r\n        },\r\n        */\r\n      };\r\n      return (options: PartialOptions, doWriteErrors?: boolean): PartialOptions => {\r\n        const [validated, foreign] = validateOptions(optionsTemplate, options, doWriteErrors);\r\n        return { ...foreign, ...validated };\r\n      };\r\n    },\r\n  },\r\n}))() satisfies StaticPlugin<typeof optionsValidationPluginModuleName>;\r\n","import { useEffect, useMemo, useRef } from 'react';\r\nimport { OverlayScrollbars } from 'overlayscrollbars';\r\nimport type { InitializationTarget } from 'overlayscrollbars';\r\nimport type {\r\n  OverlayScrollbarsComponentProps,\r\n  OverlayScrollbarsComponentRef,\r\n} from './OverlayScrollbarsComponent';\r\n\r\ntype Defer = [\r\n  requestDefer: (callback: () => any, options?: OverlayScrollbarsComponentProps['defer']) => void,\r\n  cancelDefer: () => void\r\n];\r\n\r\nexport interface UseOverlayScrollbarsParams {\r\n  /** OverlayScrollbars options. */\r\n  options?: OverlayScrollbarsComponentProps['options'];\r\n  /** OverlayScrollbars events. */\r\n  events?: OverlayScrollbarsComponentProps['events'];\r\n  /** Whether to defer the initialization to a point in time when the browser is idle. (or to the next frame if `window.requestIdleCallback` is not supported) */\r\n  defer?: OverlayScrollbarsComponentProps['defer'];\r\n}\r\n\r\nexport type UseOverlayScrollbarsInitialization = (target: InitializationTarget) => void;\r\n\r\nexport type UseOverlayScrollbarsInstance = () => ReturnType<\r\n  OverlayScrollbarsComponentRef['osInstance']\r\n>;\r\n\r\nconst createDefer = (): Defer => {\r\n  /* c8 ignore start */\r\n  if (typeof window === 'undefined') {\r\n    // mock ssr calls with \"noop\"\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    const noop = () => {};\r\n    return [noop, noop];\r\n  }\r\n  /* c8 ignore end */\r\n\r\n  let idleId: number;\r\n  let rafId: number;\r\n  const wnd = window;\r\n  const idleSupported = typeof wnd.requestIdleCallback === 'function';\r\n  const rAF = wnd.requestAnimationFrame;\r\n  const cAF = wnd.cancelAnimationFrame;\r\n  const rIdle = idleSupported ? wnd.requestIdleCallback : rAF;\r\n  const cIdle = idleSupported ? wnd.cancelIdleCallback : cAF;\r\n  const clear = () => {\r\n    cIdle(idleId);\r\n    cAF(rafId);\r\n  };\r\n\r\n  return [\r\n    (callback, options) => {\r\n      clear();\r\n      idleId = rIdle(\r\n        idleSupported\r\n          ? () => {\r\n              clear();\r\n              // inside idle its best practice to use rAF to change DOM for best performance\r\n              rafId = rAF(callback);\r\n            }\r\n          : callback,\r\n        typeof options === 'object' ? options : { timeout: 2233 }\r\n      );\r\n    },\r\n    clear,\r\n  ];\r\n};\r\n\r\n/**\r\n * Hook for advanced usage of OverlayScrollbars. (When the OverlayScrollbarsComponent is not enough)\r\n * @param params Parameters for customization.\r\n * @returns A tuple with two values:\r\n * The first value is the initialization function, it takes one argument which is the `InitializationTarget`.\r\n * The second value is a function which returns the current OverlayScrollbars instance or `null` if not initialized.\r\n */\r\nexport const useOverlayScrollbars = (\r\n  params?: UseOverlayScrollbarsParams\r\n): [UseOverlayScrollbarsInitialization, UseOverlayScrollbarsInstance] => {\r\n  const { options, events, defer } = params || {};\r\n  const [requestDefer, cancelDefer] = useMemo<Defer>(createDefer, []);\r\n  const instanceRef = useRef<ReturnType<UseOverlayScrollbarsInstance>>(null);\r\n  const deferRef = useRef(defer);\r\n  const optionsRef = useRef(options);\r\n  const eventsRef = useRef(events);\r\n\r\n  useEffect(() => {\r\n    deferRef.current = defer;\r\n  }, [defer]);\r\n\r\n  useEffect(() => {\r\n    const { current: instance } = instanceRef;\r\n\r\n    optionsRef.current = options;\r\n\r\n    if (OverlayScrollbars.valid(instance)) {\r\n      instance.options(options || {}, true);\r\n    }\r\n  }, [options]);\r\n\r\n  useEffect(() => {\r\n    const { current: instance } = instanceRef;\r\n\r\n    eventsRef.current = events;\r\n\r\n    if (OverlayScrollbars.valid(instance)) {\r\n      instance.on(events || {}, true);\r\n    }\r\n  }, [events]);\r\n\r\n  useEffect(\r\n    () => () => {\r\n      cancelDefer();\r\n      instanceRef.current?.destroy();\r\n    },\r\n    []\r\n  );\r\n\r\n  return useMemo<[UseOverlayScrollbarsInitialization, UseOverlayScrollbarsInstance]>(\r\n    () => [\r\n      (target) => {\r\n        // if already initialized do nothing\r\n        const presentInstance = instanceRef.current;\r\n        if (OverlayScrollbars.valid(presentInstance)) {\r\n          return;\r\n        }\r\n\r\n        const currDefer = deferRef.current;\r\n        const currOptions = optionsRef.current || {};\r\n        const currEvents = eventsRef.current || {};\r\n        const init = () =>\r\n          (instanceRef.current = OverlayScrollbars(target, currOptions, currEvents));\r\n\r\n        if (currDefer) {\r\n          requestDefer(init, currDefer);\r\n        } else {\r\n          init();\r\n        }\r\n      },\r\n      () => instanceRef.current,\r\n    ],\r\n    []\r\n  );\r\n};\r\n","import { forwardRef, useEffect, useRef, useImperativeHandle } from 'react';\r\nimport type { OverlayScrollbars } from 'overlayscrollbars';\r\nimport type { PartialOptions, EventListeners } from 'overlayscrollbars';\r\nimport type { ComponentPropsWithoutRef, ElementRef, ForwardedRef } from 'react';\r\nimport { useOverlayScrollbars } from './useOverlayScrollbars';\r\n\r\ntype OverlayScrollbarsComponentBaseProps<T extends keyof JSX.IntrinsicElements> =\r\n  ComponentPropsWithoutRef<T> & {\r\n    /** Tag of the root element. */\r\n    element?: T;\r\n    /** OverlayScrollbars options. */\r\n    options?: PartialOptions | false | null;\r\n    /** OverlayScrollbars events. */\r\n    events?: EventListeners | false | null;\r\n    /** Whether to defer the initialization to a point in time when the browser is idle. (or to the next frame if `window.requestIdleCallback` is not supported) */\r\n    defer?: boolean | IdleRequestOptions;\r\n  };\r\n\r\nexport type OverlayScrollbarsComponentProps<T extends keyof JSX.IntrinsicElements = 'div'> =\r\n  OverlayScrollbarsComponentBaseProps<T> & {\r\n    ref?: ForwardedRef<OverlayScrollbarsComponentRef<T>>;\r\n  };\r\n\r\nexport interface OverlayScrollbarsComponentRef<T extends keyof JSX.IntrinsicElements = 'div'> {\r\n  /** Returns the OverlayScrollbars instance or null if not initialized. */\r\n  osInstance(): OverlayScrollbars | null;\r\n  /** Returns the root element. */\r\n  getElement(): ElementRef<T> | null;\r\n}\r\n\r\nconst OverlayScrollbarsComponent = <T extends keyof JSX.IntrinsicElements>(\r\n  props: OverlayScrollbarsComponentBaseProps<T>,\r\n  ref: ForwardedRef<OverlayScrollbarsComponentRef<T>>\r\n) => {\r\n  const { element = 'div', options, events, defer, children, ...other } = props;\r\n  const Tag = element;\r\n  const elementRef = useRef<ElementRef<T>>(null);\r\n  const childrenRef = useRef<HTMLDivElement>(null);\r\n  const [initialize, osInstance] = useOverlayScrollbars({ options, events, defer });\r\n\r\n  useEffect(() => {\r\n    const { current: elm } = elementRef;\r\n    const { current: childrenElm } = childrenRef;\r\n    if (elm && childrenElm) {\r\n      initialize({\r\n        target: elm as any,\r\n        elements: {\r\n          viewport: childrenElm,\r\n          content: childrenElm,\r\n        },\r\n      });\r\n    }\r\n    return () => osInstance()?.destroy();\r\n  }, [initialize, element]);\r\n\r\n  useImperativeHandle(\r\n    ref,\r\n    () => {\r\n      return {\r\n        osInstance,\r\n        getElement: () => elementRef.current,\r\n      };\r\n    },\r\n    []\r\n  );\r\n\r\n  return (\r\n    // @ts-ignore\r\n    <Tag data-overlayscrollbars-initialize=\"\" ref={elementRef} {...other}>\r\n      <div data-overlayscrollbars-contents=\"\" ref={childrenRef}>\r\n        {children}\r\n      </div>\r\n    </Tag>\r\n  );\r\n};\r\n\r\nconst OverlayScrollbarsComponentForwardedRef = forwardRef(OverlayScrollbarsComponent) as <\r\n  T extends keyof JSX.IntrinsicElements\r\n>(\r\n  props: OverlayScrollbarsComponentProps<T>\r\n) => ReturnType<typeof OverlayScrollbarsComponent>;\r\n\r\nexport { OverlayScrollbarsComponentForwardedRef as OverlayScrollbarsComponent };\r\n"],"names":["createCache","options","update","o","_initialValue","u","_equal","_","_alwaysUpdateValues","_previous","_value","cacheUpdateContextual","newValue","force","curr","newVal","changed","isBrowser","window","ElementNodeType","Node","ELEMENT_NODE","toString","hasOwnProperty","Object","prototype","typeRgx","isUndefined","obj","isNull","type","call","replace","toLowerCase","isNumber","isString","isBoolean","isFunction","isArray","Array","isObject","isArrayLike","length","lengthCorrectFormat","isPlainObject","key","cstr","ctor","ctorProto","hasOwnConstructor","hasIsPrototypeOf","isHTMLElement","instanceofObj","HTMLElement","nodeType","isElement","Element","each","source","callback","i","keys","inArray","arr","item","indexOf","concat","a","b","push","array","items","arrayIsSingleItem","apply","from","original","result","Set","forEach","value","elm","createOrKeepArray","isEmptyArray","deduplicateArray","runEachAndClear","args","keep","fn","prop","assignDeep","target","object1","object2","object3","object4","object5","object6","sources","copy","copyIsArray","src","clone","slice","removeUndefinedProperties","deep","isEmptyObject","name","attr","attrName","getAttribute","setAttribute","getValueSet","split","removeAttr","removeAttribute","attrClass","add","currValuesSet","newTokens","join","trim","getElmPrototype","find","selector","rootElm","document","querySelectorAll","is","matches","msMatchesSelector","contents","childNodes","parent","parentElement","closest","closestFn","liesBetween","highBoundarySelector","deepBoundarySelector","closestHighBoundaryElm","closestDeepBoundaryElm","findFirst","querySelector","deepBoundaryIsValid","noop","removeElements","nodes","e","parentElm","removeChild","before","preferredAnchor","insertedElms","fragment","anchor","createDocumentFragment","insertedElm","previousSibling","appendChild","nextSibling","firstChild","insertBefore","appendChildren","node","children","insertAfter","insertedNodes","createDiv","classNames","div","createElement","createDOM","html","createdDiv","innerHTML","wnd","mathMax","Math","max","mathMin","min","mathRound","round","cAF","abs","cancelAnimationFrame","rAF","requestAnimationFrame","setT","setTimeout","clearT","clearTimeout","firstLetterToUpper","str","charAt","toUpperCase","cssPrefixes","jsPrefixes","jsCache","cssCache","cssProperty","uppercasedName","elmStyle","style","prefix","prefixWithoutDashes","resultPossibilities","resultPossibility","undefined","jsAPI","MutationObserverConstructor","IntersectionObserverConstructor","ResizeObserverConstructor","scrollT","bind","selfClearTimeout","timeout","id","setTFn","clearTFn","debounce","functionToDebounce","maxTimeoutId","prevArguments","latestArguments","clear","v","_timeout","p","_maxDelay","S","_mergeParams","invokeFunctionToDebounce","this","mergeParms","flush","debouncedFn","arguments","finalTimeout","hasTimeout","finalMaxWait","hasMaxWait","setTimeoutFn","clearTimeoutFn","invokedArgs","boundInvoke","timeoutId","_flush","rnothtmlwhite","classListAction","className","action","classList","clazz","classes","match","removeClass","remove","addClass","customCssPropRegex","getCSSVal","computedStyle","getPropertyValue","validFiniteNumber","number","notNaN","isFinite","parseToZeroOrNumber","parseFloat","ratioToCssPercent","ratio","toFixed","numberToCssPx","setStyles","styles","rawValue","test","setProperty","getStyles","pseudoElm","getSingleStyle","getStylesResult","getComputedStyle","reduce","getDirectionIsRTL","topRightBottomLeft","propertyPrefix","propertySuffix","finalPrefix","finalSuffix","top","right","bottom","left","t","r","l","getTrasformTranslateValue","isHorizontal","x","y","strPaddingTop","strPaddingRight","strPaddingLeft","strPaddingBottom","strMarginLeft","strMarginRight","strMarginBottom","strOverflowX","strOverflowY","strWidth","strHeight","strHidden","zeroObj","w","h","getElmWidthHeightProperty","property","windowSize","customWnd","offsetSize","clientSize","scrollSize","fractionalSize","cssWidth","cssHeight","getBoundingClientRect","domRectHasDimensions","rect","domRectAppeared","currContentRect","prevContentRect","rectHasDimensions","equal","props","propMutation","equalWH","equalXY","equalTRBL","equalBCRWH","passiveEventsSupport","passiveStr","supportPassiveEvents","addEventListener","defineProperty","get","splitEventNames","eventNames","removeEventListener","listener","capture","eventName","doSupportPassiveEvents","passive","_ref","_passive","_capture","once","_once","nativeOptions","map","finalListener","evt","stopPropagation","preventDefault","absoluteCoordinates","pageYOffset","pageXOffset","getRTLCompatibleScrollPosition","normalizedScrollPosition","normalizedScrollPositionMax","rtlScrollBehavior","n","scrollElementTo","position","scrollLeft","scrollTop","getElmentScroll","manageListener","createEventListenerHub","initialEventListeners","events","Map","removeEvent","eventSet","currListener","addEvent","nameOrEventListeners","listenerOrPure","set","eventListenerKeys","offFns","eventListener","triggerEvent","event","opsStringify","JSON","stringify","val","getPropByPath","path","defaultOptions","paddingAbsolute","showNativeOverlaidScrollbars","elementEvents","attributes","ignoreMutation","overflow","scrollbars","theme","visibility","autoHide","autoHideDelay","autoHideSuspend","dragScroll","clickScroll","pointers","getOptionsDiff","currOptions","newOptions","diff","optionKey","currOptionValue","newOptionValue","isDiff","createOptionCheck","changedOptions","dataAttributePrefix","classNameEnvironment","classNameEnvironmentFlexboxGlue","classNameEnvironmentFlexboxGlueMax","classNameScrollbarHidden","dataAttributeInitialize","dataAttributeHost","dataAttributeHostOverflowX","dataAttributeHostOverflowY","dataValueHostOverflowVisible","dataValueHostScrollbarPressed","dataValueHostUpdating","dataAttributeViewport","dataValueViewportArrange","dataValueViewportScrollbarHidden","dataValueViewportOverflowVisible","dataAttributePadding","dataAttributeContent","classNameSizeObserver","classNameSizeObserverAppear","classNameSizeObserverListener","classNameSizeObserverListenerItem","classNameSizeObserverListenerScroll","classNameScrollbar","classNameSizeObserverListenerItemFinal","classNameScrollbarRtl","classNameScrollbarHorizontal","classNameScrollbarVertical","classNameScrollbarTrack","classNameScrollbarHandle","classNameScrollbarVisible","classNameScrollbarCornerless","classNameScrollbarTransitionless","classNameScrollbarInteraction","classNameScrollbarUnusable","classNameScrollbarAutoHide","classNameScrollbarAutoHideHidden","classNameScrollbarWheel","classNameScrollbarTrackInteractive","classNameScrollbarHandleInteractive","pluginModules","staticPluginModuleInstances","registerPluginModuleInstances","plugin","staticObj","instanceInfo","static","osStatic","instance","osInstance","instanceObj","instancePluginMap","getStaticPluginModuleInstance","pluginModuleName","sizeObserverPluginName","scrollbarsHidingPluginName","clickScrollPluginModuleName","environmentInstance","getNativeScrollbarSize","body","measureElm","measureElmChild","cSize","oSize","fSize","getRtlScrollBehavior","childElm","direction","parentOffset","childOffset","childOffsetAfterScroll","getFlexboxGlue","revertFbxGlue","minOffsetsizeParent","minOffsetsize","supportsMin","revertFbxGlueMax","maxOffsetsizeParent","maxOffsetsize","supportsMax","createEnvironment","envElm","envChildElm","updateNativeScrollbarSizeCache","getNativeScrollbarSizeCache","nativeScrollbarsSize","nativeScrollbarsHiding","testElm","revertClass","getNativeScrollbarsHiding","nativeScrollbarsOverlaid","staticDefaultInitialization","elements","host","padding","viewport","ownerDocument","content","slot","cancel","staticDefaultOptions","getDefaultOptions","getDefaultInitialization","env","_nativeScrollbarsSize","_nativeScrollbarsOverlaid","_nativeScrollbarsHiding","_cssCustomProperties","_scrollTimeline","_rtlScrollBehavior","_flexboxGlue","_addResizeListener","_getDefaultInitialization","_setDefaultInitialization","newInitializationStrategy","_getDefaultOptions","_setDefaultOptions","newDefaultOptions","_staticDefaultInitialization","_staticDefaultOptions","scrollbarSizeChanged","scrollbarsHidingPlugin","_envWindowZoom","getEnvironment","resolveInitialization","staticInitializationElement","fallbackStaticInitializationElement","defaultStaticInitializationElement","staticInitializationElementValue","staticInitialization","dynamicInitializationElement","fallbackDynamicInitializationElement","defaultDynamicInitializationElement","dynamicInitializationElementValue","dynamicInitialization","resolvedInitialization","targetInstanceMap","WeakMap","getInstance","createDOMObserver","isContentObserver","isConnected","Y","_attributes","K","_styleChangingAttributes","J","_eventContentChange","Z","_nestedTargetSelector","tt","_ignoreTargetChange","nt","_ignoreContentChange","debouncedEventContentChange","destroyEventContentChange","updateEventContentChangeElements","createEventContentChange","eventContentChange","destroyed","updateElements","getElements","eventElmList","entries","contains","removeListener","delete","destroy","finalStyleChangingAttributes","observedAttributes","observerCallback","fromRecords","mutations","ignoreTargetChange","ignoreContentChange","totalChangedNodes","targetChangedAttrs","targetStyleChanged","contentChanged","mutation","attributeName","mutationTarget","oldValue","addedNodes","removedNodes","isAttributesType","isChildListType","targetIsMutationTarget","isAttrChange","attributeValue","attributeChanged","styleChangingAttrChanged","contentAttrChanged","isNestedTarget","contentFinalChanged","mutationObserver","observe","attributeOldValue","attributeFilter","subtree","childList","characterData","disconnect","takeRecords","createSizeObserver","onSizeChangedCallback","scrollAmount","_direction","observeDirectionChange","_appear","observeAppearChange","sizeObserverPlugin","getIsDirectionRTL","updateResizeObserverContentRectCache","destroyFns","sizeObserver","listenerElement","onSizeChangedCallbackProxy","sizeChangedContext","isResizeObserverCall","ResizeObserverEntry","hasDirectionCache","skip","appear","doDirectionScroll","currRContentRect","contentRect","hasDimensions","appeared","rtl","_directionIsRTLCache","_sizeChanged","resizeObserverInstance","pop","pluginAppearCallback","pluginDestroyFns","updateDirectionIsRTLCache","directionIsRTLCacheValues","directionIsRTLCache","directionIsRTLCacheChanged","directionIsRTLCachePrevious","createTrinsicObserver","onTrinsicChangedCallback","intersectionObserverInstance","trinsicObserver","updateHeightIntrinsicCache","triggerOnTrinsicChangedCallback","updateValue","heightIntrinsic","ioEntryOrSize","isIntersecting","intersectionRatio","isHeightIntrinsic","heightIntrinsicChanged","intersectionObserverCallback","root","onSizeChanged","newSize","createObserversSetup","structureSetupElements","onObserversUpdated","debounceTimeout","debounceMaxDelay","updateContentMutationObserver","destroyContentMutationObserver","I","hostSelector","viewportSelector","viewportAttrsFromTarget","baseStyleChangingAttrsTextarea","baseStyleChangingAttrs","state","_heightIntrinsic","_directionIsRTL","_host","it","ut","_viewport","ft","_content","_t","_isTextarea","dt","_viewportIsTarget","vt","_viewportHasClass","ht","_viewportAddRemoveClass","B","j","updateContentSizeCache","hasOver","hasVpStyle","scrollOffset","contentScroll","viewportScroll","fractional","contentMutationObserverAttr","onObserversUpdatedDebounced","prev","prevObj","currObj","updateViewportAttrsFromHost","attribute","hostAttr","onTrinsicChanged","heightIntrinsicCache","updateHints","_heightIntrinsicChanged","updateFn","directionIsRTL","directionIsRTLChanged","_directionChanged","onContentMutation","contentChangedThroughEvent","_contentMutation","onHostMutation","_hostMutation","constructTrinsicObserver","updateTrinsicObserver","constructSizeObserver","constructHostMutationObserver","updateHostMutationObserver","viewportIsTargetResizeObserver","destroySizeObserver","destroyTrinsicObserver","destroyHostMutationObserver","removeResizeListener","_scrollbarSizeChanged","_ref2","_force","_checkOption","_takeRecords","attributesChanged","elementEventsChanged","debounceValue","debounceChanged","construct","ignoreMutationFromOptions","maxWait","hostUpdateResult","trinsicUpdateResult","contentUpdateResult","capNumber","getScrollbarHandleOffsetPercent","scrollPos","overflowAmount","rawScrollPosMax","scrollPositionMin","scrollPositionMax","getRTLCompatibleScrollBounds","scrollPercentNegate","scrollPercentInvert","scrollPercentNone","rawScrollPercent","getScrollbarHandleLengthRatio","structureSetupState","scrollbarStructure","axis","Ct","_track","Ht","_handle","handleSize","trackSize","zt","_overflowAmount","It","_overflowEdge","viewportSize","getScrollbarHandleOffsetRatio","scrollPercent","lengthRatio","createScrollbarsSetupElements","scrollbarsSetupEvents","N","T","defaultInitScrollbars","defaultInitScrollbarsSlot","At","_target","Et","_targetIsElm","Tt","_scrollOffsetElement","Dt","_isBody","scrollbarsInit","initScrollbarsSlot","elementAnimations","initScrollTimeline","scrollTimelineX","scrollTimelineY","evaluatedScrollbarSlot","generalDynamicInitializationElement","doRefreshScrollbarOffset","scrollbar","addDirectionRTLKeyframes","keyframes","directionRTL","cancelElementAnimations","currAnimations","element","animation","setElementAnimation","timeline","composite","activeAnimations","activeAnimation","effect","KeyframeEffect","animate","scrollbarStructureAddRemoveClass","scrollbarStructures","_scrollbar","scrollbarStyle","scrollbarStructureRefreshHandleLength","structure","scrollbarStructureRefreshHandleOffset","kt","getRatio","start","end","transform","U","isRTL","offsetRatio","styleScrollbarPosition","horizontalScrollbars","verticalScrollbars","scrollbarsAddRemoveClass","onlyHorizontal","singleAxis","runVertical","generateScrollbarDOM","scrollbarClassName","arrToPush","transitionlessClass","track","handle","generateHorizontalScrollbarStructure","generateVerticalScrollbarStructure","_refreshScrollbarsHandleLength","refreshScrollbarsHandleLength","_refreshScrollbarsHandleOffset","refreshScrollbarsHandleOffset","_refreshScrollbarsScrollbarOffset","refreshScrollbarsScrollbarOffset","_ref3","setScrollbarElementAnimation","getScrollbarOffsetKeyframes","cushion","directionRTLMultiplicator","_ref4","_scrollbarsAddRemoveClass","_horizontal","_scrollbarStructures","_clone","_style","_vertical","appendElements","createScrollbarsSetupEvents","Gt","_documentElm","refreshScrollbarStructuresHandleOffset","wheelTimeout","clearWheelTimeout","requestHandleTransitionAnimationFrame","cancelHandleTransitionTimeout","refreshHandleOffsetTransition","scrollByFn","scrollBy","clientXYKey","widthHeightKey","leftTopKey","whKey","xyKey","isAffectingTransition","propertyName","wheelScrollBy","wheelEvent","deltaX","deltaY","deltaMode","behavior","animateHandleOffset","createInteractiveScrollEvents","releasePointerCaptureEvents","createRelativeHandleMove","mouseDownScroll","invertedScale","deltaMovement","handleTrackDiff","scrollDelta","pointerDownEvent","isDragScroll","pointerCaptureElement","scrollbarOptions","button","isPrimary","pointerType","includes","instantClickScroll","shiftKey","getHandleRect","getTrackRect","getHandleOffset","handleRect","trackRect","axisScale","moveHandleRelative","pointerDownOffset","handleLength","handleCenter","relativeTrackPointerOffset","startOffset","releasePointerCapture","pointerUpEvent","pointerId","pointerMoveEvent","relativeMovement","setPointerCapture","animateClickScroll","createStructureSetupElements","createUniqueViewportArrangeElement","_createUniqueViewportArrangeElement","defaultInitElements","defaultHostInitialization","defaultPaddingInitialization","defaultViewportInitialization","defaultContentInitialization","targetIsElm","targetStructureInitialization","initElements","hostInitialization","paddingInitialization","viewportInitialization","contentInitialization","targetElement","isTextarea","docElement","documentElement","isBody","docWnd","defaultView","generalStaticInitializationElement","generalResolveInitialization","createNewDiv","generateViewportElement","generateContentElement","possibleViewportElement","viewportIsTarget","viewportIsTargetBody","possibleContentElement","viewportIsContent","defaultContentElementPresent","viewportIstContentViewport","viewportIsContentContent","viewportElement","nonBodyHostElement","hostElement","contentElement","activeElm","activeElement","setViewportFocus","evaluatedTargetObj","_padding","_viewportArrange","_scrollEventElement","_windowElm","_viewportIsContent","viewportAttributeClassName","hostAttributeClassName","hasAttrClass","has","generatedElements","elementIsGenerated","Qt","tn","isTextareaHostGenerated","targetContents","contentSlot","removeHtmlClass","unwrap","tabIndexStr","ogTabindex","focus","revertViewportTabIndex","off","createTrinsicUpdateSegment","_ref7","_observersUpdateHints","_observersState","gt","rt","createPaddingUpdateSegment","updatePaddingCache","currentPaddingCache","_ref9","paddingChanged","ct","wt","bt","lt","paddingAbsoluteChanged","paddingStyleChanged","paddingRelative","paddingHorizontal","paddingVertical","paddingStyle","viewportStyle","_paddingAbsolute","_viewportPaddingStyle","_paddingStyleChanged","createOverflowUpdateSegment","max0","strVisible","whCacheOptions","xyCacheOptions","getOverflowAmount","viewportScrollSize","viewportClientSize","tollerance","devicePixelRatio","amount","overflowIsVisible","overflowBehavior","L","A","doViewportArrange","updateSizeFraction","getCurrentSizeFraction","updateViewportScrollSizeCache","getCurrentViewportScrollSizeCache","updateOverflowAmountCache","getCurrentOverflowAmountCache","updateOverflowEdge","getCurrentOverflowEdgeCache","updateOverflowStyleCache","fixFlexboxGlue","viewportOverflowState","cn","ln","_overflowScroll","M","_scrollbarsHideOffset","hostClientSize","isContentBox","subtractXScrollbar","getViewportOverflowState","viewportStyleObj","arrangeHideOffset","getStatePerAxis","styleKey","isOverlaid","nativeScrollbarSize","overflowStyle","overflowScroll","scrollbarsHideOffsetArrange","xOverflowStyle","xOverflowScroll","xScrollbarsHideOffset","xScrollbarsHideOffsetArrange","yOverflowStyle","yOverflowScroll","yScrollbarsHideOffset","yScrollbarsHideOffsetArrange","_overflowStyle","_scrollbarsHideOffsetArrange","setViewportOverflowState","hasOverflow","overflowOption","setAxisOverflowStyle","hasOverflowAxis","overflowVisible","overflowVisibleBehavior","overflowX","visibleBehaviorX","overflowY","visibleBehaviorY","hideNativeScrollbars","viewportArrange","R","arrangeX","arrangeY","hideOffsetX","hideOffsetY","viewportPaddingStyle","horizontalMarginKey","viewportHorizontalPaddingKey","horizontalMarginValue","verticalMarginValue","horizontalPaddingValue","verticalPaddingValue","arrangeViewport","undoViewportArrange","_overflowUpdateSegment","yt","St","showNativeOverlaidScrollbarsOption","showNativeOverlaidScrollbarsChanged","overflowChanged","adjustFlexboxGlue","adjustViewportArrange","overflowXVisible","overflowYVisible","preMeasureViewportOverflowState","sizeFractionCache","viewportScrollSizeCache","overflowAmuntCache","overflowEdgeCache","redoViewportArrange","undoViewportArrangeOverflowState","sizeFraction","sizeFractionChanged","viewportScrollSizeChanged","arrangedViewportScrollSize","arrangedViewportClientSize","windowInnerSize","overflowAmountScrollSize","overflowAmountClientSize","overflowEdge","overflowEdgeChanged","overflowAmountChanged","removeClipping","viewportArranged","overflowStyleChanged","_hasOverflow","_overflowStyleChanged","_overflowEdgeChanged","_overflowAmountChanged","createSetups","onUpdated","onScroll","structureSetupCreate","structureSetupUpdate","structureSetupCanceled","appendStructureElements","canceled","updateSegments","updateInfo","updateSegment","createStructureSetup","observersSetupCreate","observersSetupUpdate","observersSetupState","observersUpdateHints","scrollbarsSetupCreate","scrollbarsSetupUpdate","scrollbarsSetupElements","createScrollbarsSetup","autoHideIsMove","autoHideIsLeave","autoHideNotNever","mouseInHost","prevTheme","instanceAutoHideSuspendScrollDestroyFn","instanceAutoHideDelay","requestMouseMoveAnimationFrame","cancelMouseMoveAnimationFrame","requestScrollAnimationFrame","cancelScrollAnimationFrame","scrollTimeout","clearScrollTimeout","auotHideMoveTimeout","clearAutoHideTimeout","autoHideSuspendTimeout","clearAutoHideSuspendTimeout","auotHideTimeout","clearAutoTimeout","qt","Lt","Mt","Rt","Pt","manageAutoHideSuspension","manageScrollbarsAutoHide","removeAutoHide","delayless","hide","isHoverablePointerType","onHostMouseEnter","_ref5","_structureUpdateHints","Xt","Yt","Kt","st","Jt","Zt","themeChanged","visibilityChanged","autoHideChanged","autoHideSuspendChanged","dragScrollChanged","clickScrollChanged","trulyAppeared","updateScrollbars","updateVisibility","setScrollbarVisibility","isVisible","xVisible","yVisible","updateHintsAreTruthy","hints","some","observerUpdateHints","_changedOptions","rawChangedOptions","rawForce","xt","un","_cloneScrollbar","baseUpdateInfoObj","observersHints","structureHints","truthyObserversHints","truthyStructureHints","scrollingElement","initialScroll","_observersSetupState","_structureSetupState","_structureSetupElements","_scrollbarsSetupElements","OverlayScrollbars","eventListeners","q","targetIsElement","instanceTarget","potentialInstance","instancePluginModuleInstances","validateOptions","newOptionsWithoutUndefined","pluginValidate","currentOptions","addPluginEvent","removePluginEvents","triggerPluginEvent","addInstanceEvent","removeInstanceEvents","triggerInstanceEvent","setupsConstruct","setupsUpdate","setupsState","setupsElements","setupsCanceled","sizeChanged","directionChanged","contentMutation","hostMutation","scrollEvent","removeInstance","pure","base","on","_n","Vt","Nt","translateScrollbarStructure","translateScrollbarsSetupElement","scrollbarsSetupElement","Ut","Bt","translatedStructure","scrollOffsetElement","scrollEventElement","scrollbarHorizontal","scrollbarVertical","addInstance","cancelInitialization","cancelInitializationValue","defaultNativeScrollbarsOverlaid","defaultbody","resolvedNativeScrollbarsOverlaid","resolvedDocumentScrollingElement","finalNativeScrollbarsOverlaid","finalDocumentScrollingElement","plugins","isArr","pluginsToAdd","addedPlugin","addPlugins","valid","hasElmsFn","V","W","X","G","F","scrollbarsSize","scrollbarsOverlaid","scrollbarsHiding","flexboxGlue","cssCustomProperties","scrollTimeline","setDefaultInitialization","setDefaultOptions","createDefer","O","rafId","idleSupported","requestIdleCallback","rIdle","cIdle","cancelIdleCallback","s","idleId","OverlayScrollbarsComponentForwardedRef","forwardRef","ref","defer","other","Tag","elementRef","useRef","childrenRef","initialize","params","requestDefer","cancelDefer","useMemo","instanceRef","deferRef","optionsRef","eventsRef","useEffect","current","_a","presentInstance","currDefer","currEvents","init","useOverlayScrollbars","childrenElm","useImperativeHandle","getElement"],"sourceRoot":""}